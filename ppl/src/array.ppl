use core.*

use assert.*
use math.*
use memory.*
use printable.*

/// Array of values
type Array<T>:
	size: Integer
	capacity: Integer
	data: MemoryAddress

fn<T> default <:Type<Array<T>>> -> Array<T>:
	let size = 0
	let capacity = 0
	let data = default MemoryAddress
	return Array<T> { size, capacity, data }

/// Create an empty array
fn<T> <:Type<T>>[] -> Array<T>:
	let capacity = 8
	let data = allocate capacity T
	return Array<T> { size: 0, capacity, data }

/// Create an array by repeating a value n times
fn<T> repeat <x: T> <n: Integer> times -> Array<T>:
	let mut array = T[]
	let mut i = 0
	while i < n:
		push x to array
		i += 1
	return array

/// Get i-th element of an array
fn<T> <array: &mut Array<T>> [ <i: Integer> ] -> &mut T:
	assert (0 <= i and i < array.size) "Index out of bounds"
	let address = array.data + i * (size of T)
	return T at address

/// Get i-th element of an array
fn<T> <array: &Array<T>> [ <i: Integer> ] -> &T:
	assert (0 <= i and i < array.size) "Index out of bounds"
	let address = array.data + i * (size of T)
	return T at address

fn<T> push <x: T> to <array: &mut Array<T>>:
	let bytes = size of T
	if array.size == array.capacity:
		let new_capacity = array.capacity * 2
		let new_data = allocate new_capacity T
		let mut i = 0
		while i < array.size:
			let offset = i * bytes
			copy bytes bytes from (array.data + offset) to (new_data + offset)
			i += 1
		free array.data
		array.data = new_data
		array.capacity = new_capacity

	copy bytes bytes from (address of x) to (array.data + array.size * bytes)
	array.size += 1

fn<T> <array: &Array<T>> is empty => array.size == 0
fn<T> <array: &Array<T>> is not empty => array.size > 0

fn<U: Printable> String from <array: Array<U>> -> String:
	let mut str = "["
	if array is not empty:
		str += (String from array[0])
		let mut i = 1
		while i < array.size:
			str += ", "
			str += (String from array[i])
			i += 1
	str += "]"
	return str

type Iterator<T>:
	array: &Array<T>
	index: Integer

fn<T> clone <it: &Iterator<T>> -> Iterator<T>:
	return Iterator<T> { array: it.array, index: it.index }

fn<T> iterator for <array: &Array<T>> -> Iterator<T>:
	return Iterator<T> { array, index: 0 }

fn<T> <it: &Iterator<T>> exists => it.index < it.array.size

fn<T> advance <it: &mut Iterator<T>>:
	it.index += 1

fn<T> value from <it: &Iterator<T>> -> &T:
	return it.array[it.index]