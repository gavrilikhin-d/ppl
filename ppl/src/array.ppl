use core.*

use memory.*

/// Array of values
type Array<T>:
	size: Integer
	capacity: Integer
	data: MemoryAddress

/// Create an empty array
fn<T> <:Type<T>>[] -> Array<T>:
	let capacity = 8
	let data = allocate capacity T
	return Array<T> { size: 0, capacity, data }

// TODO: errors, if out of borders
/// Get i-th element of an array
fn<T> <array: &Array<T>> [ <i: Integer> ] -> &T:
	let address = array.data + i * (size of T)
	return T at address

// TODO: errors, if out of borders
/// Get i-th element of an array
fn<T> <array: &mut Array<T>> [ <i: Integer> ] -> &mut T:
	let address = array.data + i * (size of T)
	return T at address

fn<T> push <x: T> to <array: &mut Array<T>>:
	if array.size == array.capacity:
		let new_capacity = array.capacity * 2
		let new_data = allocate new_capacity T
		let mut i = 0
		while i < array.size:
			let value = T at (new_data + i)
			value = array[i]
			i = i + 1
		free array.data
		array.data = new_data
		array.capacity = new_capacity

	let value = T at (array.data + array.size)
	value = x
	array.size = array.size + 1

fn<T> <array: &Array<T>> is empty => array.size == 0
fn<T> <array: &Array<T>> is not empty => array.size > 0

fn<U: AsString> String from <array: &Array<U>>:
	let mut result = "["
	if array is not empty:
		result += (String from (dereference array[0]))
		let mut i = 1
		while i < array.size:
			result += ", "
			result += (String from (dereference array[i]))
			i += 1
		i += 0 // FIXME: noop to fix wrong parsing 
	result += "]"
	return result