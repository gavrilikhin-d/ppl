// IMPORTANT: when adding new special type or function,
// don't forget to threat it as special in TypeDeclaration and hir_to_ir.rs
// IMPORTANT: add precedence for new binary operators

//=================================
//             Type
//=================================
/// Type of a type
///
/// When you pass type as value it gets converted to instance of this struct
/// # Example
/// `Bool` expands to:
/// ```
/// Type<Bool> {
/// 	name: "Bool",
/// 	size: 1
/// }
/// ```
type Type<T>:
	name: String
	size: Integer
//=================================

//=================================
//              None
//=================================
@builtin
type None

/// Convert `None` to `String`
fn String from <:None> => "none"
//---------------------------------


//=================================
//              Bool
//=================================
@builtin
type Bool

/// Negate boolean value
fn not <x:Bool> -> Bool:
	if x:
		return false
	return true

/// Logic-and function
fn <x: Bool> and <y: Bool> -> Bool:
	if x:
		return y
	return false

/// Logic-or function
fn <x: Bool> or <y: Bool> -> Bool:
	if x:
		return true
	return y

/// Convert `Bool` to `String`
fn String from <x: Bool> -> String:
	if x:
		return "true"
	return "false"
//---------------------------------


//=================================
//            Integer
//=================================
type IntegerImpl

@builtin
type Integer:
	impl: Reference<IntegerImpl>

@mangle_as("integer_eq_integer")
fn <:Integer> == <:Integer> -> Bool

@mangle_as("integer_less_integer")
fn <:Integer> < <:Integer> -> Bool

fn + <x: Integer> => x

@mangle_as("minus_integer")
fn - <:Integer> -> Integer

@mangle_as("integer_plus_integer")
fn <:Integer> + <:Integer> -> Integer

fn <x: Integer> - <y: Integer> => x + -y

@mangle_as("integer_star_integer")
fn <:Integer> * <:Integer> -> Integer

// TODO: return error on division by zero
@mangle_as("integer_slash_integer")
fn <:Integer> / <:Integer> -> Rational

/// Calculate factorial of a number
fn <n: Integer> ! -> Integer:
	let mut res = 1
	let mut i = 2
	while i <= n:
		res = res * i
		i = i + 1
	return res

/// Calculate square root of an integer with rounding
@mangle_as("sqrt_integer")
fn sqrt <:Integer> -> Integer

/// Calculate `x` in `n`th power
@mangle_as("integer_power_integer")
fn <x: Integer> ^ <n: Integer> -> Integer

/// Get remainder of division
@mangle_as("integer_mod_integer")
fn <x: Integer> % <y: Integer> -> Integer

/// Convert `Integer` to `String`
@mangle_as("integer_as_string")
fn String from <:Integer> -> String

@mangle_as("destroy_integer")
fn destroy <:Integer>

@mangle_as("clone_integer")
fn clone <:Integer> -> Integer
//---------------------------------

//=================================
//            Rational
//=================================
type RationalImpl

@builtin
type Rational:
	impl: Reference<RationalImpl>

@mangle_as("rational_eq_rational")
fn <:Rational> == <:Rational> -> Bool

@mangle_as("rational_less_rational")
fn <:Rational> < <:Rational> -> Bool

fn + <x: Rational> => x

@mangle_as("minus_rational")
fn - <:Rational> -> Rational

@mangle_as("rational_plus_rational")
fn <:Rational> + <:Rational> -> Rational

fn <x: Rational> - <y: Rational> => x + -y

@mangle_as("rational_star_rational")
fn <:Rational> * <:Rational> -> Rational

// TODO: return error on division by zero
@mangle_as("rational_slash_rational")
fn <:Rational> / <:Rational> -> Rational

/// Convert `Rational` to `String`
@mangle_as("rational_as_string")
fn String from <:Rational> -> String

@mangle_as("destroy_rational")
fn destroy <:Rational>

@mangle_as("clone_rational")
fn clone <:Rational> -> Rational
//---------------------------------

//=================================
//            String
//=================================
type StringImpl

@builtin
type String:
	impl: Reference<StringImpl>

/// Concatenate 2 strings
@mangle_as("string_plus_string")
fn <:String> + <:String> -> String

/// Prints string to stdout
@mangle_as("print_string")
fn print <:String>

/// Print string with a newline at the end
fn println <str: String> => print (str + "\n")

@mangle_as("destroy_string")
fn destroy <:String>

@mangle_as("clone_string")
fn clone <:String> -> String
//---------------------------------

//=================================
//            AsString
//=================================
/// Trait for things that may be interpreted as string
trait AsString:
	fn String from <:Self> -> String

/// Print anything that may be interpreted as String
fn print <x: AsString> => print (String from x)

/// Print anything that may be interpreted as String with newline
fn println <x: AsString> => println (String from x)
//---------------------------------

//=================================
//             Eq
//=================================
/// Trait for things that may be compared for equality
trait Eq:
	fn <:Self> == <:Self> -> Bool

	fn <x: Self> != <y: Self> => not (x == y)

//---------------------------------

//=================================
//              Ord
//=================================
/// Trait for things that may be ordered
trait Ord:
	fn <:Self> < <:Self> -> Bool

	fn <x: Self> >  <y: Self> => y < x
	fn <x: Self> <= <y: Self> => not (x > y)
	fn <x: Self> >= <y: Self> => not (x < y)

//---------------------------------

//=================================
//             Type
//=================================
/// Name of a type including generic parameters
fn<T> String from <ty: Type<T>> => ty.name

/// Size of a type in bytes
fn<T> size of <ty: Type<T>> => ty.size

/// Get type of a value
fn<T> `type` of <:T> => T
//=================================


//=================================
//          ReferenceMut
//=================================
/// Reference to a mutable value
@builtin
type ReferenceMut<T>

/// Get reference to a mutable value
fn<T> reference to mutable <ref: ReferenceMut<T>> => ref
//=================================

//=================================
//          Reference
//=================================
/// Reference to a value
@builtin
type Reference<T>

/// Get reference to a value
fn<T> reference to <ref: Reference<T>> => ref
//=================================

//=================================
//             Destoy
//=================================
/// Trait for things that have a destructor
trait Destroy:
	fn destroy <:Self>
//=================================


//=================================
//            Add
//=================================
/// Trait for `+` operation
trait Add:
	fn <:Self> + <:Self> -> Self

	fn <self: ReferenceMut<Self>> += <other: Self>:
		self = self + other
//=================================


//=================================
//            Multiply
//=================================
/// Trait for `*` operation
trait Multiply:
	fn <:Self> * <:Self> -> Self

	fn <self: ReferenceMut<Self>> *= <other: Self>:
		self = self * other
//=================================