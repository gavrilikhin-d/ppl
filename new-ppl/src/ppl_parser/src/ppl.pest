module = { SOI ~ annotated_statement* ~ EOI }

annotated_statement =  { annotation* ~ statement }
annotation          = ${ "@" ~ identifier ~ EOL }

statement = _{ declaration | expression_statement }

expression_statement = ${ expression ~ EOL }
expression           = _{ literal }
literal              = _{ NONE | boolean }
NONE                 =  { "none" }
boolean              = _{ TRUE | FALSE }
TRUE                 =  { "true" }
FALSE                =  { "false" }

declaration = _{ function | type }

function            = ${ "fn" ~ WHITESPACE ~ function_name_parts ~ EOL }
function_name_parts = _{ function_name_part ~ (WHITESPACE ~ function_name_part)* }
function_name_part  = _{ text | parameter }
parameter           = !{ "<" ~ identifier ~ ":" ~ typename ~ ">" }

type     = ${ "type" ~ WHITESPACE ~ typename ~ EOL }
typename = @{ UPPERCASE_LETTER ~ (LETTER | NUMBER)* }

text       = @{ LETTER+ }
identifier = @{ LOWERCASE_LETTER ~ (LETTER | NUMBER)* }

EOL        = _{ "\n" | EOI }
WHITESPACE = _{ WHITE_SPACE }
