Rule: <name: RuleName> ':' <pattern: Pattern>
Pattern: <alts: Alternatives> => alts
Alternatives: Sequence ('|' Sequence)*
Sequence: <patterns: Repeat+> <action: Action?>
Repeat: AtomicPattern ('*' | '+' | '?')?
AtomicPattern: PatternInParentheses | NamedPattern | RuleReference | Regex | Text
PatternInParentheses: '(' <pattern: Pattern> ')' => pattern
Named: '<' <name: Identifier> ':' <pattern: Pattern> '>'
Identifier: /[a-zA-Z_][a-zA-Z_0-9]*/
RuleReference: RuleName
RuleName: /[A-Z][a-zA-Z0-9]*/
Regex: '/' /[^/]+/ '/'
Text: Char | String | /[^\s*+?()|<:>{}=]+/
Char: /'.'/
String: /"([^"\\]|\\.)*"/

Action: "=>" <value: Throw | Return> => value
Return: <value: Expression> => { Return: value }
Throw: "throw" <error: Expression> => { Throw: error }

Object: '{' '}' | '{' Initializer (, Initializer)* ,? '}'
Initializer: Identifier ':' Expression
Expression: Object | String | Char | Variable
Variable: Identifier