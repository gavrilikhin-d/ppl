// IMPORTANT: when adding new special type or function,
// don't forget to threat it as special in TypeDeclaration and hir_to_ir.rs
// IMPORTANT: add precedence for new binary operators

//=================================
//             Type
//=================================
/// Type of a type
///
/// When you pass type as value it gets converted to instance of this struct
/// # Example
/// `Bool` expands to:
/// ```
/// Type<Bool> {
/// 	name: "Bool",
/// 	size: 1
/// }
/// ```
type Type<T>:
    /// Name of type including generic parameters
	name: String
    /// Size of type in bytes
	size: Integer
//=================================

//=================================
//              None
//=================================
@builtin
type None

/// Convert `None` to `String`
fn <:None> as String => "none"
//---------------------------------


//=================================
//              Bool
//=================================
@builtin
type Bool

/// Negate boolean value
fn not <x:Bool> -> Bool:
	if x:
		return false
	return true

/// Logic-and function
fn <x: Bool> and <y: Bool> -> Bool:
	if x:
		return y
	return false

/// Logic-or function
fn <x: Bool> or <y: Bool> -> Bool:
	if x:
		return true
	return y

/// Convert `Bool` to `String`
fn <x: Bool> as String -> String:
	if x:
		return "true"
	return "false"
//---------------------------------


//=================================
//            Integer
//=================================
@builtin
type Integer

@mangle_as("integer_eq_integer")
fn <:Integer> == <:Integer> -> Bool

@mangle_as("integer_less_integer")
fn <:Integer> < <:Integer> -> Bool

fn + <x: Integer> => x

@mangle_as("minus_integer")
fn - <:Integer> -> Integer

@mangle_as("integer_plus_integer")
fn <:Integer> + <:Integer> -> Integer

fn <x: Integer> - <y: Integer> => x + -y

@mangle_as("integer_star_integer")
fn <:Integer> * <:Integer> -> Integer

// TODO: return error on division by zero
@mangle_as("integer_slash_integer")
fn <:Integer> / <:Integer> -> Rational

/// Calculate factorial of a number
fn <n: Integer> ! -> Integer:
	let mut res = 1
	let mut i = 2
	while i <= n:
		res = res * i
		i = i + 1
	return res

/// Calculate square root of an integer with rounding
@mangle_as("sqrt_integer")
fn sqrt <:Integer> -> Integer

/// Convert `Integer` to `String`
@mangle_as("integer_as_string")
fn <:Integer> as String -> String
//---------------------------------

//=================================
//            Rational
//=================================
@builtin
type Rational

@mangle_as("rational_eq_rational")
fn <:Rational> == <:Rational> -> Bool

@mangle_as("rational_less_rational")
fn <:Rational> < <:Rational> -> Bool

fn + <x: Rational> => x

@mangle_as("minus_rational")
fn - <:Rational> -> Rational

@mangle_as("rational_plus_rational")
fn <:Rational> + <:Rational> -> Rational

fn <x: Rational> - <y: Rational> => x + -y

@mangle_as("rational_star_rational")
fn <:Rational> * <:Rational> -> Rational

// TODO: return error on division by zero
@mangle_as("rational_slash_rational")
fn <:Rational> / <:Rational> -> Rational

/// Convert `Rational` to `String`
@mangle_as("rational_as_string")
fn <:Rational> as String -> String
//---------------------------------

//=================================
//            String
//=================================
@builtin
type String

/// Concatenate 2 strings
@mangle_as("string_plus_string")
fn <:String> + <:String> -> String

/// Prints string to stdout with newline
@mangle_as("print_string")
fn print <:String>
//---------------------------------

//=================================
//            AsString
//=================================
/// Trait for things that may be interpreted as string
trait AsString:
	fn <:Self> as String -> String

/// Print anything that may be interpreted as String
fn print <x: AsString> => print (x as String)
//---------------------------------

//=================================
//             Eq
//=================================
/// Trait for things that may be compared for equality
trait Eq:
	fn <:Self> == <:Self> -> Bool

	fn <x: Self> != <y: Self> => not (x == y)

//---------------------------------

//=================================
//              Ord
//=================================
/// Trait for things that may be ordered
trait Ord:
	fn <:Self> < <:Self> -> Bool

	fn <x: Self> >  <y: Self> => y < x
	fn <x: Self> <= <y: Self> => not (x > y)
	fn <x: Self> >= <y: Self> => not (x < y)

//---------------------------------

//=================================
//             Type
//=================================
/// Name of a type including generic parameters
fn<T> <ty: Type<T>> as String => ty.name

/// Size of a type in bytes
fn<T> size of <ty: Type<T>> => ty.size
//=================================

//=================================
//          MemoryAddress
//=================================
/// Address in memory
type MemoryAddress:
	value: Integer

/// Interpret and integer as memory address
fn <value: Integer> as MemoryAddress => MemoryAddress { value }

/// Convert `MemoryAddress` to `String`
@mangle_as("memory_address_as_string")
fn <address: MemoryAddress> as String -> String

/// Allocate `n` bytes of memory
@mangle_as("allocate_n_bytes")
fn allocate <n: Integer> bytes -> MemoryAddress

/// Free previously allocated memory
@mangle_as("free_memory")
fn free <address: MemoryAddress>
//=================================