---
source: src/semantics/tests/mod.rs
expression: ir
---
; ModuleID = 'rational'
source_filename = "rational.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%Rational = type { ptr }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@4 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@8 = private unnamed_addr constant [4 x i8] c"5/2\00", align 1
@9 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@10 = private unnamed_addr constant [2 x i8] c"9\00", align 1
@11 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@12 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@13 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@14 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@15 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@16 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@17 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@18 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@19 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@20 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@21 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@22 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@23 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@24 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@25 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@26 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@27 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@28 = private unnamed_addr constant [2 x i8] c"0\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define void @rational.execute() !dbg !9 {
init_globals:
  call void @initialize(), !dbg !10
  br label %0, !dbg !10

0:                                                ; preds = %init_globals
  %1 = call %Rational @rational_from_c_string(ptr @1), !dbg !11
  call void @"println <:Rational>"(%Rational %1), !dbg !11
  %2 = call %Rational @rational_from_c_string(ptr @2), !dbg !12
  %3 = call %Rational @"+ <:Rational>"(%Rational %2), !dbg !12
  call void @"println <:Rational>"(%Rational %3), !dbg !12
  %4 = call %Rational @rational_from_c_string(ptr @3), !dbg !13
  %5 = call %Rational @minus_rational(%Rational %4), !dbg !13
  call void @"println <:Rational>"(%Rational %5), !dbg !13
  %6 = call %Rational @rational_from_c_string(ptr @4), !dbg !14
  %7 = call %Rational @rational_from_c_string(ptr @5), !dbg !15
  %8 = call %Rational @rational_plus_rational(%Rational %6, %Rational %7), !dbg !15
  call void @"println <:Rational>"(%Rational %8), !dbg !15
  %9 = call %Rational @rational_from_c_string(ptr @6), !dbg !16
  %10 = call %Rational @rational_from_c_string(ptr @7), !dbg !17
  %11 = call %Rational @"<:Rational> - <:Rational>"(%Rational %9, %Rational %10), !dbg !17
  call void @"println <:Rational>"(%Rational %11), !dbg !17
  %12 = call %Rational @rational_from_c_string(ptr @8), !dbg !18
  %13 = call %Rational @rational_from_c_string(ptr @9), !dbg !19
  %14 = call %Rational @rational_star_rational(%Rational %12, %Rational %13), !dbg !19
  call void @"println <:Rational>"(%Rational %14), !dbg !19
  %15 = call %Rational @rational_from_c_string(ptr @10), !dbg !20
  %16 = call %Integer @integer_from_i64(i64 3), !dbg !21
  %17 = call %Integer @integer_from_i64(i64 2), !dbg !22
  %18 = call %Rational @integer_slash_integer(%Integer %16, %Integer %17), !dbg !22
  %19 = call %Rational @rational_slash_rational(%Rational %15, %Rational %18), !dbg !22
  call void @"println <:Rational>"(%Rational %19), !dbg !22
  %20 = call %Rational @rational_from_c_string(ptr @13), !dbg !23
  %21 = call %Rational @rational_from_c_string(ptr @14), !dbg !24
  %22 = call i1 @rational_eq_rational(%Rational %20, %Rational %21), !dbg !24
  call void @"println <:Bool>"(i1 %22), !dbg !24
  %23 = call %Rational @rational_from_c_string(ptr @15), !dbg !25
  %24 = call %Rational @rational_from_c_string(ptr @16), !dbg !26
  %25 = call i1 @"<:Rational> != <:Rational>"(%Rational %23, %Rational %24), !dbg !26
  call void @"println <:Bool>"(i1 %25), !dbg !26
  %26 = call %Rational @rational_from_c_string(ptr @17), !dbg !27
  %27 = call %Rational @rational_from_c_string(ptr @18), !dbg !28
  %28 = call i1 @rational_less_rational(%Rational %26, %Rational %27), !dbg !28
  call void @"println <:Bool>"(i1 %28), !dbg !28
  %29 = call %Rational @rational_from_c_string(ptr @19), !dbg !29
  %30 = call %Rational @rational_from_c_string(ptr @20), !dbg !30
  %31 = call i1 @"<:Rational> > <:Rational>"(%Rational %29, %Rational %30), !dbg !30
  call void @"println <:Bool>"(i1 %31), !dbg !30
  %32 = call %Rational @rational_from_c_string(ptr @21), !dbg !31
  %33 = call %Rational @rational_from_c_string(ptr @22), !dbg !32
  %34 = call i1 @"<:Rational> <= <:Rational>"(%Rational %32, %Rational %33), !dbg !32
  call void @"println <:Bool>"(i1 %34), !dbg !32
  %35 = call %Rational @rational_from_c_string(ptr @23), !dbg !33
  %36 = call %Rational @rational_from_c_string(ptr @24), !dbg !34
  %37 = call i1 @"<:Rational> <= <:Rational>"(%Rational %35, %Rational %36), !dbg !34
  call void @"println <:Bool>"(i1 %37), !dbg !34
  %38 = call %Rational @rational_from_c_string(ptr @25), !dbg !35
  %39 = call %Rational @rational_from_c_string(ptr @26), !dbg !36
  %40 = call i1 @"<:Rational> >= <:Rational>"(%Rational %38, %Rational %39), !dbg !36
  call void @"println <:Bool>"(i1 %40), !dbg !36
  %41 = call %Rational @rational_from_c_string(ptr @27), !dbg !37
  %42 = call %Rational @rational_from_c_string(ptr @28), !dbg !38
  %43 = call i1 @"<:Rational> >= <:Rational>"(%Rational %41, %Rational %42), !dbg !38
  call void @"println <:Bool>"(i1 %43), !dbg !38
  br label %return, !dbg !10

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Rational>"(%Rational %0) !dbg !39 {
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %2 = load %Rational, ptr %x, align 8, !dbg !40
  %3 = call %String @rational_as_string(%Rational %2), !dbg !40
  call void @"println <:String>"(%String %3), !dbg !40
  br label %return, !dbg !40

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @rational_as_string(%Rational)

declare %Rational @rational_from_c_string(ptr)

declare %Rational @"+ <:Rational>"(%Rational)

declare %Rational @minus_rational(%Rational)

declare %Rational @rational_plus_rational(%Rational, %Rational)

declare %Rational @"<:Rational> - <:Rational>"(%Rational, %Rational)

declare %Rational @rational_star_rational(%Rational, %Rational)

declare %Rational @rational_slash_rational(%Rational, %Rational)

declare %Rational @integer_slash_integer(%Integer, %Integer)

define private void @"println <:Bool>"(i1 %0) !dbg !41 {
  %x = alloca i1, align 1
  store i1 %0, ptr %x, align 1
  %2 = load i1, ptr %x, align 1, !dbg !42
  %3 = call %String @"String from <:Bool>"(i1 %2), !dbg !42
  call void @"println <:String>"(%String %3), !dbg !42
  br label %return, !dbg !42

return:                                           ; preds = %1
  ret void
}

define %String @"String from <:Bool>"(i1 %0) !dbg !43 {
  %return_value = alloca %String, align 8
  %x = alloca i1, align 1
  store i1 %0, ptr %x, align 1
  br label %if.condition, !dbg !44

if.condition:                                     ; preds = %1
  %2 = load i1, ptr %x, align 1, !dbg !44
  br i1 %2, label %if.body, label %5, !dbg !44

if.body:                                          ; preds = %if.condition
  %3 = call %String @string_from_c_string_and_length(ptr @11, i64 4), !dbg !44
  store %String %3, ptr %return_value, align 8, !dbg !44
  br label %return, !dbg !44

return:                                           ; preds = %5, %if.body
  %4 = load %String, ptr %return_value, align 8
  ret %String %4

5:                                                ; preds = %if.condition
  %6 = call %String @string_from_c_string_and_length(ptr @12, i64 5), !dbg !44
  store %String %6, ptr %return_value, align 8, !dbg !44
  br label %return, !dbg !44
}

declare i1 @rational_eq_rational(%Rational, %Rational)

define i1 @"<:Rational> != <:Rational>"(%Rational %0, %Rational %1) !dbg !45 {
  %return_value = alloca i1, align 1
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %y = alloca %Rational, align 8
  store %Rational %1, ptr %y, align 8
  %3 = load %Rational, ptr %x, align 8, !dbg !46
  %4 = load %Rational, ptr %y, align 8, !dbg !46
  %5 = call i1 @rational_eq_rational(%Rational %3, %Rational %4), !dbg !46
  %6 = call i1 @"not <:Bool>"(i1 %5), !dbg !46
  store i1 %6, ptr %return_value, align 1, !dbg !46
  br label %return, !dbg !46

return:                                           ; preds = %2
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare i1 @"not <:Bool>"(i1)

declare i1 @rational_less_rational(%Rational, %Rational)

define i1 @"<:Rational> > <:Rational>"(%Rational %0, %Rational %1) !dbg !47 {
  %return_value = alloca i1, align 1
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %y = alloca %Rational, align 8
  store %Rational %1, ptr %y, align 8
  %3 = load %Rational, ptr %y, align 8, !dbg !48
  %4 = load %Rational, ptr %x, align 8, !dbg !48
  %5 = call i1 @rational_less_rational(%Rational %3, %Rational %4), !dbg !48
  store i1 %5, ptr %return_value, align 1, !dbg !48
  br label %return, !dbg !48

return:                                           ; preds = %2
  %6 = load i1, ptr %return_value, align 1
  ret i1 %6
}

define i1 @"<:Rational> <= <:Rational>"(%Rational %0, %Rational %1) !dbg !49 {
  %return_value = alloca i1, align 1
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %y = alloca %Rational, align 8
  store %Rational %1, ptr %y, align 8
  %3 = load %Rational, ptr %x, align 8, !dbg !50
  %4 = load %Rational, ptr %y, align 8, !dbg !50
  %5 = call i1 @"<:Rational> > <:Rational>"(%Rational %3, %Rational %4), !dbg !50
  %6 = call i1 @"not <:Bool>"(i1 %5), !dbg !50
  store i1 %6, ptr %return_value, align 1, !dbg !50
  br label %return, !dbg !50

return:                                           ; preds = %2
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

define i1 @"<:Rational> >= <:Rational>"(%Rational %0, %Rational %1) !dbg !51 {
  %return_value = alloca i1, align 1
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %y = alloca %Rational, align 8
  store %Rational %1, ptr %y, align 8
  %3 = load %Rational, ptr %x, align 8, !dbg !52
  %4 = load %Rational, ptr %y, align 8, !dbg !52
  %5 = call i1 @rational_less_rational(%Rational %3, %Rational %4), !dbg !52
  %6 = call i1 @"not <:Bool>"(i1 %5), !dbg !52
  store i1 %6, ptr %return_value, align 1, !dbg !52
  br label %return, !dbg !52

return:                                           ; preds = %2
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "rational.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 14, column: 18, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "rational.execute", linkageName: "rational.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 14, column: 18, scope: !9)
!11 = !DILocation(line: 0, column: 8, scope: !9)
!12 = !DILocation(line: 1, column: 9, scope: !9)
!13 = !DILocation(line: 2, column: 9, scope: !9)
!14 = !DILocation(line: 3, column: 8, scope: !9)
!15 = !DILocation(line: 3, column: 14, scope: !9)
!16 = !DILocation(line: 4, column: 8, scope: !9)
!17 = !DILocation(line: 4, column: 14, scope: !9)
!18 = !DILocation(line: 5, column: 8, scope: !9)
!19 = !DILocation(line: 5, column: 14, scope: !9)
!20 = !DILocation(line: 6, column: 8, scope: !9)
!21 = !DILocation(line: 6, column: 15, scope: !9)
!22 = !DILocation(line: 6, column: 19, scope: !9)
!23 = !DILocation(line: 7, column: 8, scope: !9)
!24 = !DILocation(line: 7, column: 15, scope: !9)
!25 = !DILocation(line: 8, column: 8, scope: !9)
!26 = !DILocation(line: 8, column: 15, scope: !9)
!27 = !DILocation(line: 9, column: 8, scope: !9)
!28 = !DILocation(line: 9, column: 14, scope: !9)
!29 = !DILocation(line: 10, column: 8, scope: !9)
!30 = !DILocation(line: 10, column: 14, scope: !9)
!31 = !DILocation(line: 11, column: 8, scope: !9)
!32 = !DILocation(line: 11, column: 15, scope: !9)
!33 = !DILocation(line: 12, column: 8, scope: !9)
!34 = !DILocation(line: 12, column: 15, scope: !9)
!35 = !DILocation(line: 13, column: 8, scope: !9)
!36 = !DILocation(line: 13, column: 15, scope: !9)
!37 = !DILocation(line: 14, column: 8, scope: !9)
!38 = !DILocation(line: 14, column: 15, scope: !9)
!39 = distinct !DISubprogram(name: "println <:Rational>", linkageName: "println <:Rational>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!40 = !DILocation(line: 14, column: 18, scope: !39)
!41 = distinct !DISubprogram(name: "println <:Bool>", linkageName: "println <:Bool>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!42 = !DILocation(line: 14, column: 18, scope: !41)
!43 = distinct !DISubprogram(name: "String from <:Bool>", linkageName: "String from <:Bool>", scope: !41, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!44 = !DILocation(line: 14, column: 18, scope: !43)
!45 = distinct !DISubprogram(name: "<:Rational> != <:Rational>", linkageName: "<:Rational> != <:Rational>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!46 = !DILocation(line: 14, column: 18, scope: !45)
!47 = distinct !DISubprogram(name: "<:Rational> > <:Rational>", linkageName: "<:Rational> > <:Rational>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!48 = !DILocation(line: 14, column: 18, scope: !47)
!49 = distinct !DISubprogram(name: "<:Rational> <= <:Rational>", linkageName: "<:Rational> <= <:Rational>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!50 = !DILocation(line: 14, column: 18, scope: !49)
!51 = distinct !DISubprogram(name: "<:Rational> >= <:Rational>", linkageName: "<:Rational> >= <:Rational>", scope: !9, file: !2, line: 14, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!52 = !DILocation(line: 14, column: 18, scope: !51)
