---
source: src/semantics/tests/mod.rs
expression: err
---
Error: semantics::no_function

  × no operator `<:Rational> + <:Integer>`
   ╭─[candidate_not_viable.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─ ┬ ┬
   ·  │  │ ╰── <:Integer>
   ·  │  ╰── for this operator
   ·  ╰── <:Rational>
   ╰────

Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Integer` type, got `Rational`
      
      Error:   × Integer
          ╭─[ppl.ppl:88:5]
       87 │ @mangle_as("integer_plus_integer")
       88 │ fn <:Integer> + <:Integer> -> Integer
          ·     ▲
          ·     ╰── this has `Integer` type
       89 │
          ╰────
      Error:   × Rational
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Rational` type, got `Integer`
      
      Error:   × Rational
           ╭─[ppl.ppl:152:19]
       151 │ @mangle_as("rational_plus_rational")
       152 │ fn <:Rational> + <:Rational> -> Rational
           ·                   ▲
           ·                   ╰── this has `Rational` type
       153 │
           ╰────
      Error:   × Integer
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `String` type, got `Rational`
      
      Error:   × String
           ╭─[ppl.ppl:185:5]
       184 │ @mangle_as("string_plus_string")
       185 │ fn <:String> + <:String> -> String
           ·     ▲
           ·     ╰── this has `String` type
       186 │
           ╰────
      Error:   × Rational
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `MemoryAddress` type, got `Rational`
      
      Error:   × MemoryAddress
           ╭─[ppl.ppl:263:5]
       262 │ /// Get another memory address by adding offset to this one
       263 │ fn <address: MemoryAddress> + <offset: Integer> -> MemoryAddress:
           ·     ───┬───
           ·        ╰── this has `MemoryAddress` type
       264 │     let value = address.value + offset
           ╰────
      Error:   × Rational
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `I32` type, got `Rational`
      
      Error:   × I32
           ╭─[ppl.ppl:387:5]
       386 │ @mangle_as("i32_plus_i32")
       387 │ fn <:I32> + <:I32> -> I32
           ·     ▲
           ·     ╰── this has `I32` type
       388 │
           ╰────
      Error:   × Rational
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `F64` type, got `Rational`
      
      Error:   × F64
           ╭─[ppl.ppl:416:5]
       415 │ @mangle_as("f64_plus_f64")
       416 │ fn <:F64> + <:F64> -> F64
           ·     ▲
           ·     ╰── this has `F64` type
       417 │
           ╰────
      Error:   × Rational
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Self` type, got `Integer`
      
      Error:   × Self
      Error:   × Integer
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Self` type, got `Integer`
      
      Error:   × Self
      Error:   × Integer
