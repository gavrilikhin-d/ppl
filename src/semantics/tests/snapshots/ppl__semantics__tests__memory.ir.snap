---
source: src/semantics/tests/mod.rs
expression: ir
---
; ModuleID = 'memory'
source_filename = "memory.ppl"

%"Type<Integer>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%MemoryAddress = type { %Integer }

@"Type<Integer>" = global %"Type<Integer>" zeroinitializer
@0 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@address = global %MemoryAddress zeroinitializer
@x = global ptr null

define void @initialize() !dbg !3 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !7
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 7), !dbg !8
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !8
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !8
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !8
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define void @initialize.1() !dbg !9 {
  %1 = call %Integer @integer_from_i64(i64 1), !dbg !10
  %2 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !11
  %3 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %1, %"Type<Integer>" %2), !dbg !11
  store %MemoryAddress %3, ptr @address, align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !12 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %3 = load %Integer, ptr %n, align 8, !dbg !13
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !13
  %5 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !13
  %6 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %5), !dbg !13
  %7 = call %Integer @integer_star_integer(%Integer %4, %Integer %6), !dbg !13
  %8 = call %MemoryAddress @allocate_n_bytes(%Integer %7), !dbg !13
  store %MemoryAddress %8, ptr %return_value, align 8, !dbg !13
  br label %return, !dbg !13

return:                                           ; preds = %2
  %9 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %9
}

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %Integer @clone_integer(%Integer)

define %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !14 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !15
  %2 = load %Integer, ptr %size, align 8, !dbg !15
  store %Integer %2, ptr %return_value, align 8, !dbg !15
  br label %return, !dbg !15

return:                                           ; preds = %1
  %3 = load %Integer, ptr %return_value, align 8
  ret %Integer %3
}

define void @initialize.2() !dbg !16 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !17
  %2 = load %MemoryAddress, ptr @address, align 8, !dbg !18
  %3 = call ptr @read_memory(%"Type<Integer>" %1, %MemoryAddress %2), !dbg !18
  store ptr %3, ptr @x, align 8, !dbg !18
  br label %return, !dbg !18

return:                                           ; preds = %0
  ret void
}

declare ptr @read_memory(%"Type<Integer>", %MemoryAddress)

define void @memory.execute() !dbg !19 {
init_globals:
  call void @initialize(), !dbg !20
  call void @initialize.1(), !dbg !21
  call void @initialize.2(), !dbg !22
  br label %0, !dbg !22

0:                                                ; preds = %init_globals
  %1 = load ptr, ptr @x, align 8, !dbg !23
  %2 = call %Integer @integer_from_i64(i64 0), !dbg !24
  store %Integer %2, ptr %1, align 8, !dbg !24
  %3 = load ptr, ptr @x, align 8, !dbg !25
  %4 = load %Integer, ptr %3, align 8, !dbg !25
  call void @"println <:Integer>"(%Integer %4), !dbg !25
  %5 = load ptr, ptr @x, align 8, !dbg !26
  %6 = call %Integer @integer_from_i64(i64 1), !dbg !27
  store %Integer %6, ptr %5, align 8, !dbg !27
  %7 = load ptr, ptr @x, align 8, !dbg !28
  %8 = load %Integer, ptr %7, align 8, !dbg !28
  call void @"println <:Integer>"(%Integer %8), !dbg !28
  br label %return, !dbg !22

return:                                           ; preds = %0
  ret void
}

define void @"println <:Integer>"(%Integer %0) !dbg !29 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !30
  %3 = call %String @integer_as_string(%Integer %2), !dbg !30
  call void @"println <:String>"(%String %3), !dbg !30
  br label %return, !dbg !30

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @integer_as_string(%Integer)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "memory.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 25, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 23, scope: !9)
!11 = !DILocation(line: 0, column: 25, scope: !9)
!12 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !9, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 5, column: 9, scope: !12)
!14 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !12, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!15 = !DILocation(line: 5, column: 9, scope: !14)
!16 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!17 = !DILocation(line: 1, column: 8, scope: !16)
!18 = !DILocation(line: 1, column: 19, scope: !16)
!19 = distinct !DISubprogram(name: "memory.execute", linkageName: "memory.execute", scope: !2, file: !2, line: 2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!20 = !DILocation(line: 0, column: 25, scope: !19)
!21 = !DILocation(line: 0, column: 14, scope: !19)
!22 = !DILocation(line: 1, column: 8, scope: !19)
!23 = !DILocation(line: 2, scope: !19)
!24 = !DILocation(line: 2, column: 4, scope: !19)
!25 = !DILocation(line: 3, column: 8, scope: !19)
!26 = !DILocation(line: 4, scope: !19)
!27 = !DILocation(line: 4, column: 4, scope: !19)
!28 = !DILocation(line: 5, column: 8, scope: !19)
!29 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !19, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!30 = !DILocation(line: 5, column: 9, scope: !29)
