Error: semantics::no_function

  × no operator `<:Rational> + <:Integer>`
   ╭─[candidate_not_viable.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─ ┬ ┬
   ·  │  │ ╰── <:Integer>
   ·  │  ╰── for this operator
   ·  ╰── <:Rational>
   ╰────

Advice:   ☞ candidate is not viable: expected `Integer` type, got `Rational`

Error:   × Integer
    ╭─[ppl.ppl:87:5]
 86 │ @mangle_as("integer_plus_integer")
 87 │ fn <:Integer> + <:Integer> -> Integer
    ·     ▲
    ·     ╰── this has `Integer` type
 88 │ 
    ╰────
Error:   × Rational
   ╭─[candidate_not_viable.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─
   ·  ╰── this has `Rational` type
   ╰────
Advice:   ☞ candidate is not viable: expected `Rational` type, got `Integer`

Error:   × Rational
     ╭─[ppl.ppl:145:19]
 144 │ @mangle_as("rational_plus_rational")
 145 │ fn <:Rational> + <:Rational> -> Rational
     ·                   ▲
     ·                   ╰── this has `Rational` type
 146 │ 
     ╰────
Error:   × Integer
   ╭─[candidate_not_viable.ppl:1:7]
 1 │ 0.1 + 2
   ·       ┬
   ·       ╰── this has `Integer` type
   ╰────
Advice:   ☞ candidate is not viable: expected `String` type, got `Rational`

Error:   × String
     ╭─[ppl.ppl:172:5]
 171 │ @mangle_as("string_plus_string")
 172 │ fn <:String> + <:String> -> String
     ·     ▲
     ·     ╰── this has `String` type
 173 │ 
     ╰────
Error:   × Rational
   ╭─[candidate_not_viable.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─
   ·  ╰── this has `Rational` type
   ╰────
Advice:   ☞ candidate is not viable: expected `MemoryAddress` type, got `Rational`

Error:   × MemoryAddress
     ╭─[ppl.ppl:247:5]
 246 │ /// Get another memory address by adding offset to this one
 247 │ fn <address: MemoryAddress> + <offset: Integer> -> MemoryAddress:
     ·     ───┬───
     ·        ╰── this has `MemoryAddress` type
 248 │     let value = address.value + offset
     ╰────
Error:   × Rational
   ╭─[candidate_not_viable.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─
   ·  ╰── this has `Rational` type
   ╰────

