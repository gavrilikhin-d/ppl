---
source: src/tests/mod.rs
expression: hir
---
trait Foo:
	fn foo <$arg0: Reference<Self>> -> None


fn foo <$arg0: Reference<Integer>> -> None:
	let $tmp@59: String = "foo integer"
	let $tmp@51: None = `println <:Reference<String>>`((&$tmp@59:Reference<String>))
	`destroy <:ReferenceMut<String>>`(($tmp@59:String))
	return ($tmp@51:None)


fn<T: Foo> bar <x: Reference<T>> -> None:
	let $tmp@100: None = `foo <:Reference<T>>`((x:Reference<T>))
	return ($tmp@100:None)

let x: Integer = 0
`bar <:Reference<Integer>>`((&x:Reference<Integer>))
`destroy <:ReferenceMut<Integer>>`((x:Integer))

==MONOMORPHIZED==


fn foo <$arg0: Reference<Integer>> -> None:
	let $tmp@59: String = "foo integer"
	let $tmp@51: None = `println <:Reference<String>>`((&$tmp@59:Reference<String>))
	return ($tmp@51:None)



fn<Integer> bar <x: Reference<Integer>> -> None:
	let $tmp@100: None = `foo <:Reference<Integer>>`((x:Reference<Integer>))
	return ($tmp@100:None)
