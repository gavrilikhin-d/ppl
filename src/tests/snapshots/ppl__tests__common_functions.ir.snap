---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<MemoryAddress>" = type { %String, %Integer }
%"Type<I32>" = type { %String, %Integer }
%"Type<F64>" = type { %String, %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<MemoryAddress>" = private global %"Type<MemoryAddress>" zeroinitializer
@1 = private unnamed_addr constant [14 x i8] c"MemoryAddress\00", align 1
@"Type<I32>" = private global %"Type<I32>" zeroinitializer
@2 = private unnamed_addr constant [4 x i8] c"I32\00", align 1
@"Type<F64>" = private global %"Type<F64>" zeroinitializer
@3 = private unnamed_addr constant [4 x i8] c"F64\00", align 1
@4 = private unnamed_addr constant [4 x i8] c"foo\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<MemoryAddress>", align 8, !dbg !10
  %"Type<MemoryAddress>.name" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 13), !dbg !11
  store %String %2, ptr %"Type<MemoryAddress>.name", align 8, !dbg !11
  %"Type<MemoryAddress>.size" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<MemoryAddress>.size", align 8, !dbg !11
  %4 = load %"Type<MemoryAddress>", ptr %1, align 8, !dbg !11
  store %"Type<MemoryAddress>" %4, ptr @"Type<MemoryAddress>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define private void @initialize.2() !dbg !12 {
  %1 = alloca %"Type<I32>", align 8, !dbg !13
  %"Type<I32>.name" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 0, !dbg !13
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 3), !dbg !14
  store %String %2, ptr %"Type<I32>.name", align 8, !dbg !14
  %"Type<I32>.size" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 1, !dbg !14
  %3 = call %Integer @integer_from_i64(i64 4), !dbg !14
  store %Integer %3, ptr %"Type<I32>.size", align 8, !dbg !14
  %4 = load %"Type<I32>", ptr %1, align 8, !dbg !14
  store %"Type<I32>" %4, ptr @"Type<I32>", align 8, !dbg !14
  br label %return, !dbg !14

return:                                           ; preds = %0
  ret void
}

define private void @initialize.3() !dbg !15 {
  %1 = alloca %"Type<F64>", align 8, !dbg !16
  %"Type<F64>.name" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 0, !dbg !16
  %2 = call %String @string_from_c_string_and_length(ptr @3, i64 3), !dbg !17
  store %String %2, ptr %"Type<F64>.name", align 8, !dbg !17
  %"Type<F64>.size" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 1, !dbg !17
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !17
  store %Integer %3, ptr %"Type<F64>.size", align 8, !dbg !17
  %4 = load %"Type<F64>", ptr %1, align 8, !dbg !17
  store %"Type<F64>" %4, ptr @"Type<F64>", align 8, !dbg !17
  br label %return, !dbg !17

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !18 {
  call void @initialize(), !dbg !19
  call void @initialize.1(), !dbg !19
  call void @initialize.2(), !dbg !19
  call void @initialize.3(), !dbg !19
  call void @foo(), !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %0
  ret void
}

define void @foo() !dbg !21 {
  %1 = call %String @string_from_c_string_and_length(ptr @4, i64 3), !dbg !22
  %"$tmp@18" = alloca %String, align 8, !dbg !22
  store %String %1, ptr %"$tmp@18", align 8, !dbg !22
  call void @"println <:Reference<String>>"(ptr %"$tmp@18"), !dbg !22
  call void @destroy_string(ptr %"$tmp@18"), !dbg !22
  br label %return, !dbg !23

return:                                           ; preds = %0
  ret void
}

declare void @"println <:Reference<String>>"(ptr)

declare void @destroy_string(ptr)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 1, column: 5, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 1, column: 5, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 1, column: 5, scope: !12)
!14 = !DILocation(line: 0, scope: !12)
!15 = distinct !DISubprogram(name: "initialize.3", linkageName: "initialize.3", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!16 = !DILocation(line: 1, column: 5, scope: !15)
!17 = !DILocation(line: 0, scope: !15)
!18 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!19 = !DILocation(line: 1, column: 5, scope: !18)
!20 = !DILocation(line: 1, scope: !18)
!21 = distinct !DISubprogram(name: "foo", linkageName: "foo", scope: !18, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!22 = !DILocation(line: 0, column: 18, scope: !21)
!23 = !DILocation(line: 0, column: 10, scope: !21)
