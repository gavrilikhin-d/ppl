---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<Integer>" = type { ptr }
%Integer = type { ptr }
%"Type<Integer>Impl" = type { %String, %Integer }
%String = type { ptr }

@ty = global %"Type<Integer>" zeroinitializer
@0 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1

define void @main.execute() !dbg !3 {
  call void @initialize(), !dbg !7
  %1 = load %"Type<Integer>", ptr @ty, align 8, !dbg !8
  call void @"println <:Type<Integer>>"(%"Type<Integer>" %1), !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

define private void @initialize() !dbg !9 {
  %1 = call %Integer @integer_from_i64(i64 1), !dbg !10
  %2 = call %"Type<Integer>" @"type of <:Integer>"(%Integer %1), !dbg !10
  store %"Type<Integer>" %2, ptr @ty, align 8, !dbg !10
  br label %return, !dbg !10

return:                                           ; preds = %0
  ret void
}

define private %"Type<Integer>" @"type of <:Integer>"(%Integer %0) !dbg !11 {
  %return_value = alloca %"Type<Integer>", align 8
  %"$arg0" = alloca %Integer, align 8
  store %Integer %0, ptr %"$arg0", align 8
  %2 = alloca %"Type<Integer>", align 8, !dbg !12
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %2, i32 0, i32 0, !dbg !12
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !12
  %3 = call %String @string_from_c_string_and_length(ptr @0, i64 7), !dbg !13
  store %String %3, ptr %"Type<Integer>.name", align 8, !dbg !13
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !13
  %4 = call %Integer @integer_from_i64(i64 8), !dbg !13
  store %Integer %4, ptr %"Type<Integer>.size", align 8, !dbg !13
  %5 = load %"Type<Integer>", ptr %2, align 8, !dbg !13
  %"$tmp@4309" = alloca %"Type<Integer>", align 8, !dbg !13
  store %"Type<Integer>" %5, ptr %"$tmp@4309", align 8, !dbg !13
  %6 = load %"Type<Integer>", ptr %"$tmp@4309", align 8, !dbg !12
  store %"Type<Integer>" %6, ptr %return_value, align 8, !dbg !12
  br label %return, !dbg !12

return:                                           ; preds = %1
  %7 = load %"Type<Integer>", ptr %return_value, align 8
  ret %"Type<Integer>" %7
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @"println <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !14 {
  %x = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %x, align 8
  %2 = load %"Type<Integer>", ptr %x, align 8, !dbg !15
  %3 = call %String @"String from <:Type<Integer>>"(%"Type<Integer>" %2), !dbg !15
  call void @"println <:String>"(%String %3), !dbg !15
  br label %return, !dbg !15

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

define private %String @"String from <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !16 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !17
  %name = getelementptr inbounds %"Type<Integer>Impl", ptr %2, i32 0, i32 0, !dbg !17
  %3 = call %String @clone_string(ptr %name), !dbg !17
  %"$tmp@4184" = alloca %String, align 8, !dbg !17
  store %String %3, ptr %"$tmp@4184", align 8, !dbg !17
  %4 = load %String, ptr %"$tmp@4184", align 8, !dbg !17
  store %String %4, ptr %return_value, align 8, !dbg !17
  br label %return, !dbg !17

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

declare %String @clone_string(ptr)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 9, scope: !3)
!8 = !DILocation(line: 1, column: 8, scope: !3)
!9 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !3, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 19, scope: !9)
!11 = distinct !DISubprogram(name: "type of <:Integer>", linkageName: "type of <:Integer>", scope: !9, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!12 = !DILocation(line: 1, column: 10, scope: !11)
!13 = !DILocation(line: 0, scope: !11)
!14 = distinct !DISubprogram(name: "println <:Type<Integer>>", linkageName: "println <:Type<Integer>>", scope: !3, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!15 = !DILocation(line: 1, column: 10, scope: !14)
!16 = distinct !DISubprogram(name: "String from <:Type<Integer>>", linkageName: "String from <:Type<Integer>>", scope: !14, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!17 = !DILocation(line: 1, column: 10, scope: !16)
