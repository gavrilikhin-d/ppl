---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%Integer = type { ptr }
%String = type { ptr }
%"Point<Integer>" = type { ptr }
%"Point<Integer>Impl" = type { %Integer, %Integer }

@x = global %Integer zeroinitializer
@0 = private unnamed_addr constant [6 x i8] c"hello\00", align 1

define void @main.execute() !dbg !3 {
  call void @initialize(), !dbg !7
  %1 = call %Integer @clone_integer(ptr @x), !dbg !8
  %2 = call %Integer @integer_from_i64(i64 0), !dbg !9
  %3 = call i1 @integer_eq_integer(%Integer %1, %Integer %2), !dbg !9
  call void @"println <:Bool>"(i1 %3), !dbg !9
  %4 = call %Integer @integer_from_i64(i64 1), !dbg !10
  %5 = call %Integer @"id <:Integer>"(%Integer %4), !dbg !10
  %6 = call %Integer @integer_from_i64(i64 1), !dbg !11
  %7 = call i1 @integer_eq_integer(%Integer %5, %Integer %6), !dbg !11
  call void @"println <:Bool>"(i1 %7), !dbg !11
  %8 = call %String @string_from_c_string_and_length(ptr @0, i64 5), !dbg !12
  %9 = call %String @"id <:String>"(%String %8), !dbg !12
  call void @"println <:String>"(%String %9), !dbg !12
  %10 = alloca %"Point<Integer>", align 8, !dbg !13
  %"Point<Integer>.data" = getelementptr inbounds %"Point<Integer>", ptr %10, i32 0, i32 0, !dbg !13
  %"Point<Integer>.x" = getelementptr inbounds %"Point<Integer>Impl", ptr %"Point<Integer>.data", i32 0, i32 0, !dbg !13
  %11 = call %Integer @integer_from_i64(i64 0), !dbg !14
  store %Integer %11, ptr %"Point<Integer>.x", align 8, !dbg !14
  %"Point<Integer>.y" = getelementptr inbounds %"Point<Integer>Impl", ptr %"Point<Integer>.data", i32 0, i32 1, !dbg !14
  %12 = call %Integer @integer_from_i64(i64 0), !dbg !15
  store %Integer %12, ptr %"Point<Integer>.y", align 8, !dbg !15
  %13 = load %"Point<Integer>", ptr %10, align 8, !dbg !15
  %14 = call %"Point<Integer>" @"id <:Point<Integer>>"(%"Point<Integer>" %13), !dbg !15
  call void @destroy_integer(ptr @x), !dbg !16
  br label %return, !dbg !16

return:                                           ; preds = %0
  ret void
}

define private void @initialize() !dbg !17 {
  %1 = alloca %"Point<Integer>", align 8, !dbg !18
  %"Point<Integer>.data" = getelementptr inbounds %"Point<Integer>", ptr %1, i32 0, i32 0, !dbg !18
  %"Point<Integer>.x" = getelementptr inbounds %"Point<Integer>Impl", ptr %"Point<Integer>.data", i32 0, i32 0, !dbg !18
  %2 = call %Integer @integer_from_i64(i64 0), !dbg !19
  store %Integer %2, ptr %"Point<Integer>.x", align 8, !dbg !19
  %"Point<Integer>.y" = getelementptr inbounds %"Point<Integer>Impl", ptr %"Point<Integer>.data", i32 0, i32 1, !dbg !19
  %3 = call %Integer @integer_from_i64(i64 0), !dbg !20
  store %Integer %3, ptr %"Point<Integer>.y", align 8, !dbg !20
  %4 = load %"Point<Integer>", ptr %1, align 8, !dbg !20
  %5 = call %Integer @"x of <:Point<Integer>>"(%"Point<Integer>" %4), !dbg !20
  store %Integer %5, ptr @x, align 8, !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %0
  ret void
}

define private %Integer @"x of <:Point<Integer>>"(%"Point<Integer>" %0) !dbg !21 {
  %return_value = alloca %Integer, align 8
  %p = alloca %"Point<Integer>", align 8
  store %"Point<Integer>" %0, ptr %p, align 8
  %2 = getelementptr inbounds %"Point<Integer>", ptr %p, i32 0, i32 0, !dbg !22
  %x = getelementptr inbounds %"Point<Integer>Impl", ptr %2, i32 0, i32 0, !dbg !22
  %3 = load %Integer, ptr %x, align 8, !dbg !22
  store %Integer %3, ptr %return_value, align 8, !dbg !22
  br label %return, !dbg !22

return:                                           ; preds = %1
  %4 = load %Integer, ptr %return_value, align 8
  ret %Integer %4
}

declare %Integer @integer_from_i64(i64)

define private void @"println <:Bool>"(i1 %0) !dbg !23 {
  %x = alloca i1, align 1
  store i1 %0, ptr %x, align 1
  %2 = load i1, ptr %x, align 1, !dbg !24
  %3 = call %String @"String from <:Bool>"(i1 %2), !dbg !24
  call void @"println <:String>"(%String %3), !dbg !24
  br label %return, !dbg !25

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @"String from <:Bool>"(i1)

declare i1 @integer_eq_integer(%Integer, %Integer)

declare %Integer @clone_integer(ptr)

define private %Integer @"id <:Integer>"(%Integer %0) !dbg !26 {
  %return_value = alloca %Integer, align 8
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !27
  store %Integer %2, ptr %return_value, align 8, !dbg !27
  br label %return, !dbg !27

return:                                           ; preds = %1
  %3 = load %Integer, ptr %return_value, align 8
  ret %Integer %3
}

define private %String @"id <:String>"(%String %0) !dbg !28 {
  %return_value = alloca %String, align 8
  %x = alloca %String, align 8
  store %String %0, ptr %x, align 8
  %2 = load %String, ptr %x, align 8, !dbg !29
  store %String %2, ptr %return_value, align 8, !dbg !29
  br label %return, !dbg !29

return:                                           ; preds = %1
  %3 = load %String, ptr %return_value, align 8
  ret %String %3
}

declare %String @string_from_c_string_and_length(ptr, i64)

define private %"Point<Integer>" @"id <:Point<Integer>>"(%"Point<Integer>" %0) !dbg !30 {
  %return_value = alloca %"Point<Integer>", align 8
  %x = alloca %"Point<Integer>", align 8
  store %"Point<Integer>" %0, ptr %x, align 8
  %2 = load %"Point<Integer>", ptr %x, align 8, !dbg !31
  store %"Point<Integer>" %2, ptr %return_value, align 8, !dbg !31
  br label %return, !dbg !31

return:                                           ; preds = %1
  %3 = load %"Point<Integer>", ptr %return_value, align 8
  ret %"Point<Integer>" %3
}

declare void @destroy_integer(ptr)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 5, column: 8, scope: !3)
!8 = !DILocation(line: 6, column: 8, scope: !3)
!9 = !DILocation(line: 6, column: 13, scope: !3)
!10 = !DILocation(line: 10, column: 12, scope: !3)
!11 = !DILocation(line: 10, column: 18, scope: !3)
!12 = !DILocation(line: 11, column: 12, scope: !3)
!13 = !DILocation(line: 12, column: 3, scope: !3)
!14 = !DILocation(line: 12, column: 14, scope: !3)
!15 = !DILocation(line: 12, column: 20, scope: !3)
!16 = !DILocation(line: 5, scope: !3)
!17 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !3, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!18 = !DILocation(line: 5, column: 13, scope: !17)
!19 = !DILocation(line: 5, column: 24, scope: !17)
!20 = !DILocation(line: 5, column: 30, scope: !17)
!21 = distinct !DISubprogram(name: "x of <:Point<Integer>>", linkageName: "x of <:Point<Integer>>", scope: !17, file: !2, line: 3, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!22 = !DILocation(line: 3, column: 28, scope: !21)
!23 = distinct !DISubprogram(name: "println <:Bool>", linkageName: "println <:Bool>", scope: !3, file: !2, line: 11, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!24 = !DILocation(line: 13, scope: !23)
!25 = !DILocation(line: 12, column: 5, scope: !23)
!26 = distinct !DISubprogram(name: "id <:Integer>", linkageName: "id <:Integer>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 8, column: 19, scope: !26)
!28 = distinct !DISubprogram(name: "id <:String>", linkageName: "id <:String>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!29 = !DILocation(line: 8, column: 19, scope: !28)
!30 = distinct !DISubprogram(name: "id <:Point<Integer>>", linkageName: "id <:Point<Integer>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!31 = !DILocation(line: 8, column: 19, scope: !30)
