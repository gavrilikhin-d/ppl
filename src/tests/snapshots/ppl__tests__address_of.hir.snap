---
source: src/tests/mod.rs
expression: hir
---
let x: Integer = 0
`println <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)))
let address: MemoryAddress = `address of <:Reference<Integer>>`((&x:Reference<Integer>))
let x_mut_ref: ReferenceMut<Integer> = `<:Type<Integer>> at <:Reference<MemoryAddress>>`((Type<Integer>:Type<Integer>), (&address:Reference<MemoryAddress>))
(x_mut_ref:ReferenceMut<Integer>) = 1
`println <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)))
`destroy <:ReferenceMut<Integer>>`((x:Integer))

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("address_of")
fn<Integer> address of <ref: Reference<Integer>> -> MemoryAddress

@mangle_as("read_memory")
fn<Integer> <ty: Type<Integer>> at <address: Reference<MemoryAddress>> -> ReferenceMut<Integer>

@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)
