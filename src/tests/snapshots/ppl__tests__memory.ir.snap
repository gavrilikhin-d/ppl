---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<Integer>" = type { %String, %Integer }
%MemoryAddress = type { %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@1 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"$tmp0@23" = global %Integer zeroinitializer
@address = global %MemoryAddress zeroinitializer
@x = global ptr null

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !10
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 7), !dbg !11
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !11
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !11
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !11
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !12 {
  call void @initialize(), !dbg !13
  call void @initialize.1(), !dbg !14
  call void @initialize.2(), !dbg !15
  call void @initialize.3(), !dbg !16
  call void @initialize.4(), !dbg !17
  %1 = load ptr, ptr @x, align 8, !dbg !18
  %2 = call %Integer @integer_from_i64(i64 0), !dbg !19
  store %Integer %2, ptr %1, align 8, !dbg !19
  call void @initialize.5(), !dbg !20
  %3 = load ptr, ptr @x, align 8, !dbg !21
  %4 = call %Integer @integer_from_i64(i64 1), !dbg !22
  store %Integer %4, ptr %3, align 8, !dbg !22
  call void @initialize.6(), !dbg !23
  %5 = load %Integer, ptr @"$tmp0@23", align 8, !dbg !15
  call void @destroy_integer(%Integer %5), !dbg !15
  br label %return, !dbg !15

return:                                           ; preds = %0
  ret void
}

define private void @initialize.2() !dbg !24 {
  %1 = call %Integer @integer_from_i64(i64 1), !dbg !25
  store %Integer %1, ptr @"$tmp0@23", align 8, !dbg !25
  br label %return, !dbg !25

return:                                           ; preds = %0
  ret void
}

define private void @initialize.3() !dbg !26 {
  %1 = load %Integer, ptr @"$tmp0@23", align 8, !dbg !27
  %2 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !28
  %3 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %1, %"Type<Integer>" %2), !dbg !28
  store %MemoryAddress %3, ptr @address, align 8, !dbg !28
  br label %return, !dbg !28

return:                                           ; preds = %0
  ret void
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !29 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %3 = load %Integer, ptr %n, align 8, !dbg !30
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !30
  %"$tmp0@757" = alloca %Integer, align 8, !dbg !30
  store %Integer %4, ptr %"$tmp0@757", align 8, !dbg !30
  %5 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !30
  %"$tmp1@770" = alloca %"Type<Integer>", align 8, !dbg !30
  store %"Type<Integer>" %5, ptr %"$tmp1@770", align 8, !dbg !30
  %6 = load %"Type<Integer>", ptr %"$tmp1@770", align 8, !dbg !30
  %7 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %6), !dbg !30
  %"$tmp2@762" = alloca %Integer, align 8, !dbg !30
  store %Integer %7, ptr %"$tmp2@762", align 8, !dbg !30
  %8 = load %Integer, ptr %"$tmp0@757", align 8, !dbg !30
  %9 = load %Integer, ptr %"$tmp2@762", align 8, !dbg !30
  %10 = call %Integer @integer_star_integer(%Integer %8, %Integer %9), !dbg !30
  %"$tmp3@757" = alloca %Integer, align 8, !dbg !30
  store %Integer %10, ptr %"$tmp3@757", align 8, !dbg !30
  %11 = load %Integer, ptr %"$tmp3@757", align 8, !dbg !30
  %12 = call %MemoryAddress @allocate_n_bytes(%Integer %11), !dbg !30
  %"$tmp4@748" = alloca %MemoryAddress, align 8, !dbg !30
  store %MemoryAddress %12, ptr %"$tmp4@748", align 8, !dbg !30
  %13 = load %Integer, ptr %"$tmp0@757", align 8, !dbg !30
  call void @destroy_integer(%Integer %13), !dbg !30
  %14 = load %Integer, ptr %"$tmp2@762", align 8, !dbg !30
  call void @destroy_integer(%Integer %14), !dbg !30
  %15 = load %Integer, ptr %"$tmp3@757", align 8, !dbg !30
  call void @destroy_integer(%Integer %15), !dbg !30
  %16 = load %MemoryAddress, ptr %"$tmp4@748", align 8, !dbg !30
  store %MemoryAddress %16, ptr %return_value, align 8, !dbg !30
  br label %return, !dbg !30

return:                                           ; preds = %2
  %17 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %17
}

declare %Integer @clone_integer(%Integer)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !31 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !32
  %2 = load %Integer, ptr %size, align 8, !dbg !32
  store %Integer %2, ptr %return_value, align 8, !dbg !32
  br label %return, !dbg !32

return:                                           ; preds = %1
  %3 = load %Integer, ptr %return_value, align 8
  ret %Integer %3
}

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare void @destroy_integer(%Integer)

define private void @initialize.4() !dbg !33 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !34
  %2 = load %MemoryAddress, ptr @address, align 8, !dbg !35
  %3 = call ptr @read_memory(%"Type<Integer>" %1, %MemoryAddress %2), !dbg !35
  store ptr %3, ptr @x, align 8, !dbg !35
  br label %return, !dbg !35

return:                                           ; preds = %0
  ret void
}

declare ptr @read_memory(%"Type<Integer>", %MemoryAddress)

define private void @initialize.5() !dbg !36 {
  %1 = load ptr, ptr @x, align 8, !dbg !37
  %2 = load %Integer, ptr %1, align 8, !dbg !37
  call void @"println <:Integer>"(%Integer %2), !dbg !37
  br label %return, !dbg !37

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Integer>"(%Integer %0) !dbg !38 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !39
  %3 = call %String @integer_as_string(%Integer %2), !dbg !39
  %"$tmp0@4544" = alloca %String, align 8, !dbg !39
  store %String %3, ptr %"$tmp0@4544", align 8, !dbg !39
  %4 = load %String, ptr %"$tmp0@4544", align 8, !dbg !39
  call void @"println <:String>"(%String %4), !dbg !39
  %5 = load %String, ptr %"$tmp0@4544", align 8, !dbg !39
  call void @destroy_string(%String %5), !dbg !39
  br label %return, !dbg !39

return:                                           ; preds = %1
  ret void
}

declare %String @integer_as_string(%Integer)

declare void @"println <:String>"(%String)

declare void @destroy_string(%String)

define private void @initialize.6() !dbg !40 {
  %1 = load ptr, ptr @x, align 8, !dbg !41
  %2 = load %Integer, ptr %1, align 8, !dbg !41
  call void @"println <:Integer>"(%Integer %2), !dbg !41
  br label %return, !dbg !41

return:                                           ; preds = %0
  ret void
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 5, column: 9, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 25, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 5, column: 9, scope: !12)
!14 = !DILocation(line: 0, column: 25, scope: !12)
!15 = !DILocation(line: 0, column: 23, scope: !12)
!16 = !DILocation(line: 0, column: 14, scope: !12)
!17 = !DILocation(line: 1, column: 8, scope: !12)
!18 = !DILocation(line: 2, scope: !12)
!19 = !DILocation(line: 2, column: 4, scope: !12)
!20 = !DILocation(line: 3, scope: !12)
!21 = !DILocation(line: 4, scope: !12)
!22 = !DILocation(line: 4, column: 4, scope: !12)
!23 = !DILocation(line: 5, scope: !12)
!24 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !12, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 0, column: 23, scope: !24)
!26 = distinct !DISubprogram(name: "initialize.3", linkageName: "initialize.3", scope: !12, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 0, column: 23, scope: !26)
!28 = !DILocation(line: 0, column: 25, scope: !26)
!29 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !26, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!30 = !DILocation(line: 5, column: 9, scope: !29)
!31 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !29, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!32 = !DILocation(line: 5, column: 9, scope: !31)
!33 = distinct !DISubprogram(name: "initialize.4", linkageName: "initialize.4", scope: !12, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!34 = !DILocation(line: 1, column: 8, scope: !33)
!35 = !DILocation(line: 1, column: 19, scope: !33)
!36 = distinct !DISubprogram(name: "initialize.5", linkageName: "initialize.5", scope: !12, file: !2, line: 3, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!37 = !DILocation(line: 3, column: 8, scope: !36)
!38 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !36, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!39 = !DILocation(line: 5, column: 9, scope: !38)
!40 = distinct !DISubprogram(name: "initialize.6", linkageName: "initialize.6", scope: !12, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!41 = !DILocation(line: 5, column: 8, scope: !40)
