---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<Integer>" = type { %String, %Integer }
%MemoryAddress = type { %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@1 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !10
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 7), !dbg !11
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !11
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !11
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !11
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !12 {
init_globals:
  call void @initialize(), !dbg !13
  call void @initialize.1(), !dbg !14
  br label %0, !dbg !14

0:                                                ; preds = %init_globals
  %1 = call %Integer @integer_from_i64(i64 1), !dbg !15
  %"$tmp0@23" = alloca %Integer, align 8, !dbg !15
  store %Integer %1, ptr %"$tmp0@23", align 8, !dbg !15
  %2 = load %Integer, ptr %"$tmp0@23", align 8, !dbg !15
  %3 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !14
  %4 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %2, %"Type<Integer>" %3), !dbg !14
  %"$tmp1@14" = alloca %MemoryAddress, align 8, !dbg !14
  store %MemoryAddress %4, ptr %"$tmp1@14", align 8, !dbg !14
  %5 = load %MemoryAddress, ptr %"$tmp1@14", align 8, !dbg !16
  %address = alloca %MemoryAddress, align 8, !dbg !16
  store %MemoryAddress %5, ptr %address, align 8, !dbg !16
  %6 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !17
  %7 = load %MemoryAddress, ptr %address, align 8, !dbg !18
  %8 = call ptr @read_memory(%"Type<Integer>" %6, %MemoryAddress %7), !dbg !18
  %"$tmp0@41" = alloca ptr, align 8, !dbg !18
  store ptr %8, ptr %"$tmp0@41", align 8, !dbg !18
  %9 = load ptr, ptr %"$tmp0@41", align 8, !dbg !17
  %x = alloca ptr, align 8, !dbg !17
  store ptr %9, ptr %x, align 8, !dbg !17
  %10 = call %Integer @integer_from_i64(i64 0), !dbg !19
  %"$tmp0@64" = alloca %Integer, align 8, !dbg !19
  store %Integer %10, ptr %"$tmp0@64", align 8, !dbg !19
  %11 = load ptr, ptr %x, align 8, !dbg !20
  %12 = load %Integer, ptr %"$tmp0@64", align 8, !dbg !19
  store %Integer %12, ptr %11, align 8, !dbg !19
  %13 = load ptr, ptr %x, align 8, !dbg !21
  %14 = load %Integer, ptr %13, align 8, !dbg !21
  %"$tmp0@74" = alloca %Integer, align 8, !dbg !21
  store %Integer %14, ptr %"$tmp0@74", align 8, !dbg !21
  %15 = load %Integer, ptr %"$tmp0@74", align 8, !dbg !21
  call void @"println <:Integer>"(%Integer %15), !dbg !21
  %16 = call %Integer @integer_from_i64(i64 1), !dbg !22
  %"$tmp0@80" = alloca %Integer, align 8, !dbg !22
  store %Integer %16, ptr %"$tmp0@80", align 8, !dbg !22
  %17 = load ptr, ptr %x, align 8, !dbg !23
  %18 = load %Integer, ptr %"$tmp0@80", align 8, !dbg !22
  store %Integer %18, ptr %17, align 8, !dbg !22
  %19 = load ptr, ptr %x, align 8, !dbg !24
  %20 = load %Integer, ptr %19, align 8, !dbg !24
  %"$tmp0@90" = alloca %Integer, align 8, !dbg !24
  store %Integer %20, ptr %"$tmp0@90", align 8, !dbg !24
  %21 = load %Integer, ptr %"$tmp0@90", align 8, !dbg !24
  call void @"println <:Integer>"(%Integer %21), !dbg !24
  br label %return, !dbg !14

return:                                           ; preds = %0
  ret void
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !25 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
<<<<<<< HEAD
  %3 = load %Integer, ptr %n, align 8, !dbg !16
  call void @destroy_integer(%Integer %3), !dbg !16
  %4 = load %Integer, ptr %n, align 8, !dbg !16
  %5 = call %Integer @clone_integer(%Integer %4), !dbg !16
  %6 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !16
  %7 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %6), !dbg !16
  %8 = call %Integer @integer_star_integer(%Integer %5, %Integer %7), !dbg !16
  %9 = call %MemoryAddress @allocate_n_bytes(%Integer %8), !dbg !16
  store %MemoryAddress %9, ptr %return_value, align 8, !dbg !16
  br label %return, !dbg !16

return:                                           ; preds = %2
  %10 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %10
}

declare void @destroy_integer(%Integer)

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

=======
  %3 = load %Integer, ptr %n, align 8, !dbg !26
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !26
  %"$tmp0@757" = alloca %Integer, align 8, !dbg !26
  store %Integer %4, ptr %"$tmp0@757", align 8, !dbg !26
  %5 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !26
  %"$tmp1@770" = alloca %"Type<Integer>", align 8, !dbg !26
  store %"Type<Integer>" %5, ptr %"$tmp1@770", align 8, !dbg !26
  %6 = load %"Type<Integer>", ptr %"$tmp1@770", align 8, !dbg !26
  %7 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %6), !dbg !26
  %"$tmp2@762" = alloca %Integer, align 8, !dbg !26
  store %Integer %7, ptr %"$tmp2@762", align 8, !dbg !26
  %8 = load %Integer, ptr %"$tmp0@757", align 8, !dbg !26
  %9 = load %Integer, ptr %"$tmp2@762", align 8, !dbg !26
  %10 = call %Integer @integer_star_integer(%Integer %8, %Integer %9), !dbg !26
  %"$tmp3@757" = alloca %Integer, align 8, !dbg !26
  store %Integer %10, ptr %"$tmp3@757", align 8, !dbg !26
  %11 = load %Integer, ptr %"$tmp3@757", align 8, !dbg !26
  %12 = call %MemoryAddress @allocate_n_bytes(%Integer %11), !dbg !26
  %"$tmp4@748" = alloca %MemoryAddress, align 8, !dbg !26
  store %MemoryAddress %12, ptr %"$tmp4@748", align 8, !dbg !26
  %13 = load %MemoryAddress, ptr %"$tmp4@748", align 8, !dbg !26
  store %MemoryAddress %13, ptr %return_value, align 8, !dbg !26
  br label %return, !dbg !26

return:                                           ; preds = %2
  %14 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %14
}

>>>>>>> tmp
declare %Integer @clone_integer(%Integer)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !27 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !28
  %2 = load %Integer, ptr %size, align 8, !dbg !28
  store %Integer %2, ptr %return_value, align 8, !dbg !28
  br label %return, !dbg !28

return:                                           ; preds = %1
  %3 = load %Integer, ptr %return_value, align 8
  ret %Integer %3
}

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare ptr @read_memory(%"Type<Integer>", %MemoryAddress)

define private void @"println <:Integer>"(%Integer %0) !dbg !29 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !30
  %3 = call %String @integer_as_string(%Integer %2), !dbg !30
  %"$tmp0@4557" = alloca %String, align 8, !dbg !30
  store %String %3, ptr %"$tmp0@4557", align 8, !dbg !30
  %4 = load %String, ptr %"$tmp0@4557", align 8, !dbg !30
  call void @"println <:String>"(%String %4), !dbg !30
  br label %return, !dbg !30

return:                                           ; preds = %1
  ret void
}

declare %String @integer_as_string(%Integer)

declare void @"println <:String>"(%String)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 5, column: 9, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 25, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 5, column: 9, scope: !12)
!14 = !DILocation(line: 0, column: 25, scope: !12)
!15 = !DILocation(line: 0, column: 23, scope: !12)
!16 = !DILocation(line: 0, column: 14, scope: !12)
!17 = !DILocation(line: 1, column: 8, scope: !12)
!18 = !DILocation(line: 1, column: 19, scope: !12)
!19 = !DILocation(line: 2, column: 4, scope: !12)
!20 = !DILocation(line: 2, scope: !12)
!21 = !DILocation(line: 3, column: 8, scope: !12)
!22 = !DILocation(line: 4, column: 4, scope: !12)
!23 = !DILocation(line: 4, scope: !12)
!24 = !DILocation(line: 5, column: 8, scope: !12)
!25 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !12, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!26 = !DILocation(line: 5, column: 9, scope: !25)
!27 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !25, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!28 = !DILocation(line: 5, column: 9, scope: !27)
!29 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !12, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!30 = !DILocation(line: 5, column: 9, scope: !29)
