---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%MemoryAddress = type { ptr }
%Integer = type { ptr }
%"Type<Integer>" = type { ptr }
%"Type<Integer>Impl" = type { %String, %Integer }
%String = type { ptr }

@address = global %MemoryAddress zeroinitializer
@0 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@1 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@x = global ptr null
@2 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1

define void @main.execute() !dbg !3 {
  call void @initialize(), !dbg !7
  call void @initialize.1(), !dbg !8
  %1 = load ptr, ptr @x, align 8, !dbg !9
  %2 = call %Integer @integer_from_i64(i64 0), !dbg !10
  store %Integer %2, ptr %1, align 8, !dbg !10
  %3 = load ptr, ptr @x, align 8, !dbg !11
  %4 = call %Integer @clone_integer(ptr %3), !dbg !11
  call void @"println <:Integer>"(%Integer %4), !dbg !11
  %5 = load ptr, ptr @x, align 8, !dbg !12
  %6 = call %Integer @integer_from_i64(i64 1), !dbg !13
  store %Integer %6, ptr %5, align 8, !dbg !13
  %7 = load ptr, ptr @x, align 8, !dbg !14
  %8 = call %Integer @clone_integer(ptr %7), !dbg !14
  call void @"println <:Integer>"(%Integer %8), !dbg !14
  br label %return, !dbg !14

return:                                           ; preds = %0
  ret void
}

define private void @initialize() !dbg !15 {
  %1 = call %Integer @integer_from_i64(i64 1), !dbg !16
  %2 = alloca %"Type<Integer>", align 8, !dbg !17
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %2, i32 0, i32 0, !dbg !17
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !17
  %3 = call %String @string_from_c_string_and_length(ptr @1, i64 7), !dbg !18
  store %String %3, ptr %"Type<Integer>.name", align 8, !dbg !18
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !18
  %4 = call %Integer @integer_from_i64(i64 8), !dbg !18
  store %Integer %4, ptr %"Type<Integer>.size", align 8, !dbg !18
  %5 = load %"Type<Integer>", ptr %2, align 8, !dbg !18
  %6 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %1, %"Type<Integer>" %5), !dbg !18
  store %MemoryAddress %6, ptr @address, align 8, !dbg !18
  br label %return, !dbg !18

return:                                           ; preds = %0
  ret void
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !19 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %"$arg1" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %1, ptr %"$arg1", align 8
  %3 = call %Integer @clone_integer(ptr %n), !dbg !20
  %4 = alloca %"Type<Integer>", align 8, !dbg !20
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %4, i32 0, i32 0, !dbg !20
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !20
  %5 = call %String @string_from_c_string_and_length(ptr @0, i64 7), !dbg !21
  store %String %5, ptr %"Type<Integer>.name", align 8, !dbg !21
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !21
  %6 = call %Integer @integer_from_i64(i64 8), !dbg !21
  store %Integer %6, ptr %"Type<Integer>.size", align 8, !dbg !21
  %7 = load %"Type<Integer>", ptr %4, align 8, !dbg !21
  %8 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %7), !dbg !21
  %9 = call %Integer @integer_star_integer(%Integer %3, %Integer %8), !dbg !21
  %10 = call %MemoryAddress @allocate_n_bytes(%Integer %9), !dbg !21
  %"$tmp@760" = alloca %MemoryAddress, align 8, !dbg !21
  store %MemoryAddress %10, ptr %"$tmp@760", align 8, !dbg !21
  call void @destroy_integer(ptr %n), !dbg !20
  %11 = load %MemoryAddress, ptr %"$tmp@760", align 8, !dbg !20
  store %MemoryAddress %11, ptr %return_value, align 8, !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %2
  %12 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %12
}

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %Integer @clone_integer(ptr)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !22 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !23
  %size = getelementptr inbounds %"Type<Integer>Impl", ptr %2, i32 0, i32 1, !dbg !23
  %3 = call %Integer @clone_integer(ptr %size), !dbg !23
  %"$tmp@4426" = alloca %Integer, align 8, !dbg !23
  store %Integer %3, ptr %"$tmp@4426", align 8, !dbg !23
  %4 = load %Integer, ptr %"$tmp@4426", align 8, !dbg !23
  store %Integer %4, ptr %return_value, align 8, !dbg !23
  br label %return, !dbg !23

return:                                           ; preds = %1
  %5 = load %Integer, ptr %return_value, align 8
  ret %Integer %5
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

declare void @destroy_integer(ptr)

define private void @initialize.1() !dbg !24 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !25
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !25
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !25
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 7), !dbg !26
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !26
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !26
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !26
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !26
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !26
  %5 = call ptr @read_memory(%"Type<Integer>" %4, ptr @address), !dbg !27
  store ptr %5, ptr @x, align 8, !dbg !27
  br label %return, !dbg !27

return:                                           ; preds = %0
  ret void
}

declare ptr @read_memory(%"Type<Integer>", ptr)

define private void @"println <:Integer>"(%Integer %0) !dbg !28 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !29
  %3 = call %String @integer_as_string(%Integer %2), !dbg !29
  call void @"println <:String>"(%String %3), !dbg !29
  br label %return, !dbg !29

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @integer_as_string(%Integer)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 14, scope: !3)
!8 = !DILocation(line: 1, column: 8, scope: !3)
!9 = !DILocation(line: 2, scope: !3)
!10 = !DILocation(line: 2, column: 4, scope: !3)
!11 = !DILocation(line: 3, column: 8, scope: !3)
!12 = !DILocation(line: 4, scope: !3)
!13 = !DILocation(line: 4, column: 4, scope: !3)
!14 = !DILocation(line: 5, column: 8, scope: !3)
!15 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !3, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!16 = !DILocation(line: 0, column: 23, scope: !15)
!17 = !DILocation(line: 0, column: 25, scope: !15)
!18 = !DILocation(line: 0, scope: !15)
!19 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !15, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!20 = !DILocation(line: 5, column: 9, scope: !19)
!21 = !DILocation(line: 0, scope: !19)
!22 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !19, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!23 = !DILocation(line: 5, column: 9, scope: !22)
!24 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !3, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 1, column: 8, scope: !24)
!26 = !DILocation(line: 0, scope: !24)
!27 = !DILocation(line: 1, column: 19, scope: !24)
!28 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !3, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!29 = !DILocation(line: 5, column: 9, scope: !28)
