---
source: src/tests/mod.rs
expression: hir
---
let mut x: Integer = 1
let y: ReferenceMut<Integer> = reference to mutable (&x:ReferenceMut<Integer>)
println clone (*y:Integer)
(y:ReferenceMut<Integer>) = 2
println clone (*y:Integer)
println clone (x:Integer)
destroy (x:Integer)

==MONOMORPHIZED==


fn<Integer> reference to mutable <ref: ReferenceMut<Integer>> -> ReferenceMut<Integer>:
	let mut $tmp@4747: ReferenceMut<Integer> = (ref:ReferenceMut<Integer>)
	return ($tmp@4747:ReferenceMut<Integer>)


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = println String from (x:Integer)
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = println String from (x:Integer)
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = println String from (x:Integer)
	return ($tmp@176:None)
