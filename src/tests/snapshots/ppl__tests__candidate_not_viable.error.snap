---
source: src/tests/mod.rs
expression: err
---
Error: semantics::no_function

  × no operator `<:Rational> + <:Integer>`
   ╭─[main.ppl:1:1]
 1 │ 0.1 + 2
   · ─┬─ ┬ ┬
   ·  │  │ ╰── <:Integer>
   ·  │  ╰── for this operator
   ·  ╰── <:Rational>
   ╰────

Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Integer` type, got `Rational`
      
      Error:   × Integer
          ╭─[core.ppl:88:5]
       87 │ @mangle_as("integer_plus_integer")
       88 │ fn <:Integer> + <:Integer> -> Integer
          ·     ▲
          ·     ╰── this has `Integer` type
       89 │
          ╰────
      Error:   × Rational
         ╭─[main.ppl:1:1]
       1 │ 0.1 + 2
         · ─┬─
         ·  ╰── this has `Rational` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Rational` type, got `Integer`
      
      Error:   × Rational
           ╭─[core.ppl:143:19]
       142 │ @mangle_as("rational_plus_rational")
       143 │ fn <:Rational> + <:Rational> -> Rational
           ·                   ▲
           ·                   ╰── this has `Rational` type
       144 │
           ╰────
      Error:   × Integer
         ╭─[main.ppl:1:7]
       1 │ 0.1 + 2
         ·       ┬
         ·       ╰── this has `Integer` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `String` type, got `Rational`
      
      Error:   × String
           ╭─[core.ppl:176:5]
       175 │ @mangle_as("string_plus_string")
       176 │ fn <:String> + <:String> -> String
           ·     ▲
           ·     ╰── this has `String` type
       177 │
           ╰────
      Error:   × Rational
         ╭─[main.ppl:1:1]
       1 │ 0.1 + 2
         · ─┬─
         ·  ╰── this has `Rational` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `MemoryAddress` type, got `Rational`
      
      Error:   × MemoryAddress
          ╭─[memory.ppl:13:5]
       12 │ /// Get another memory address by adding offset to this one
       13 │ fn <address: MemoryAddress> + <offset: Integer> -> MemoryAddress:
          ·     ───┬───
          ·        ╰── this has `MemoryAddress` type
       14 │     let value = address.value + offset
          ╰────
      Error:   × Rational
         ╭─[main.ppl:1:1]
       1 │ 0.1 + 2
         · ─┬─
         ·  ╰── this has `Rational` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `I32` type, got `Rational`
      
      Error:   × I32
          ╭─[i32.ppl:12:5]
       11 │ @mangle_as("i32_plus_i32")
       12 │ fn <:I32> + <:I32> -> I32
          ·     ▲
          ·     ╰── this has `I32` type
       13 │
          ╰────
      Error:   × Rational
         ╭─[main.ppl:1:1]
       1 │ 0.1 + 2
         · ─┬─
         ·  ╰── this has `Rational` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `F64` type, got `Rational`
      
      Error:   × F64
          ╭─[f64.ppl:12:5]
       11 │ @mangle_as("f64_plus_f64")
       12 │ fn <:F64> + <:F64> -> F64
          ·     ▲
          ·     ╰── this has `F64` type
       13 │
          ╰────
      Error:   × Rational
         ╭─[main.ppl:1:1]
       1 │ 0.1 + 2
         · ─┬─
         ·  ╰── this has `Rational` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Self` type, got `Integer`
      
      Error:   × Self
         ╭─[math.ppl:8:16]
       7 │ trait Add:
       8 │     fn <:Self> + <:Self> -> Self
         ·                   ▲
         ·                   ╰── this has `Self` type
       9 │
         ╰────
      Error:   × Integer
         ╭─[main.ppl:1:7]
       1 │ 0.1 + 2
         ·       ┬
         ·       ╰── this has `Integer` type
         ╰────
      
Advice:   ☞ candidate is not viable
  ╰─▶ semantics::type_mismatch
      
        × expected `Self` type, got `Integer`
      
      Error:   × Self
         ╭─[math.ppl:8:16]
       7 │ trait Add:
       8 │     fn <:Self> + <:Self> -> Self
         ·                   ▲
         ·                   ╰── this has `Self` type
       9 │
         ╰────
      Error:   × Integer
         ╭─[main.ppl:1:7]
       1 │ 0.1 + 2
         ·       ┬
         ·       ╰── this has `Integer` type
         ╰────
