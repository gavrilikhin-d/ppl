---
source: src/tests/mod.rs
expression: hir
---
`println <:Rational>`(0.0)
let $tmp@21: Rational = 1.0
`println <:Rational>`(`clone <:Reference<Rational>>`((*`+ <:Reference<Rational>>`((&$tmp@21:Reference<Rational>)):Rational)))
`println <:Rational>`(`- <:Rational>`(2.0))
`println <:Rational>`(`<:Rational> + <:Rational>`(1.0, 2.0))
`println <:Rational>`(`<:Rational> - <:Rational>`(5.0, 1.0))
`println <:Rational>`(`<:Rational> * <:Rational>`(2.5, 2.0))
`println <:Rational>`(`<:Rational> / <:Rational>`(9.0, `<:Integer> / <:Integer>`(3, 2)))
`println <:Bool>`(`<:Rational> == <:Rational>`(0.0, 0.0))
`println <:Bool>`(`<:Rational> != <:Rational>`(1.0, 0.0))
`println <:Bool>`(`<:Rational> < <:Rational>`(0.0, 1.0))
`println <:Bool>`(`<:Rational> > <:Rational>`(1.0, 0.0))
`println <:Bool>`(`<:Rational> <= <:Rational>`(0.0, 0.0))
`println <:Bool>`(`<:Rational> <= <:Rational>`(0.0, 1.0))
`println <:Bool>`(`<:Rational> >= <:Rational>`(0.0, 0.0))
`println <:Bool>`(`<:Rational> >= <:Rational>`(1.0, 0.0))
`destroy <:ReferenceMut<Rational>>`(($tmp@21:Rational))

==MONOMORPHIZED==


@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_eq_rational")
fn <$arg0: Rational> == <$arg1: Rational> -> Bool

fn <x: Rational> != <y: Rational> -> Bool:
	let $tmp@719: Bool = `not <:Bool>`(`<:Rational> == <:Rational>`((copy x:Rational), (copy y:Rational)))
	return ($tmp@719:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_less_rational")
fn <$arg0: Rational> < <$arg1: Rational> -> Bool

fn <x: Rational> > <y: Rational> -> Bool:
	let $tmp@847: Bool = `<:Rational> < <:Rational>`((copy y:Rational), (copy x:Rational))
	return ($tmp@847:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_less_rational")
fn <$arg0: Rational> < <$arg1: Rational> -> Bool

fn <x: Rational> > <y: Rational> -> Bool:
	let $tmp@847: Bool = `<:Rational> < <:Rational>`((copy y:Rational), (copy x:Rational))
	return ($tmp@847:Bool)



fn <x: Rational> <= <y: Rational> -> Bool:
	let $tmp@883: Bool = `not <:Bool>`(`<:Rational> > <:Rational>`((copy x:Rational), (copy y:Rational)))
	return ($tmp@883:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_less_rational")
fn <$arg0: Rational> < <$arg1: Rational> -> Bool

fn <x: Rational> > <y: Rational> -> Bool:
	let $tmp@847: Bool = `<:Rational> < <:Rational>`((copy y:Rational), (copy x:Rational))
	return ($tmp@847:Bool)



fn <x: Rational> <= <y: Rational> -> Bool:
	let $tmp@883: Bool = `not <:Bool>`(`<:Rational> > <:Rational>`((copy x:Rational), (copy y:Rational)))
	return ($tmp@883:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_less_rational")
fn <$arg0: Rational> < <$arg1: Rational> -> Bool

fn <x: Rational> >= <y: Rational> -> Bool:
	let $tmp@925: Bool = `not <:Bool>`(`<:Rational> < <:Rational>`((copy x:Rational), (copy y:Rational)))
	return ($tmp@925:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_less_rational")
fn <$arg0: Rational> < <$arg1: Rational> -> Bool

fn <x: Rational> >= <y: Rational> -> Bool:
	let $tmp@925: Bool = `not <:Bool>`(`<:Rational> < <:Rational>`((copy x:Rational), (copy y:Rational)))
	return ($tmp@925:Bool)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@185: String = `String from <:Bool>`((copy x:Bool))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)
