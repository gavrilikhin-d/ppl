---
source: src/tests/mod.rs
expression: hir
---
let x: Integer = 1
let mut y: Integer = `clone <:Reference<Integer>>`((x:Integer))
`println <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)))
`println <:Integer>`(`clone <:Reference<Integer>>`((y:Integer)))
let $tmp@53: String = ""
`println <:Reference<String>>`((&$tmp@53:Reference<String>))
`destroy <:ReferenceMut<Integer>>`((y:Integer))
(y:Integer) = 2
`println <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)))
`println <:Integer>`(`clone <:Reference<Integer>>`((y:Integer)))
`destroy <:ReferenceMut<Integer>>`((x:Integer))
`destroy <:ReferenceMut<Integer>>`((y:Integer))
`destroy <:ReferenceMut<String>>`(($tmp@53:String))

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)
