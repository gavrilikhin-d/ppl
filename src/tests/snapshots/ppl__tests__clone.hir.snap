---
source: src/tests/mod.rs
expression: hir
---
let mut x: Integer = 1
let mut y: Integer = clone (x:Integer)
println clone (x:Integer)
println clone (y:Integer)
destroy (y:Integer)
(y:Integer) = 2
println clone (x:Integer)
println clone (y:Integer)
destroy (x:Integer)
destroy (y:Integer)

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <:Integer> -> String

fn<Integer> println <x: Integer> -> None:
	let $tmp@314: None = println String from (x:Integer)
	return ($tmp@314:None)


@mangle_as("integer_as_string")
fn String from <:Integer> -> String

fn<Integer> println <x: Integer> -> None:
	let $tmp@314: None = println String from (x:Integer)
	return ($tmp@314:None)


@mangle_as("integer_as_string")
fn String from <:Integer> -> String

fn<Integer> println <x: Integer> -> None:
	let $tmp@314: None = println String from (x:Integer)
	return ($tmp@314:None)


@mangle_as("integer_as_string")
fn String from <:Integer> -> String

fn<Integer> println <x: Integer> -> None:
	let $tmp@314: None = println String from (x:Integer)
	return ($tmp@314:None)
