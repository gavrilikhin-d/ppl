---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<Integer>" = type { %String, %Integer }
%"Array<Integer>" = type { %Integer, %Integer, %MemoryAddress }
%MemoryAddress = type { %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@1 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@arr = global %"Array<Integer>" zeroinitializer
@2 = private unnamed_addr constant [6 x i8] c"Empty\00", align 1
@3 = private unnamed_addr constant [10 x i8] c"Not empty\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !10
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 7), !dbg !11
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !11
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !11
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !11
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !12 {
  call void @initialize(), !dbg !13
  call void @initialize.1(), !dbg !14
  call void @initialize.2(), !dbg !14
  br label %if.condition, !dbg !15

if.condition:                                     ; preds = %0
  %1 = call i1 @"<:Reference<Array<Integer>>> is empty"(ptr @arr), !dbg !16
  br i1 %1, label %if.body, label %3, !dbg !16

if.body:                                          ; preds = %if.condition
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 5), !dbg !15
  call void @"println <:String>"(%String %2), !dbg !15
  br label %3, !dbg !15

return:                                           ; preds = %7
  ret void

3:                                                ; preds = %if.condition, %if.body
  %4 = call %Integer @integer_from_i64(i64 1), !dbg !17
  call void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %4, ptr @arr), !dbg !18
  br label %if.condition2, !dbg !19

if.condition2:                                    ; preds = %3
  %5 = call i1 @"<:Reference<Array<Integer>>> is not empty"(ptr @arr), !dbg !20
  br i1 %5, label %if.body1, label %7, !dbg !20

if.body1:                                         ; preds = %if.condition2
  %6 = call %String @string_from_c_string_and_length(ptr @3, i64 9), !dbg !19
  call void @"println <:String>"(%String %6), !dbg !19
  br label %7, !dbg !19

7:                                                ; preds = %if.condition2, %if.body1
  %8 = call %Integer @integer_from_i64(i64 0), !dbg !21
  %9 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr @arr, %Integer %8), !dbg !21
  %10 = load %Integer, ptr %9, align 8, !dbg !21
  call void @"println <:Integer>"(%Integer %10), !dbg !21
  br label %return, !dbg !21
}

define private void @initialize.2() !dbg !22 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !23
  %2 = call %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %1), !dbg !23
  store %"Array<Integer>" %2, ptr @arr, align 8, !dbg !23
  br label %return, !dbg !23

return:                                           ; preds = %0
  ret void
}

define private %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %0) !dbg !24 {
  %return_value = alloca %"Array<Integer>", align 8
  %"$arg0" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %"$arg0", align 8
  %2 = call %Integer @integer_from_i64(i64 8), !dbg !25
  %capacity = alloca %Integer, align 8, !dbg !25
  store %Integer %2, ptr %capacity, align 8, !dbg !25
  %3 = load %Integer, ptr %capacity, align 8, !dbg !25
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !25
  %5 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !25
  %6 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %4, %"Type<Integer>" %5), !dbg !25
  %data = alloca %MemoryAddress, align 8, !dbg !25
  store %MemoryAddress %6, ptr %data, align 8, !dbg !25
  %7 = alloca %"Array<Integer>", align 8, !dbg !25
  %"Array<Integer>.size" = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 0, !dbg !25
  %8 = call %Integer @integer_from_i64(i64 0), !dbg !25
  store %Integer %8, ptr %"Array<Integer>.size", align 8, !dbg !25
  %"Array<Integer>.capacity" = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 1, !dbg !25
  %9 = load %Integer, ptr %capacity, align 8, !dbg !25
  %10 = call %Integer @clone_integer(%Integer %9), !dbg !25
  store %Integer %10, ptr %"Array<Integer>.capacity", align 8, !dbg !25
  %"Array<Integer>.data" = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 2, !dbg !25
  %11 = load %MemoryAddress, ptr %data, align 8, !dbg !25
  store %MemoryAddress %11, ptr %"Array<Integer>.data", align 8, !dbg !25
  %12 = load %"Array<Integer>", ptr %7, align 8, !dbg !25
  %"$tmp@244" = alloca %"Array<Integer>", align 8, !dbg !25
  store %"Array<Integer>" %12, ptr %"$tmp@244", align 8, !dbg !25
  %13 = load %Integer, ptr %capacity, align 8, !dbg !25
  call void @destroy_integer(%Integer %13), !dbg !25
  %14 = load %"Array<Integer>", ptr %"$tmp@244", align 8, !dbg !25
  store %"Array<Integer>" %14, ptr %return_value, align 8, !dbg !25
  br label %return, !dbg !25

return:                                           ; preds = %1
  %15 = load %"Array<Integer>", ptr %return_value, align 8
  ret %"Array<Integer>" %15
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !26 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %"$arg1" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %1, ptr %"$arg1", align 8
  %3 = load %Integer, ptr %n, align 8, !dbg !27
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !27
  %5 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !27
  %6 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %5), !dbg !27
  %7 = call %Integer @integer_star_integer(%Integer %4, %Integer %6), !dbg !27
  %8 = call %MemoryAddress @allocate_n_bytes(%Integer %7), !dbg !27
  %"$tmp@760" = alloca %MemoryAddress, align 8, !dbg !27
  store %MemoryAddress %8, ptr %"$tmp@760", align 8, !dbg !27
  %9 = load %Integer, ptr %n, align 8, !dbg !27
  call void @destroy_integer(%Integer %9), !dbg !27
  %10 = load %MemoryAddress, ptr %"$tmp@760", align 8, !dbg !27
  store %MemoryAddress %10, ptr %return_value, align 8, !dbg !27
  br label %return, !dbg !27

return:                                           ; preds = %2
  %11 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %11
}

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %Integer @clone_integer(%Integer)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !28 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !29
  %2 = load %Integer, ptr %size, align 8, !dbg !29
  %3 = call %Integer @clone_integer(%Integer %2), !dbg !29
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !29
  %"$tmp@4381" = alloca %Integer, align 8, !dbg !29
  store %Integer %4, ptr %"$tmp@4381", align 8, !dbg !29
  %5 = load %Integer, ptr %"$tmp@4381", align 8, !dbg !29
  store %Integer %5, ptr %return_value, align 8, !dbg !29
  br label %return, !dbg !29

return:                                           ; preds = %1
  %6 = load %Integer, ptr %return_value, align 8
  ret %Integer %6
}

declare void @destroy_integer(%Integer)

declare void @"println <:String>"(%String)

define private i1 @"<:Reference<Array<Integer>>> is empty"(ptr %0) !dbg !30 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !31
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !31
  %3 = load %Integer, ptr %size, align 8, !dbg !31
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !31
  %5 = call %Integer @clone_integer(%Integer %4), !dbg !31
  %6 = call %Integer @integer_from_i64(i64 0), !dbg !31
  %7 = call i1 @integer_eq_integer(%Integer %5, %Integer %6), !dbg !31
  %"$tmp@1121" = alloca i1, align 1, !dbg !31
  store i1 %7, ptr %"$tmp@1121", align 1, !dbg !31
  %8 = load i1, ptr %"$tmp@1121", align 1, !dbg !31
  store i1 %8, ptr %return_value, align 1, !dbg !31
  br label %return, !dbg !31

return:                                           ; preds = %1
  %9 = load i1, ptr %return_value, align 1
  ret i1 %9
}

declare i1 @integer_eq_integer(%Integer, %Integer)

define private void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %0, ptr %1) !dbg !32 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %array = alloca ptr, align 8
  store ptr %1, ptr %array, align 8
  br label %if.condition, !dbg !33

if.condition:                                     ; preds = %2
  %3 = load ptr, ptr %array, align 8, !dbg !33
  %size4 = getelementptr inbounds %"Array<Integer>", ptr %3, i32 0, i32 0, !dbg !33
  %4 = load %Integer, ptr %size4, align 8, !dbg !33
  %5 = call %Integer @clone_integer(%Integer %4), !dbg !33
  %6 = call %Integer @clone_integer(%Integer %5), !dbg !33
  %7 = load ptr, ptr %array, align 8, !dbg !33
  %capacity5 = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 1, !dbg !33
  %8 = load %Integer, ptr %capacity5, align 8, !dbg !33
  %9 = call %Integer @clone_integer(%Integer %8), !dbg !33
  %10 = call %Integer @clone_integer(%Integer %9), !dbg !33
  %11 = call i1 @integer_eq_integer(%Integer %6, %Integer %10), !dbg !33
  br i1 %11, label %if.body, label %23, !dbg !33

if.body:                                          ; preds = %if.condition
  %12 = load ptr, ptr %array, align 8, !dbg !33
  %capacity = getelementptr inbounds %"Array<Integer>", ptr %12, i32 0, i32 1, !dbg !33
  %13 = load %Integer, ptr %capacity, align 8, !dbg !33
  %14 = call %Integer @clone_integer(%Integer %13), !dbg !33
  %15 = call %Integer @clone_integer(%Integer %14), !dbg !33
  %16 = call %Integer @integer_from_i64(i64 2), !dbg !33
  %17 = call %Integer @integer_star_integer(%Integer %15, %Integer %16), !dbg !33
  %new_capacity = alloca %Integer, align 8, !dbg !33
  store %Integer %17, ptr %new_capacity, align 8, !dbg !33
  %18 = load %Integer, ptr %new_capacity, align 8, !dbg !33
  %19 = call %Integer @clone_integer(%Integer %18), !dbg !33
  %20 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !33
  %21 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %19, %"Type<Integer>" %20), !dbg !33
  %new_data = alloca %MemoryAddress, align 8, !dbg !33
  store %MemoryAddress %21, ptr %new_data, align 8, !dbg !33
  %22 = call %Integer @integer_from_i64(i64 0), !dbg !33
  %i = alloca %Integer, align 8, !dbg !33
  store %Integer %22, ptr %i, align 8, !dbg !33
  br label %while.condition, !dbg !33

return:                                           ; preds = %23
  ret void

23:                                               ; preds = %if.condition, %70
  %24 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !33
  %25 = load ptr, ptr %array, align 8, !dbg !33
  %data6 = getelementptr inbounds %"Array<Integer>", ptr %25, i32 0, i32 2, !dbg !33
  %26 = load %MemoryAddress, ptr %data6, align 8, !dbg !33
  %27 = load ptr, ptr %array, align 8, !dbg !33
  %size7 = getelementptr inbounds %"Array<Integer>", ptr %27, i32 0, i32 0, !dbg !33
  %28 = load %Integer, ptr %size7, align 8, !dbg !33
  %29 = call %Integer @clone_integer(%Integer %28), !dbg !33
  %30 = call %Integer @clone_integer(%Integer %29), !dbg !33
  %31 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %26, %Integer %30), !dbg !33
  %32 = call ptr @read_memory(%"Type<Integer>" %24, %MemoryAddress %31), !dbg !33
  %value8 = alloca ptr, align 8, !dbg !33
  store ptr %32, ptr %value8, align 8, !dbg !33
  %33 = load ptr, ptr %value8, align 8, !dbg !33
  %34 = load %Integer, ptr %x, align 8, !dbg !33
  %35 = call %Integer @clone_integer(%Integer %34), !dbg !33
  store %Integer %35, ptr %33, align 8, !dbg !33
  %36 = load ptr, ptr %array, align 8, !dbg !33
  %size9 = getelementptr inbounds %"Array<Integer>", ptr %36, i32 0, i32 0, !dbg !33
  %37 = load %Integer, ptr %size9, align 8, !dbg !33
  %38 = call %Integer @clone_integer(%Integer %37), !dbg !33
  call void @destroy_integer(%Integer %38), !dbg !33
  %39 = load ptr, ptr %array, align 8, !dbg !33
  %size10 = getelementptr inbounds %"Array<Integer>", ptr %39, i32 0, i32 0, !dbg !33
  %40 = load ptr, ptr %array, align 8, !dbg !33
  %size11 = getelementptr inbounds %"Array<Integer>", ptr %40, i32 0, i32 0, !dbg !33
  %41 = load %Integer, ptr %size11, align 8, !dbg !33
  %42 = call %Integer @clone_integer(%Integer %41), !dbg !33
  %43 = call %Integer @clone_integer(%Integer %42), !dbg !33
  %44 = call %Integer @integer_from_i64(i64 1), !dbg !33
  %45 = call %Integer @integer_plus_integer(%Integer %43, %Integer %44), !dbg !33
  store %Integer %45, ptr %size10, align 8, !dbg !33
  br label %return, !dbg !33

while.condition:                                  ; preds = %while.body, %if.body
  %46 = load %Integer, ptr %i, align 8, !dbg !33
  %47 = call %Integer @clone_integer(%Integer %46), !dbg !33
  %48 = load ptr, ptr %array, align 8, !dbg !33
  %size = getelementptr inbounds %"Array<Integer>", ptr %48, i32 0, i32 0, !dbg !33
  %49 = load %Integer, ptr %size, align 8, !dbg !33
  %50 = call %Integer @clone_integer(%Integer %49), !dbg !33
  %51 = call %Integer @clone_integer(%Integer %50), !dbg !33
  %52 = call i1 @integer_less_integer(%Integer %47, %Integer %51), !dbg !33
  br i1 %52, label %while.body, label %70, !dbg !33

while.body:                                       ; preds = %while.condition
  %53 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !33
  %54 = load %MemoryAddress, ptr %new_data, align 8, !dbg !33
  %55 = load %Integer, ptr %i, align 8, !dbg !33
  %56 = call %Integer @clone_integer(%Integer %55), !dbg !33
  %57 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %54, %Integer %56), !dbg !33
  %58 = call ptr @read_memory(%"Type<Integer>" %53, %MemoryAddress %57), !dbg !33
  %value = alloca ptr, align 8, !dbg !33
  store ptr %58, ptr %value, align 8, !dbg !33
  %59 = load ptr, ptr %value, align 8, !dbg !33
  %60 = load %Integer, ptr %i, align 8, !dbg !33
  %61 = call %Integer @clone_integer(%Integer %60), !dbg !33
  %62 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %61), !dbg !33
  %63 = load %Integer, ptr %62, align 8, !dbg !33
  %64 = call %Integer @clone_integer(%Integer %63), !dbg !33
  store %Integer %64, ptr %59, align 8, !dbg !33
  %65 = load %Integer, ptr %i, align 8, !dbg !33
  call void @destroy_integer(%Integer %65), !dbg !33
  %66 = load %Integer, ptr %i, align 8, !dbg !33
  %67 = call %Integer @clone_integer(%Integer %66), !dbg !33
  %68 = call %Integer @integer_from_i64(i64 1), !dbg !33
  %69 = call %Integer @integer_plus_integer(%Integer %67, %Integer %68), !dbg !33
  store %Integer %69, ptr %i, align 8, !dbg !33
  br label %while.condition, !dbg !33

70:                                               ; preds = %while.condition
  %71 = load ptr, ptr %array, align 8, !dbg !33
  %data = getelementptr inbounds %"Array<Integer>", ptr %71, i32 0, i32 2, !dbg !33
  %72 = load %MemoryAddress, ptr %data, align 8, !dbg !33
  call void @free_memory(%MemoryAddress %72), !dbg !33
  %73 = load ptr, ptr %array, align 8, !dbg !33
  %data1 = getelementptr inbounds %"Array<Integer>", ptr %73, i32 0, i32 2, !dbg !33
  %74 = load %MemoryAddress, ptr %new_data, align 8, !dbg !33
  store %MemoryAddress %74, ptr %data1, align 8, !dbg !33
  %75 = load ptr, ptr %array, align 8, !dbg !33
  %capacity2 = getelementptr inbounds %"Array<Integer>", ptr %75, i32 0, i32 1, !dbg !33
  %76 = load %Integer, ptr %capacity2, align 8, !dbg !33
  %77 = call %Integer @clone_integer(%Integer %76), !dbg !33
  call void @destroy_integer(%Integer %77), !dbg !33
  %78 = load ptr, ptr %array, align 8, !dbg !33
  %capacity3 = getelementptr inbounds %"Array<Integer>", ptr %78, i32 0, i32 1, !dbg !33
  %79 = load %Integer, ptr %new_capacity, align 8, !dbg !33
  %80 = call %Integer @clone_integer(%Integer %79), !dbg !33
  store %Integer %80, ptr %capacity3, align 8, !dbg !33
  %81 = load %Integer, ptr %new_capacity, align 8, !dbg !33
  call void @destroy_integer(%Integer %81), !dbg !33
  %82 = load %Integer, ptr %i, align 8, !dbg !33
  call void @destroy_integer(%Integer %82), !dbg !33
  br label %23, !dbg !33
}

declare ptr @read_memory(%"Type<Integer>", %MemoryAddress)

declare %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress, %Integer)

define private ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %0, %Integer %1) !dbg !34 {
  %return_value = alloca ptr, align 8
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %i = alloca %Integer, align 8
  store %Integer %1, ptr %i, align 8
  %3 = load ptr, ptr %array, align 8, !dbg !35
  %data = getelementptr inbounds %"Array<Integer>", ptr %3, i32 0, i32 2, !dbg !35
  %4 = load %MemoryAddress, ptr %data, align 8, !dbg !35
  %5 = load %Integer, ptr %i, align 8, !dbg !35
  %6 = call %Integer @clone_integer(%Integer %5), !dbg !35
  %7 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !35
  %8 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %7), !dbg !35
  %9 = call %Integer @integer_star_integer(%Integer %6, %Integer %8), !dbg !35
  %10 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %4, %Integer %9), !dbg !35
  %address = alloca %MemoryAddress, align 8, !dbg !35
  store %MemoryAddress %10, ptr %address, align 8, !dbg !35
  %11 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !35
  %12 = load %MemoryAddress, ptr %address, align 8, !dbg !35
  %13 = call ptr @read_memory(%"Type<Integer>" %11, %MemoryAddress %12), !dbg !35
  %"$tmp@451" = alloca ptr, align 8, !dbg !35
  store ptr %13, ptr %"$tmp@451", align 8, !dbg !35
  %14 = load %Integer, ptr %i, align 8, !dbg !35
  call void @destroy_integer(%Integer %14), !dbg !35
  %15 = load ptr, ptr %"$tmp@451", align 8, !dbg !35
  store ptr %15, ptr %return_value, align 8, !dbg !35
  br label %return, !dbg !35

return:                                           ; preds = %2
  %16 = load ptr, ptr %return_value, align 8
  ret ptr %16
}

declare %Integer @integer_plus_integer(%Integer, %Integer)

declare i1 @integer_less_integer(%Integer, %Integer)

declare void @free_memory(%MemoryAddress)

define private i1 @"<:Reference<Array<Integer>>> is not empty"(ptr %0) !dbg !36 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !37
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !37
  %3 = load %Integer, ptr %size, align 8, !dbg !37
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !37
  %5 = call %Integer @clone_integer(%Integer %4), !dbg !37
  %6 = call %Integer @integer_from_i64(i64 0), !dbg !37
  %7 = call i1 @"<:Integer> > <:Integer>"(%Integer %5, %Integer %6), !dbg !37
  %"$tmp@1178" = alloca i1, align 1, !dbg !37
  store i1 %7, ptr %"$tmp@1178", align 1, !dbg !37
  %8 = load i1, ptr %"$tmp@1178", align 1, !dbg !37
  store i1 %8, ptr %return_value, align 1, !dbg !37
  br label %return, !dbg !37

return:                                           ; preds = %1
  %9 = load i1, ptr %return_value, align 1
  ret i1 %9
}

define i1 @"<:Integer> > <:Integer>"(%Integer %0, %Integer %1) !dbg !38 {
  %return_value = alloca i1, align 1
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %y = alloca %Integer, align 8
  store %Integer %1, ptr %y, align 8
  %3 = load %Integer, ptr %y, align 8, !dbg !39
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !39
  %5 = load %Integer, ptr %x, align 8, !dbg !39
  %6 = call %Integer @clone_integer(%Integer %5), !dbg !39
  %7 = call i1 @integer_less_integer(%Integer %4, %Integer %6), !dbg !39
  %"$tmp@1032" = alloca i1, align 1, !dbg !39
  store i1 %7, ptr %"$tmp@1032", align 1, !dbg !39
  %8 = load i1, ptr %"$tmp@1032", align 1, !dbg !39
  store i1 %8, ptr %return_value, align 1, !dbg !39
  br label %return, !dbg !39

return:                                           ; preds = %2
  %9 = load i1, ptr %return_value, align 1
  ret i1 %9
}

define private void @"println <:Integer>"(%Integer %0) !dbg !40 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !41
  %3 = call %Integer @clone_integer(%Integer %2), !dbg !41
  %4 = call %String @integer_as_string(%Integer %3), !dbg !41
  call void @"println <:String>"(%String %4), !dbg !41
  br label %return, !dbg !41

return:                                           ; preds = %1
  ret void
}

declare %String @integer_as_string(%Integer)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 6, column: 14, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 14, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 6, column: 14, scope: !12)
!14 = !DILocation(line: 0, column: 14, scope: !12)
!15 = !DILocation(line: 2, column: 9, scope: !12)
!16 = !DILocation(line: 1, column: 3, scope: !12)
!17 = !DILocation(line: 3, column: 5, scope: !12)
!18 = !DILocation(line: 3, column: 10, scope: !12)
!19 = !DILocation(line: 5, column: 9, scope: !12)
!20 = !DILocation(line: 4, column: 3, scope: !12)
!21 = !DILocation(line: 6, column: 12, scope: !12)
!22 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !12, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!23 = !DILocation(line: 0, column: 14, scope: !22)
!24 = distinct !DISubprogram(name: "<:Type<Integer>> [ ]", linkageName: "<:Type<Integer>> [ ]", scope: !22, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 6, column: 14, scope: !24)
!26 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !24, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 6, column: 14, scope: !26)
!28 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !26, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!29 = !DILocation(line: 6, column: 14, scope: !28)
!30 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is empty", linkageName: "<:Reference<Array<Integer>>> is empty", scope: !12, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!31 = !DILocation(line: 6, column: 14, scope: !30)
!32 = distinct !DISubprogram(name: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", linkageName: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", scope: !12, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!33 = !DILocation(line: 6, column: 14, scope: !32)
!34 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> [ <:Integer> ]", linkageName: "<:Reference<Array<Integer>>> [ <:Integer> ]", scope: !32, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!35 = !DILocation(line: 6, column: 14, scope: !34)
!36 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is not empty", linkageName: "<:Reference<Array<Integer>>> is not empty", scope: !12, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!37 = !DILocation(line: 6, column: 14, scope: !36)
!38 = distinct !DISubprogram(name: "<:Integer> > <:Integer>", linkageName: "<:Integer> > <:Integer>", scope: !36, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!39 = !DILocation(line: 6, column: 14, scope: !38)
!40 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !12, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!41 = !DILocation(line: 6, column: 14, scope: !40)
