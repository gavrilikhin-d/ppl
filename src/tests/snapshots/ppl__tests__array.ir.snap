---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<Integer>" = type { %String, %Integer }
%"Array<Integer>" = type { %Integer, %Integer, %MemoryAddress }
%MemoryAddress = type { %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@1 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@arr = global %"Array<Integer>" zeroinitializer
@2 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@3 = private unnamed_addr constant [3 x i8] c", \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@5 = private unnamed_addr constant [6 x i8] c"Empty\00", align 1
@6 = private unnamed_addr constant [10 x i8] c"Not empty\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !10
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 7), !dbg !11
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !11
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !11
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !11
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !12 {
  call void @initialize(), !dbg !13
  call void @initialize.1(), !dbg !14
  call void @initialize.2(), !dbg !14
  %1 = load %"Array<Integer>", ptr @arr, align 8, !dbg !15
  call void @"println <:Array<Integer>>"(%"Array<Integer>" %1), !dbg !15
  br label %if.condition, !dbg !16

if.condition:                                     ; preds = %0
  %2 = call i1 @"<:Reference<Array<Integer>>> is empty"(ptr @arr), !dbg !17
  br i1 %2, label %if.body, label %4, !dbg !17

if.body:                                          ; preds = %if.condition
  %3 = call %String @string_from_c_string_and_length(ptr @5, i64 5), !dbg !16
  call void @"println <:String>"(%String %3), !dbg !16
  br label %4, !dbg !16

return:                                           ; preds = %9
  ret void

4:                                                ; preds = %if.condition, %if.body
  %5 = call %Integer @integer_from_i64(i64 1), !dbg !18
  call void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %5, ptr @arr), !dbg !19
  %6 = load %"Array<Integer>", ptr @arr, align 8, !dbg !20
  call void @"println <:Array<Integer>>"(%"Array<Integer>" %6), !dbg !20
  br label %if.condition2, !dbg !21

if.condition2:                                    ; preds = %4
  %7 = call i1 @"<:Reference<Array<Integer>>> is not empty"(ptr @arr), !dbg !22
  br i1 %7, label %if.body1, label %9, !dbg !22

if.body1:                                         ; preds = %if.condition2
  %8 = call %String @string_from_c_string_and_length(ptr @6, i64 9), !dbg !21
  call void @"println <:String>"(%String %8), !dbg !21
  br label %9, !dbg !21

9:                                                ; preds = %if.condition2, %if.body1
  %10 = call %Integer @integer_from_i64(i64 0), !dbg !23
  %11 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr @arr, %Integer %10), !dbg !23
  %12 = call %Integer @clone_integer(ptr %11), !dbg !23
  call void @"println <:Integer>"(%Integer %12), !dbg !23
  br label %return, !dbg !23
}

define private void @initialize.2() !dbg !24 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !25
  %2 = call %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %1), !dbg !25
  store %"Array<Integer>" %2, ptr @arr, align 8, !dbg !25
  br label %return, !dbg !25

return:                                           ; preds = %0
  ret void
}

define private %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %0) !dbg !26 {
  %return_value = alloca %"Array<Integer>", align 8
  %"$arg0" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %"$arg0", align 8
  %2 = call %Integer @integer_from_i64(i64 8), !dbg !27
  %capacity = alloca %Integer, align 8, !dbg !27
  store %Integer %2, ptr %capacity, align 8, !dbg !27
  %3 = call %Integer @clone_integer(ptr %capacity), !dbg !28
  %4 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !29
  %5 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %3, %"Type<Integer>" %4), !dbg !29
  %data = alloca %MemoryAddress, align 8, !dbg !29
  store %MemoryAddress %5, ptr %data, align 8, !dbg !29
  %6 = alloca %"Array<Integer>", align 8, !dbg !29
  %"Array<Integer>.size" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 0, !dbg !29
  %7 = call %Integer @integer_from_i64(i64 0), !dbg !29
  store %Integer %7, ptr %"Array<Integer>.size", align 8, !dbg !29
  %"Array<Integer>.capacity" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 1, !dbg !29
  %8 = call %Integer @clone_integer(ptr %capacity), !dbg !29
  store %Integer %8, ptr %"Array<Integer>.capacity", align 8, !dbg !29
  %"Array<Integer>.data" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 2, !dbg !29
  %9 = load %MemoryAddress, ptr %data, align 8, !dbg !29
  store %MemoryAddress %9, ptr %"Array<Integer>.data", align 8, !dbg !29
  %10 = load %"Array<Integer>", ptr %6, align 8, !dbg !29
  %"$tmp@260" = alloca %"Array<Integer>", align 8, !dbg !29
  store %"Array<Integer>" %10, ptr %"$tmp@260", align 8, !dbg !29
  call void @destroy_integer(ptr %capacity), !dbg !30
  %11 = load %"Array<Integer>", ptr %"$tmp@260", align 8, !dbg !29
  store %"Array<Integer>" %11, ptr %return_value, align 8, !dbg !29
  br label %return, !dbg !29

return:                                           ; preds = %1
  %12 = load %"Array<Integer>", ptr %return_value, align 8
  ret %"Array<Integer>" %12
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !31 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %"$arg1" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %1, ptr %"$arg1", align 8
  %3 = call %Integer @clone_integer(ptr %n), !dbg !32
  %4 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !32
  %5 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %4), !dbg !32
  %6 = call %Integer @integer_star_integer(%Integer %3, %Integer %5), !dbg !32
  %7 = call %MemoryAddress @allocate_n_bytes(%Integer %6), !dbg !32
  %"$tmp@760" = alloca %MemoryAddress, align 8, !dbg !32
  store %MemoryAddress %7, ptr %"$tmp@760", align 8, !dbg !32
  call void @destroy_integer(ptr %n), !dbg !32
  %8 = load %MemoryAddress, ptr %"$tmp@760", align 8, !dbg !32
  store %MemoryAddress %8, ptr %return_value, align 8, !dbg !32
  br label %return, !dbg !32

return:                                           ; preds = %2
  %9 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %9
}

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %Integer @clone_integer(ptr)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !33 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !34
  %2 = call %Integer @clone_integer(ptr %size), !dbg !34
  %"$tmp@4399" = alloca %Integer, align 8, !dbg !34
  store %Integer %2, ptr %"$tmp@4399", align 8, !dbg !34
  %3 = load %Integer, ptr %"$tmp@4399", align 8, !dbg !34
  store %Integer %3, ptr %return_value, align 8, !dbg !34
  br label %return, !dbg !34

return:                                           ; preds = %1
  %4 = load %Integer, ptr %return_value, align 8
  ret %Integer %4
}

declare void @destroy_integer(ptr)

define private void @"println <:Array<Integer>>"(%"Array<Integer>" %0) !dbg !35 {
  %x = alloca %"Array<Integer>", align 8
  store %"Array<Integer>" %0, ptr %x, align 8
  %2 = load %"Array<Integer>", ptr %x, align 8, !dbg !36
  %3 = call %String @"String from <:Array<Integer>>"(%"Array<Integer>" %2), !dbg !36
  call void @"println <:String>"(%String %3), !dbg !36
  br label %return, !dbg !37

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

define private %String @"String from <:Array<Integer>>"(%"Array<Integer>" %0) !dbg !38 {
  %return_value = alloca %String, align 8
  %array = alloca %"Array<Integer>", align 8
  store %"Array<Integer>" %0, ptr %array, align 8
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 1), !dbg !39
  %str = alloca %String, align 8, !dbg !39
  store %String %2, ptr %str, align 8, !dbg !39
  br label %if.condition, !dbg !39

if.condition:                                     ; preds = %1
  %3 = call i1 @"<:Reference<Array<Integer>>> is not empty"(ptr %array), !dbg !39
  br i1 %3, label %if.body, label %10, !dbg !39

if.body:                                          ; preds = %if.condition
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !39
  %5 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %4), !dbg !39
  %6 = load %Integer, ptr %5, align 8, !dbg !39
  %7 = call %String @integer_as_string(%Integer %6), !dbg !39
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %7), !dbg !39
  %8 = call %Integer @integer_from_i64(i64 1), !dbg !39
  %i = alloca %Integer, align 8, !dbg !39
  store %Integer %8, ptr %i, align 8, !dbg !39
  br label %while.condition, !dbg !39

return:                                           ; preds = %10
  %9 = load %String, ptr %return_value, align 8
  ret %String %9

10:                                               ; preds = %if.condition, %23
  %11 = call %String @string_from_c_string_and_length(ptr @4, i64 1), !dbg !39
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %11), !dbg !39
  %12 = call %String @clone_string(ptr %str), !dbg !39
  %"$tmp@1485" = alloca %String, align 8, !dbg !39
  store %String %12, ptr %"$tmp@1485", align 8, !dbg !39
  call void @destroy_string(ptr %str), !dbg !39
  %13 = load %String, ptr %"$tmp@1485", align 8, !dbg !39
  store %String %13, ptr %return_value, align 8, !dbg !39
  br label %return, !dbg !39

while.condition:                                  ; preds = %while.body, %if.body
  %14 = call %Integer @clone_integer(ptr %i), !dbg !39
  %size = getelementptr inbounds %"Array<Integer>", ptr %array, i32 0, i32 0, !dbg !39
  %15 = call %Integer @clone_integer(ptr %size), !dbg !39
  %16 = call i1 @integer_less_integer(%Integer %14, %Integer %15), !dbg !39
  br i1 %16, label %while.body, label %23, !dbg !39

while.body:                                       ; preds = %while.condition
  %17 = call %String @string_from_c_string_and_length(ptr @3, i64 2), !dbg !39
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %17), !dbg !39
  %18 = call %Integer @clone_integer(ptr %i), !dbg !39
  %19 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %18), !dbg !39
  %20 = load %Integer, ptr %19, align 8, !dbg !39
  %21 = call %String @integer_as_string(%Integer %20), !dbg !39
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %21), !dbg !39
  %22 = call %Integer @integer_from_i64(i64 1), !dbg !39
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %i, %Integer %22), !dbg !39
  br label %while.condition, !dbg !39

23:                                               ; preds = %while.condition
  call void @destroy_integer(ptr %i), !dbg !39
  br label %10, !dbg !39
}

define private void @"<:ReferenceMut<String>> += <:String>"(ptr %0, %String %1) !dbg !40 {
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %String, align 8
  store %String %1, ptr %other, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !41
  %4 = load ptr, ptr %self, align 8, !dbg !42
  %5 = load %String, ptr %4, align 8, !dbg !42
  %6 = load %String, ptr %other, align 8, !dbg !43
  %7 = call %String @string_plus_string(%String %5, %String %6), !dbg !43
  store %String %7, ptr %3, align 8, !dbg !43
  br label %return, !dbg !43

return:                                           ; preds = %2
  ret void
}

declare %String @string_plus_string(%String, %String)

declare %String @integer_as_string(%Integer)

define private ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %0, %Integer %1) !dbg !44 {
  %return_value = alloca ptr, align 8
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %i = alloca %Integer, align 8
  store %Integer %1, ptr %i, align 8
  %3 = load ptr, ptr %array, align 8, !dbg !45
  %data = getelementptr inbounds %"Array<Integer>", ptr %3, i32 0, i32 2, !dbg !45
  %4 = load %MemoryAddress, ptr %data, align 8, !dbg !45
  %5 = load %Integer, ptr %i, align 8, !dbg !45
  %6 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !45
  %7 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %6), !dbg !45
  %8 = call %Integer @integer_star_integer(%Integer %5, %Integer %7), !dbg !45
  %9 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %4, %Integer %8), !dbg !45
  %address = alloca %MemoryAddress, align 8, !dbg !45
  store %MemoryAddress %9, ptr %address, align 8, !dbg !45
  %10 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !45
  %11 = load %MemoryAddress, ptr %address, align 8, !dbg !45
  %12 = call ptr @read_memory(%"Type<Integer>" %10, %MemoryAddress %11), !dbg !45
  store ptr %12, ptr %return_value, align 8, !dbg !45
  br label %return, !dbg !45

return:                                           ; preds = %2
  %13 = load ptr, ptr %return_value, align 8
  ret ptr %13
}

declare %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress, %Integer)

declare ptr @read_memory(%"Type<Integer>", %MemoryAddress)

define private void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %0, %Integer %1) !dbg !46 {
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %Integer, align 8
  store %Integer %1, ptr %other, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !47
  %4 = load ptr, ptr %self, align 8, !dbg !48
  %5 = load %Integer, ptr %4, align 8, !dbg !48
  %6 = load %Integer, ptr %other, align 8, !dbg !49
  %7 = call %Integer @integer_plus_integer(%Integer %5, %Integer %6), !dbg !49
  store %Integer %7, ptr %3, align 8, !dbg !49
  br label %return, !dbg !49

return:                                           ; preds = %2
  ret void
}

declare %Integer @integer_plus_integer(%Integer, %Integer)

declare i1 @integer_less_integer(%Integer, %Integer)

define private i1 @"<:Reference<Array<Integer>>> is not empty"(ptr %0) !dbg !50 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !51
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !51
  %3 = load %Integer, ptr %size, align 8, !dbg !51
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !51
  %5 = call i1 @"<:Integer> > <:Integer>"(%Integer %3, %Integer %4), !dbg !51
  store i1 %5, ptr %return_value, align 1, !dbg !51
  br label %return, !dbg !51

return:                                           ; preds = %1
  %6 = load i1, ptr %return_value, align 1
  ret i1 %6
}

define private i1 @"<:Integer> > <:Integer>"(%Integer %0, %Integer %1) !dbg !52 {
  %return_value = alloca i1, align 1
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %y = alloca %Integer, align 8
  store %Integer %1, ptr %y, align 8
  %3 = load %Integer, ptr %y, align 8, !dbg !53
  %4 = load %Integer, ptr %x, align 8, !dbg !53
  %5 = call i1 @integer_less_integer(%Integer %3, %Integer %4), !dbg !53
  %"$tmp@1032" = alloca i1, align 1, !dbg !53
  store i1 %5, ptr %"$tmp@1032", align 1, !dbg !53
  %6 = load i1, ptr %"$tmp@1032", align 1, !dbg !53
  store i1 %6, ptr %return_value, align 1, !dbg !53
  br label %return, !dbg !53

return:                                           ; preds = %2
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare %String @clone_string(ptr)

declare void @destroy_string(ptr)

define private i1 @"<:Reference<Array<Integer>>> is empty"(ptr %0) !dbg !54 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !55
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !55
  %3 = call %Integer @clone_integer(ptr %size), !dbg !55
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !55
  %5 = call i1 @integer_eq_integer(%Integer %3, %Integer %4), !dbg !55
  %"$tmp@1161" = alloca i1, align 1, !dbg !55
  store i1 %5, ptr %"$tmp@1161", align 1, !dbg !55
  %6 = load i1, ptr %"$tmp@1161", align 1, !dbg !55
  store i1 %6, ptr %return_value, align 1, !dbg !55
  br label %return, !dbg !55

return:                                           ; preds = %1
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare i1 @integer_eq_integer(%Integer, %Integer)

define private void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %0, ptr %1) !dbg !56 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %array = alloca ptr, align 8
  store ptr %1, ptr %array, align 8
  %3 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !57
  %4 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %3), !dbg !57
  %bytes = alloca %Integer, align 8, !dbg !57
  store %Integer %4, ptr %bytes, align 8, !dbg !57
  br label %if.condition, !dbg !57

if.condition:                                     ; preds = %2
  %5 = load ptr, ptr %array, align 8, !dbg !57
  %size4 = getelementptr inbounds %"Array<Integer>", ptr %5, i32 0, i32 0, !dbg !57
  %6 = call %Integer @clone_integer(ptr %size4), !dbg !57
  %7 = load ptr, ptr %array, align 8, !dbg !57
  %capacity5 = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 1, !dbg !57
  %8 = call %Integer @clone_integer(ptr %capacity5), !dbg !57
  %9 = call i1 @integer_eq_integer(%Integer %6, %Integer %8), !dbg !57
  br i1 %9, label %if.body, label %18, !dbg !57

if.body:                                          ; preds = %if.condition
  %10 = load ptr, ptr %array, align 8, !dbg !57
  %capacity = getelementptr inbounds %"Array<Integer>", ptr %10, i32 0, i32 1, !dbg !57
  %11 = call %Integer @clone_integer(ptr %capacity), !dbg !57
  %12 = call %Integer @integer_from_i64(i64 2), !dbg !57
  %13 = call %Integer @integer_star_integer(%Integer %11, %Integer %12), !dbg !57
  %new_capacity = alloca %Integer, align 8, !dbg !57
  store %Integer %13, ptr %new_capacity, align 8, !dbg !57
  %14 = call %Integer @clone_integer(ptr %new_capacity), !dbg !57
  %15 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !57
  %16 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %14, %"Type<Integer>" %15), !dbg !57
  %new_data = alloca %MemoryAddress, align 8, !dbg !57
  store %MemoryAddress %16, ptr %new_data, align 8, !dbg !57
  %17 = call %Integer @integer_from_i64(i64 0), !dbg !57
  %i = alloca %Integer, align 8, !dbg !57
  store %Integer %17, ptr %i, align 8, !dbg !57
  br label %while.condition, !dbg !57

return:                                           ; preds = %18
  ret void

18:                                               ; preds = %if.condition, %48
  %19 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !57
  %20 = load ptr, ptr %array, align 8, !dbg !57
  %data6 = getelementptr inbounds %"Array<Integer>", ptr %20, i32 0, i32 2, !dbg !57
  %21 = load %MemoryAddress, ptr %data6, align 8, !dbg !57
  %22 = load ptr, ptr %array, align 8, !dbg !57
  %size7 = getelementptr inbounds %"Array<Integer>", ptr %22, i32 0, i32 0, !dbg !57
  %23 = call %Integer @clone_integer(ptr %size7), !dbg !57
  %24 = call %Integer @clone_integer(ptr %bytes), !dbg !57
  %25 = call %Integer @integer_star_integer(%Integer %23, %Integer %24), !dbg !57
  %26 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %21, %Integer %25), !dbg !57
  %27 = call ptr @read_memory(%"Type<Integer>" %19, %MemoryAddress %26), !dbg !57
  %value8 = alloca ptr, align 8, !dbg !57
  store ptr %27, ptr %value8, align 8, !dbg !57
  %28 = load ptr, ptr %value8, align 8, !dbg !57
  %29 = load %Integer, ptr %x, align 8, !dbg !57
  store %Integer %29, ptr %28, align 8, !dbg !57
  %30 = load ptr, ptr %array, align 8, !dbg !57
  %size9 = getelementptr inbounds %"Array<Integer>", ptr %30, i32 0, i32 0, !dbg !57
  %31 = call %Integer @integer_from_i64(i64 1), !dbg !57
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %size9, %Integer %31), !dbg !57
  call void @destroy_integer(ptr %bytes), !dbg !57
  br label %return, !dbg !57

while.condition:                                  ; preds = %while.body, %if.body
  %32 = call %Integer @clone_integer(ptr %i), !dbg !57
  %33 = load ptr, ptr %array, align 8, !dbg !57
  %size = getelementptr inbounds %"Array<Integer>", ptr %33, i32 0, i32 0, !dbg !57
  %34 = call %Integer @clone_integer(ptr %size), !dbg !57
  %35 = call i1 @integer_less_integer(%Integer %32, %Integer %34), !dbg !57
  br i1 %35, label %while.body, label %48, !dbg !57

while.body:                                       ; preds = %while.condition
  %36 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !57
  %37 = load %MemoryAddress, ptr %new_data, align 8, !dbg !57
  %38 = call %Integer @clone_integer(ptr %i), !dbg !57
  %39 = call %Integer @clone_integer(ptr %bytes), !dbg !57
  %40 = call %Integer @integer_star_integer(%Integer %38, %Integer %39), !dbg !57
  %41 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %37, %Integer %40), !dbg !57
  %42 = call ptr @read_memory(%"Type<Integer>" %36, %MemoryAddress %41), !dbg !57
  %value = alloca ptr, align 8, !dbg !57
  store ptr %42, ptr %value, align 8, !dbg !57
  %43 = load ptr, ptr %value, align 8, !dbg !57
  %44 = call %Integer @clone_integer(ptr %i), !dbg !57
  %45 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %44), !dbg !57
  %46 = load %Integer, ptr %45, align 8, !dbg !57
  store %Integer %46, ptr %43, align 8, !dbg !57
  %47 = call %Integer @integer_from_i64(i64 1), !dbg !57
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %i, %Integer %47), !dbg !57
  br label %while.condition, !dbg !57

48:                                               ; preds = %while.condition
  %49 = load ptr, ptr %array, align 8, !dbg !57
  %data = getelementptr inbounds %"Array<Integer>", ptr %49, i32 0, i32 2, !dbg !57
  %50 = load %MemoryAddress, ptr %data, align 8, !dbg !57
  call void @free_memory(%MemoryAddress %50), !dbg !57
  %51 = load ptr, ptr %array, align 8, !dbg !57
  %data1 = getelementptr inbounds %"Array<Integer>", ptr %51, i32 0, i32 2, !dbg !57
  %52 = load %MemoryAddress, ptr %new_data, align 8, !dbg !57
  store %MemoryAddress %52, ptr %data1, align 8, !dbg !57
  %53 = load ptr, ptr %array, align 8, !dbg !57
  %capacity2 = getelementptr inbounds %"Array<Integer>", ptr %53, i32 0, i32 1, !dbg !57
  call void @destroy_integer(ptr %capacity2), !dbg !57
  %54 = load ptr, ptr %array, align 8, !dbg !57
  %capacity3 = getelementptr inbounds %"Array<Integer>", ptr %54, i32 0, i32 1, !dbg !57
  %55 = call %Integer @clone_integer(ptr %new_capacity), !dbg !57
  store %Integer %55, ptr %capacity3, align 8, !dbg !57
  call void @destroy_integer(ptr %new_capacity), !dbg !57
  call void @destroy_integer(ptr %i), !dbg !57
  br label %18, !dbg !57
}

declare void @free_memory(%MemoryAddress)

define private void @"println <:Integer>"(%Integer %0) !dbg !58 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !59
  %3 = call %String @integer_as_string(%Integer %2), !dbg !59
  call void @"println <:String>"(%String %3), !dbg !59
  br label %return, !dbg !60

return:                                           ; preds = %1
  ret void
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 7, column: 18, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 14, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 7, column: 18, scope: !12)
!14 = !DILocation(line: 0, column: 14, scope: !12)
!15 = !DILocation(line: 1, column: 8, scope: !12)
!16 = !DILocation(line: 3, column: 9, scope: !12)
!17 = !DILocation(line: 2, column: 3, scope: !12)
!18 = !DILocation(line: 4, column: 5, scope: !12)
!19 = !DILocation(line: 4, column: 10, scope: !12)
!20 = !DILocation(line: 5, column: 8, scope: !12)
!21 = !DILocation(line: 7, column: 9, scope: !12)
!22 = !DILocation(line: 6, column: 3, scope: !12)
!23 = !DILocation(line: 8, column: 12, scope: !12)
!24 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !12, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 0, column: 14, scope: !24)
!26 = distinct !DISubprogram(name: "<:Type<Integer>> [ ]", linkageName: "<:Type<Integer>> [ ]", scope: !24, file: !2, line: 10, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 12, column: 11, scope: !26)
!28 = !DILocation(line: 13, column: 6, scope: !26)
!29 = !DILocation(line: 13, column: 14, scope: !26)
!30 = !DILocation(line: 11, column: 16, scope: !26)
!31 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !26, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!32 = !DILocation(line: 13, column: 14, scope: !31)
!33 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !31, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!34 = !DILocation(line: 13, column: 14, scope: !33)
!35 = distinct !DISubprogram(name: "println <:Array<Integer>>", linkageName: "println <:Array<Integer>>", scope: !12, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!36 = !DILocation(line: 11, column: 10, scope: !35)
!37 = !DILocation(line: 10, column: 22, scope: !35)
!38 = distinct !DISubprogram(name: "String from <:Array<Integer>>", linkageName: "String from <:Array<Integer>>", scope: !35, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!39 = !DILocation(line: 13, column: 14, scope: !38)
!40 = distinct !DISubprogram(name: "<:ReferenceMut<String>> += <:String>", linkageName: "<:ReferenceMut<String>> += <:String>", scope: !38, file: !2, line: 10, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!41 = !DILocation(line: 12, column: 16, scope: !40)
!42 = !DILocation(line: 12, column: 23, scope: !40)
!43 = !DILocation(line: 13, column: 2, scope: !40)
!44 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> [ <:Integer> ]", linkageName: "<:Reference<Array<Integer>>> [ <:Integer> ]", scope: !38, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!45 = !DILocation(line: 13, column: 14, scope: !44)
!46 = distinct !DISubprogram(name: "<:ReferenceMut<Integer>> += <:Integer>", linkageName: "<:ReferenceMut<Integer>> += <:Integer>", scope: !38, file: !2, line: 10, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!47 = !DILocation(line: 12, column: 16, scope: !46)
!48 = !DILocation(line: 12, column: 23, scope: !46)
!49 = !DILocation(line: 13, column: 2, scope: !46)
!50 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is not empty", linkageName: "<:Reference<Array<Integer>>> is not empty", scope: !38, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!51 = !DILocation(line: 13, column: 14, scope: !50)
!52 = distinct !DISubprogram(name: "<:Integer> > <:Integer>", linkageName: "<:Integer> > <:Integer>", scope: !50, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!53 = !DILocation(line: 13, column: 14, scope: !52)
!54 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is empty", linkageName: "<:Reference<Array<Integer>>> is empty", scope: !12, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!55 = !DILocation(line: 13, column: 14, scope: !54)
!56 = distinct !DISubprogram(name: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", linkageName: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", scope: !12, file: !2, line: 13, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!57 = !DILocation(line: 13, column: 14, scope: !56)
!58 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !12, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!59 = !DILocation(line: 11, column: 10, scope: !58)
!60 = !DILocation(line: 10, column: 22, scope: !58)
