---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<MemoryAddress>" = type { %String, %Integer }
%"Type<I32>" = type { %String, %Integer }
%"Type<F64>" = type { %String, %Integer }
%"Type<Integer>" = type { %String, %Integer }
%"Array<Integer>" = type { %Integer, %Integer, %MemoryAddress }
%MemoryAddress = type { %Integer }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<MemoryAddress>" = private global %"Type<MemoryAddress>" zeroinitializer
@1 = private unnamed_addr constant [14 x i8] c"MemoryAddress\00", align 1
@"Type<I32>" = private global %"Type<I32>" zeroinitializer
@2 = private unnamed_addr constant [4 x i8] c"I32\00", align 1
@"Type<F64>" = private global %"Type<F64>" zeroinitializer
@3 = private unnamed_addr constant [4 x i8] c"F64\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@4 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@arr = global %"Array<Integer>" zeroinitializer
@5 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@6 = private unnamed_addr constant [20 x i8] c"Index out of bounds\00", align 1
@7 = private unnamed_addr constant [3 x i8] c", \00", align 1
@8 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@9 = private unnamed_addr constant [6 x i8] c"Empty\00", align 1
@10 = private unnamed_addr constant [10 x i8] c"Not empty\00", align 1
@11 = private unnamed_addr constant [20 x i8] c"Index out of bounds\00", align 1
@i = global %Integer zeroinitializer

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<MemoryAddress>", align 8, !dbg !10
  %"Type<MemoryAddress>.name" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 13), !dbg !11
  store %String %2, ptr %"Type<MemoryAddress>.name", align 8, !dbg !11
  %"Type<MemoryAddress>.size" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<MemoryAddress>.size", align 8, !dbg !11
  %4 = load %"Type<MemoryAddress>", ptr %1, align 8, !dbg !11
  store %"Type<MemoryAddress>" %4, ptr @"Type<MemoryAddress>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define private void @initialize.2() !dbg !12 {
  %1 = alloca %"Type<I32>", align 8, !dbg !13
  %"Type<I32>.name" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 0, !dbg !13
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 3), !dbg !14
  store %String %2, ptr %"Type<I32>.name", align 8, !dbg !14
  %"Type<I32>.size" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 1, !dbg !14
  %3 = call %Integer @integer_from_i64(i64 4), !dbg !14
  store %Integer %3, ptr %"Type<I32>.size", align 8, !dbg !14
  %4 = load %"Type<I32>", ptr %1, align 8, !dbg !14
  store %"Type<I32>" %4, ptr @"Type<I32>", align 8, !dbg !14
  br label %return, !dbg !14

return:                                           ; preds = %0
  ret void
}

define private void @initialize.3() !dbg !15 {
  %1 = alloca %"Type<F64>", align 8, !dbg !16
  %"Type<F64>.name" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 0, !dbg !16
  %2 = call %String @string_from_c_string_and_length(ptr @3, i64 3), !dbg !17
  store %String %2, ptr %"Type<F64>.name", align 8, !dbg !17
  %"Type<F64>.size" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 1, !dbg !17
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !17
  store %Integer %3, ptr %"Type<F64>.size", align 8, !dbg !17
  %4 = load %"Type<F64>", ptr %1, align 8, !dbg !17
  store %"Type<F64>" %4, ptr @"Type<F64>", align 8, !dbg !17
  br label %return, !dbg !17

return:                                           ; preds = %0
  ret void
}

define private void @initialize.4() !dbg !18 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !19
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !19
  %2 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !20
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !20
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !20
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !20
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !20
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !20
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !21 {
  call void @initialize(), !dbg !22
  call void @initialize.1(), !dbg !23
  call void @initialize.2(), !dbg !24
  call void @initialize.3(), !dbg !25
  call void @initialize.4(), !dbg !26
  call void @initialize.5(), !dbg !26
  %1 = load %"Array<Integer>", ptr @arr, align 8, !dbg !27
  call void @"println <:Array<Integer>>"(%"Array<Integer>" %1), !dbg !27
  br label %if.condition, !dbg !28

if.condition:                                     ; preds = %0
  %2 = call i1 @"<:Reference<Array<Integer>>> is empty"(ptr @arr), !dbg !29
  br i1 %2, label %if.body, label %4, !dbg !29

if.body:                                          ; preds = %if.condition
  %3 = call %String @string_from_c_string_and_length(ptr @9, i64 5), !dbg !28
  %"$tmp@62" = alloca %String, align 8, !dbg !28
  store %String %3, ptr %"$tmp@62", align 8, !dbg !28
  call void @"println <:Reference<String>>"(ptr %"$tmp@62"), !dbg !28
  call void @destroy_string(ptr %"$tmp@62"), !dbg !28
  br label %4, !dbg !28

return:                                           ; preds = %19
  ret void

4:                                                ; preds = %if.condition, %if.body
  %5 = call %Integer @integer_from_i64(i64 1), !dbg !30
  call void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %5, ptr @arr), !dbg !31
  %6 = load %"Array<Integer>", ptr @arr, align 8, !dbg !32
  call void @"println <:Array<Integer>>"(%"Array<Integer>" %6), !dbg !32
  br label %if.condition2, !dbg !33

if.condition2:                                    ; preds = %4
  %7 = call i1 @"<:Reference<Array<Integer>>> is not empty"(ptr @arr), !dbg !34
  br i1 %7, label %if.body1, label %9, !dbg !34

if.body1:                                         ; preds = %if.condition2
  %8 = call %String @string_from_c_string_and_length(ptr @10, i64 9), !dbg !33
  %"$tmp@126" = alloca %String, align 8, !dbg !33
  store %String %8, ptr %"$tmp@126", align 8, !dbg !33
  call void @"println <:Reference<String>>"(ptr %"$tmp@126"), !dbg !33
  call void @destroy_string(ptr %"$tmp@126"), !dbg !33
  br label %9, !dbg !33

9:                                                ; preds = %if.condition2, %if.body1
  %10 = call %Integer @integer_from_i64(i64 0), !dbg !35
  %11 = call ptr @"<:ReferenceMut<Array<Integer>>> [ <:Integer> ]"(ptr @arr, %Integer %10), !dbg !35
  %12 = call %Integer @clone_integer(ptr %11), !dbg !35
  call void @"println <:Integer>"(%Integer %12), !dbg !35
  call void @initialize.6(), !dbg !36
  br label %while.condition, !dbg !36

while.condition:                                  ; preds = %while.body, %9
  %13 = call %Integer @clone_integer(ptr @i), !dbg !37
  %14 = call %Integer @integer_from_i64(i64 10), !dbg !38
  %15 = call i1 @"<:Integer> <= <:Integer>"(%Integer %13, %Integer %14), !dbg !38
  br i1 %15, label %while.body, label %19, !dbg !38

while.body:                                       ; preds = %while.condition
  %16 = call %Integer @clone_integer(ptr @i), !dbg !39
  call void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %16, ptr @arr), !dbg !40
  %17 = call %Integer @integer_from_i64(i64 1), !dbg !41
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr @i, %Integer %17), !dbg !41
  %18 = load %"Array<Integer>", ptr @arr, align 8, !dbg !42
  call void @"println <:Array<Integer>>"(%"Array<Integer>" %18), !dbg !42
  br label %while.condition, !dbg !42

19:                                               ; preds = %while.condition
  call void @destroy_integer(ptr @i), !dbg !43
  br label %return, !dbg !43
}

define private void @initialize.5() !dbg !44 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !45
  %2 = call %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %1), !dbg !45
  store %"Array<Integer>" %2, ptr @arr, align 8, !dbg !45
  br label %return, !dbg !45

return:                                           ; preds = %0
  ret void
}

define private %"Array<Integer>" @"<:Type<Integer>> [ ]"(%"Type<Integer>" %0) !dbg !46 {
  %return_value = alloca %"Array<Integer>", align 8
  %"$arg0" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %"$arg0", align 8
  %2 = call %Integer @integer_from_i64(i64 8), !dbg !47
  %capacity = alloca %Integer, align 8, !dbg !47
  store %Integer %2, ptr %capacity, align 8, !dbg !47
  %3 = call %Integer @clone_integer(ptr %capacity), !dbg !47
  %4 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !47
  %5 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %3, %"Type<Integer>" %4), !dbg !47
  %data = alloca %MemoryAddress, align 8, !dbg !47
  store %MemoryAddress %5, ptr %data, align 8, !dbg !47
  %6 = alloca %"Array<Integer>", align 8, !dbg !47
  %"Array<Integer>.size" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 0, !dbg !47
  %7 = call %Integer @integer_from_i64(i64 0), !dbg !47
  store %Integer %7, ptr %"Array<Integer>.size", align 8, !dbg !47
  %"Array<Integer>.capacity" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 1, !dbg !47
  %8 = call %Integer @clone_integer(ptr %capacity), !dbg !47
  store %Integer %8, ptr %"Array<Integer>.capacity", align 8, !dbg !47
  %"Array<Integer>.data" = getelementptr inbounds %"Array<Integer>", ptr %6, i32 0, i32 2, !dbg !47
  %9 = load %MemoryAddress, ptr %data, align 8, !dbg !47
  store %MemoryAddress %9, ptr %"Array<Integer>.data", align 8, !dbg !47
  %10 = load %"Array<Integer>", ptr %6, align 8, !dbg !47
  %"$tmp@427" = alloca %"Array<Integer>", align 8, !dbg !47
  store %"Array<Integer>" %10, ptr %"$tmp@427", align 8, !dbg !47
  call void @destroy_integer(ptr %capacity), !dbg !47
  %11 = load %"Array<Integer>", ptr %"$tmp@427", align 8, !dbg !47
  store %"Array<Integer>" %11, ptr %return_value, align 8, !dbg !47
  br label %return, !dbg !47

return:                                           ; preds = %1
  %12 = load %"Array<Integer>", ptr %return_value, align 8
  ret %"Array<Integer>" %12
}

define private %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %0, %"Type<Integer>" %1) !dbg !48 {
  %return_value = alloca %MemoryAddress, align 8
  %n = alloca %Integer, align 8
  store %Integer %0, ptr %n, align 8
  %"$arg1" = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %1, ptr %"$arg1", align 8
  %3 = call %Integer @clone_integer(ptr %n), !dbg !49
  %4 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !49
  %5 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %4), !dbg !49
  %6 = call %Integer @integer_star_integer(%Integer %3, %Integer %5), !dbg !49
  %7 = call %MemoryAddress @allocate_n_bytes(%Integer %6), !dbg !49
  %"$tmp@825" = alloca %MemoryAddress, align 8, !dbg !49
  store %MemoryAddress %7, ptr %"$tmp@825", align 8, !dbg !49
  call void @destroy_integer(ptr %n), !dbg !49
  %8 = load %MemoryAddress, ptr %"$tmp@825", align 8, !dbg !49
  store %MemoryAddress %8, ptr %return_value, align 8, !dbg !49
  br label %return, !dbg !49

return:                                           ; preds = %2
  %9 = load %MemoryAddress, ptr %return_value, align 8
  ret %MemoryAddress %9
}

declare %MemoryAddress @allocate_n_bytes(%Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

declare %Integer @clone_integer(ptr)

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !50 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %size = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 1, !dbg !51
  %2 = call %Integer @clone_integer(ptr %size), !dbg !51
  %"$tmp@4697" = alloca %Integer, align 8, !dbg !51
  store %Integer %2, ptr %"$tmp@4697", align 8, !dbg !51
  %3 = load %Integer, ptr %"$tmp@4697", align 8, !dbg !51
  store %Integer %3, ptr %return_value, align 8, !dbg !51
  br label %return, !dbg !51

return:                                           ; preds = %1
  %4 = load %Integer, ptr %return_value, align 8
  ret %Integer %4
}

declare void @destroy_integer(ptr)

define private void @"println <:Array<Integer>>"(%"Array<Integer>" %0) !dbg !52 {
  %x = alloca %"Array<Integer>", align 8
  store %"Array<Integer>" %0, ptr %x, align 8
  %2 = load %"Array<Integer>", ptr %x, align 8, !dbg !53
  %3 = call %String @"String from <:Array<Integer>>"(%"Array<Integer>" %2), !dbg !53
  %"$tmp@185" = alloca %String, align 8, !dbg !53
  store %String %3, ptr %"$tmp@185", align 8, !dbg !53
  call void @"println <:Reference<String>>"(ptr %"$tmp@185"), !dbg !54
  br label %return, !dbg !55

return:                                           ; preds = %1
  ret void
}

define private %String @"String from <:Array<Integer>>"(%"Array<Integer>" %0) !dbg !56 {
  %return_value = alloca %String, align 8
  %array = alloca %"Array<Integer>", align 8
  store %"Array<Integer>" %0, ptr %array, align 8
  %2 = call %String @string_from_c_string_and_length(ptr @5, i64 1), !dbg !57
  %str = alloca %String, align 8, !dbg !57
  store %String %2, ptr %str, align 8, !dbg !57
  br label %if.condition, !dbg !57

if.condition:                                     ; preds = %1
  %3 = call i1 @"<:Reference<Array<Integer>>> is not empty"(ptr %array), !dbg !57
  br i1 %3, label %if.body, label %10, !dbg !57

if.body:                                          ; preds = %if.condition
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !57
  %5 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %4), !dbg !57
  %6 = load %Integer, ptr %5, align 8, !dbg !57
  %7 = call %String @integer_as_string(%Integer %6), !dbg !57
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %7), !dbg !57
  %8 = call %Integer @integer_from_i64(i64 1), !dbg !57
  %i = alloca %Integer, align 8, !dbg !57
  store %Integer %8, ptr %i, align 8, !dbg !57
  br label %while.condition, !dbg !57

return:                                           ; preds = %10
  %9 = load %String, ptr %return_value, align 8
  ret %String %9

10:                                               ; preds = %if.condition, %22
  %11 = call %String @string_from_c_string_and_length(ptr @8, i64 1), !dbg !57
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %11), !dbg !57
  %12 = load %String, ptr %str, align 8, !dbg !57
  store %String %12, ptr %return_value, align 8, !dbg !57
  br label %return, !dbg !57

while.condition:                                  ; preds = %while.body, %if.body
  %13 = call %Integer @clone_integer(ptr %i), !dbg !57
  %size = getelementptr inbounds %"Array<Integer>", ptr %array, i32 0, i32 0, !dbg !57
  %14 = call %Integer @clone_integer(ptr %size), !dbg !57
  %15 = call i1 @integer_less_integer(%Integer %13, %Integer %14), !dbg !57
  br i1 %15, label %while.body, label %22, !dbg !57

while.body:                                       ; preds = %while.condition
  %16 = call %String @string_from_c_string_and_length(ptr @7, i64 2), !dbg !57
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %16), !dbg !57
  %17 = call %Integer @clone_integer(ptr %i), !dbg !57
  %18 = call ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %array, %Integer %17), !dbg !57
  %19 = load %Integer, ptr %18, align 8, !dbg !57
  %20 = call %String @integer_as_string(%Integer %19), !dbg !57
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %str, %String %20), !dbg !57
  %21 = call %Integer @integer_from_i64(i64 1), !dbg !57
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %i, %Integer %21), !dbg !57
  br label %while.condition, !dbg !57

22:                                               ; preds = %while.condition
  call void @destroy_integer(ptr %i), !dbg !57
  br label %10, !dbg !57
}

define private void @"<:ReferenceMut<String>> += <:String>"(ptr %0, %String %1) !dbg !58 {
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %String, align 8
  store %String %1, ptr %other, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !59
  %4 = load ptr, ptr %self, align 8, !dbg !60
  %5 = load %String, ptr %4, align 8, !dbg !60
  %6 = load %String, ptr %other, align 8, !dbg !61
  %7 = call %String @string_plus_string(%String %5, %String %6), !dbg !61
  store %String %7, ptr %3, align 8, !dbg !61
  br label %return, !dbg !61

return:                                           ; preds = %2
  ret void
}

declare %String @string_plus_string(%String, %String)

declare %String @integer_as_string(%Integer)

define private ptr @"<:Reference<Array<Integer>>> [ <:Integer> ]"(ptr %0, %Integer %1) !dbg !62 {
  %return_value = alloca ptr, align 8
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %i = alloca %Integer, align 8
  store %Integer %1, ptr %i, align 8
  %3 = call %String @string_from_c_string_and_length(ptr @6, i64 19), !dbg !63
  %"$tmp@990" = alloca %String, align 8, !dbg !63
  store %String %3, ptr %"$tmp@990", align 8, !dbg !63
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !63
  %5 = load %Integer, ptr %i, align 8, !dbg !63
  %6 = call i1 @"<:Integer> <= <:Integer>"(%Integer %4, %Integer %5), !dbg !63
  %7 = load %Integer, ptr %i, align 8, !dbg !63
  %8 = load ptr, ptr %array, align 8, !dbg !63
  %size = getelementptr inbounds %"Array<Integer>", ptr %8, i32 0, i32 0, !dbg !63
  %9 = load %Integer, ptr %size, align 8, !dbg !63
  %10 = call i1 @integer_less_integer(%Integer %7, %Integer %9), !dbg !63
  %11 = call i1 @"<:Bool> and <:Bool>"(i1 %6, i1 %10), !dbg !63
  call void @assert(i1 %11, ptr %"$tmp@990"), !dbg !63
  %12 = load ptr, ptr %array, align 8, !dbg !63
  %data = getelementptr inbounds %"Array<Integer>", ptr %12, i32 0, i32 2, !dbg !63
  %13 = load %MemoryAddress, ptr %data, align 8, !dbg !63
  %14 = load %Integer, ptr %i, align 8, !dbg !63
  %15 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !63
  %16 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %15), !dbg !63
  %17 = call %Integer @integer_star_integer(%Integer %14, %Integer %16), !dbg !63
  %18 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %13, %Integer %17), !dbg !63
  %address = alloca %MemoryAddress, align 8, !dbg !63
  store %MemoryAddress %18, ptr %address, align 8, !dbg !63
  %19 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !63
  %20 = call ptr @read_memory(%"Type<Integer>" %19, ptr %address), !dbg !63
  %"$tmp@1064" = alloca ptr, align 8, !dbg !63
  store ptr %20, ptr %"$tmp@1064", align 8, !dbg !63
  %21 = load ptr, ptr %"$tmp@1064", align 8, !dbg !63
  store ptr %21, ptr %return_value, align 8, !dbg !63
  br label %return, !dbg !63

return:                                           ; preds = %2
  %22 = load ptr, ptr %return_value, align 8
  ret ptr %22
}

declare void @assert(i1, ptr)

declare i1 @"<:Bool> and <:Bool>"(i1, i1)

define private i1 @"<:Integer> <= <:Integer>"(%Integer %0, %Integer %1) !dbg !64 {
  %return_value = alloca i1, align 1
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %y = alloca %Integer, align 8
  store %Integer %1, ptr %y, align 8
  %3 = load %Integer, ptr %x, align 8, !dbg !65
  %4 = load %Integer, ptr %y, align 8, !dbg !65
  %5 = call i1 @"<:Integer> > <:Integer>"(%Integer %3, %Integer %4), !dbg !65
  %6 = call i1 @"not <:Bool>"(i1 %5), !dbg !65
  %"$tmp@883" = alloca i1, align 1, !dbg !65
  store i1 %6, ptr %"$tmp@883", align 1, !dbg !65
  %7 = load i1, ptr %"$tmp@883", align 1, !dbg !65
  store i1 %7, ptr %return_value, align 1, !dbg !65
  br label %return, !dbg !65

return:                                           ; preds = %2
  %8 = load i1, ptr %return_value, align 1
  ret i1 %8
}

declare i1 @"not <:Bool>"(i1)

define private i1 @"<:Integer> > <:Integer>"(%Integer %0, %Integer %1) !dbg !66 {
  %return_value = alloca i1, align 1
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %y = alloca %Integer, align 8
  store %Integer %1, ptr %y, align 8
  %3 = load %Integer, ptr %y, align 8, !dbg !67
  %4 = load %Integer, ptr %x, align 8, !dbg !67
  %5 = call i1 @integer_less_integer(%Integer %3, %Integer %4), !dbg !67
  %"$tmp@847" = alloca i1, align 1, !dbg !67
  store i1 %5, ptr %"$tmp@847", align 1, !dbg !67
  %6 = load i1, ptr %"$tmp@847", align 1, !dbg !67
  store i1 %6, ptr %return_value, align 1, !dbg !67
  br label %return, !dbg !67

return:                                           ; preds = %2
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare i1 @integer_less_integer(%Integer, %Integer)

declare %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress, %Integer)

declare ptr @read_memory(%"Type<Integer>", ptr)

define private void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %0, %Integer %1) !dbg !68 {
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %Integer, align 8
  store %Integer %1, ptr %other, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !69
  %4 = load ptr, ptr %self, align 8, !dbg !70
  %5 = load %Integer, ptr %4, align 8, !dbg !70
  %6 = load %Integer, ptr %other, align 8, !dbg !71
  %7 = call %Integer @integer_plus_integer(%Integer %5, %Integer %6), !dbg !71
  store %Integer %7, ptr %3, align 8, !dbg !71
  br label %return, !dbg !71

return:                                           ; preds = %2
  ret void
}

declare %Integer @integer_plus_integer(%Integer, %Integer)

define private i1 @"<:Reference<Array<Integer>>> is not empty"(ptr %0) !dbg !72 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !73
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !73
  %3 = load %Integer, ptr %size, align 8, !dbg !73
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !73
  %5 = call i1 @"<:Integer> > <:Integer>"(%Integer %3, %Integer %4), !dbg !73
  %"$tmp@1669" = alloca i1, align 1, !dbg !73
  store i1 %5, ptr %"$tmp@1669", align 1, !dbg !73
  %6 = load i1, ptr %"$tmp@1669", align 1, !dbg !73
  store i1 %6, ptr %return_value, align 1, !dbg !73
  br label %return, !dbg !73

return:                                           ; preds = %1
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare void @"println <:Reference<String>>"(ptr)

declare void @destroy_string(ptr)

define private i1 @"<:Reference<Array<Integer>>> is empty"(ptr %0) !dbg !74 {
  %return_value = alloca i1, align 1
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %2 = load ptr, ptr %array, align 8, !dbg !75
  %size = getelementptr inbounds %"Array<Integer>", ptr %2, i32 0, i32 0, !dbg !75
  %3 = call %Integer @clone_integer(ptr %size), !dbg !75
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !75
  %5 = call i1 @integer_eq_integer(%Integer %3, %Integer %4), !dbg !75
  %"$tmp@1612" = alloca i1, align 1, !dbg !75
  store i1 %5, ptr %"$tmp@1612", align 1, !dbg !75
  %6 = load i1, ptr %"$tmp@1612", align 1, !dbg !75
  store i1 %6, ptr %return_value, align 1, !dbg !75
  br label %return, !dbg !75

return:                                           ; preds = %1
  %7 = load i1, ptr %return_value, align 1
  ret i1 %7
}

declare i1 @integer_eq_integer(%Integer, %Integer)

define private void @"push <:Integer> to <:ReferenceMut<Array<Integer>>>"(%Integer %0, ptr %1) !dbg !76 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %array = alloca ptr, align 8
  store ptr %1, ptr %array, align 8
  %3 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !77
  %4 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %3), !dbg !77
  %bytes = alloca %Integer, align 8, !dbg !77
  store %Integer %4, ptr %bytes, align 8, !dbg !77
  br label %if.condition, !dbg !77

if.condition:                                     ; preds = %2
  %5 = load ptr, ptr %array, align 8, !dbg !77
  %size5 = getelementptr inbounds %"Array<Integer>", ptr %5, i32 0, i32 0, !dbg !77
  %6 = call %Integer @clone_integer(ptr %size5), !dbg !77
  %7 = load ptr, ptr %array, align 8, !dbg !77
  %capacity6 = getelementptr inbounds %"Array<Integer>", ptr %7, i32 0, i32 1, !dbg !77
  %8 = call %Integer @clone_integer(ptr %capacity6), !dbg !77
  %9 = call i1 @integer_eq_integer(%Integer %6, %Integer %8), !dbg !77
  br i1 %9, label %if.body, label %18, !dbg !77

if.body:                                          ; preds = %if.condition
  %10 = load ptr, ptr %array, align 8, !dbg !77
  %capacity = getelementptr inbounds %"Array<Integer>", ptr %10, i32 0, i32 1, !dbg !77
  %11 = call %Integer @clone_integer(ptr %capacity), !dbg !77
  %12 = call %Integer @integer_from_i64(i64 2), !dbg !77
  %13 = call %Integer @integer_star_integer(%Integer %11, %Integer %12), !dbg !77
  %new_capacity = alloca %Integer, align 8, !dbg !77
  store %Integer %13, ptr %new_capacity, align 8, !dbg !77
  %14 = call %Integer @clone_integer(ptr %new_capacity), !dbg !77
  %15 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !77
  %16 = call %MemoryAddress @"allocate <:Integer> <:Type<Integer>>"(%Integer %14, %"Type<Integer>" %15), !dbg !77
  %new_data = alloca %MemoryAddress, align 8, !dbg !77
  store %MemoryAddress %16, ptr %new_data, align 8, !dbg !77
  %17 = call %Integer @integer_from_i64(i64 0), !dbg !77
  %i = alloca %Integer, align 8, !dbg !77
  store %Integer %17, ptr %i, align 8, !dbg !77
  br label %while.condition, !dbg !77

return:                                           ; preds = %18
  ret void

18:                                               ; preds = %if.condition, %44
  %19 = call %MemoryAddress @address_of(ptr %x), !dbg !77
  %"$tmp@1506" = alloca %MemoryAddress, align 8, !dbg !77
  store %MemoryAddress %19, ptr %"$tmp@1506", align 8, !dbg !77
  %20 = load ptr, ptr %array, align 8, !dbg !77
  %data7 = getelementptr inbounds %"Array<Integer>", ptr %20, i32 0, i32 2, !dbg !77
  %21 = load %MemoryAddress, ptr %data7, align 8, !dbg !77
  %22 = load ptr, ptr %array, align 8, !dbg !77
  %size8 = getelementptr inbounds %"Array<Integer>", ptr %22, i32 0, i32 0, !dbg !77
  %23 = call %Integer @clone_integer(ptr %size8), !dbg !77
  %24 = call %Integer @clone_integer(ptr %bytes), !dbg !77
  %25 = call %Integer @integer_star_integer(%Integer %23, %Integer %24), !dbg !77
  %26 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %21, %Integer %25), !dbg !77
  %"$tmp@1524" = alloca %MemoryAddress, align 8, !dbg !77
  store %MemoryAddress %26, ptr %"$tmp@1524", align 8, !dbg !77
  call void @copy_bytes(ptr %bytes, ptr %"$tmp@1506", ptr %"$tmp@1524"), !dbg !77
  %27 = load ptr, ptr %array, align 8, !dbg !77
  %size9 = getelementptr inbounds %"Array<Integer>", ptr %27, i32 0, i32 0, !dbg !77
  %28 = call %Integer @integer_from_i64(i64 1), !dbg !77
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %size9, %Integer %28), !dbg !77
  call void @destroy_integer(ptr %bytes), !dbg !77
  br label %return, !dbg !77

while.condition:                                  ; preds = %while.body, %if.body
  %29 = call %Integer @clone_integer(ptr %i), !dbg !77
  %30 = load ptr, ptr %array, align 8, !dbg !77
  %size = getelementptr inbounds %"Array<Integer>", ptr %30, i32 0, i32 0, !dbg !77
  %31 = call %Integer @clone_integer(ptr %size), !dbg !77
  %32 = call i1 @integer_less_integer(%Integer %29, %Integer %31), !dbg !77
  br i1 %32, label %while.body, label %44, !dbg !77

while.body:                                       ; preds = %while.condition
  %33 = call %Integer @clone_integer(ptr %i), !dbg !77
  %34 = call %Integer @clone_integer(ptr %bytes), !dbg !77
  %35 = call %Integer @integer_star_integer(%Integer %33, %Integer %34), !dbg !77
  %offset = alloca %Integer, align 8, !dbg !77
  store %Integer %35, ptr %offset, align 8, !dbg !77
  %36 = load ptr, ptr %array, align 8, !dbg !77
  %data = getelementptr inbounds %"Array<Integer>", ptr %36, i32 0, i32 2, !dbg !77
  %37 = load %MemoryAddress, ptr %data, align 8, !dbg !77
  %38 = call %Integer @clone_integer(ptr %offset), !dbg !77
  %39 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %37, %Integer %38), !dbg !77
  %"$tmp@1353" = alloca %MemoryAddress, align 8, !dbg !77
  store %MemoryAddress %39, ptr %"$tmp@1353", align 8, !dbg !77
  %40 = load %MemoryAddress, ptr %new_data, align 8, !dbg !77
  %41 = call %Integer @clone_integer(ptr %offset), !dbg !77
  %42 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %40, %Integer %41), !dbg !77
  %"$tmp@1378" = alloca %MemoryAddress, align 8, !dbg !77
  store %MemoryAddress %42, ptr %"$tmp@1378", align 8, !dbg !77
  call void @copy_bytes(ptr %bytes, ptr %"$tmp@1353", ptr %"$tmp@1378"), !dbg !77
  %43 = call %Integer @integer_from_i64(i64 1), !dbg !77
  call void @"<:ReferenceMut<Integer>> += <:Integer>"(ptr %i, %Integer %43), !dbg !77
  call void @destroy_integer(ptr %offset), !dbg !77
  br label %while.condition, !dbg !77

44:                                               ; preds = %while.condition
  %45 = load ptr, ptr %array, align 8, !dbg !77
  %data1 = getelementptr inbounds %"Array<Integer>", ptr %45, i32 0, i32 2, !dbg !77
  call void @free_memory(ptr %data1), !dbg !77
  %46 = load ptr, ptr %array, align 8, !dbg !77
  %data2 = getelementptr inbounds %"Array<Integer>", ptr %46, i32 0, i32 2, !dbg !77
  %47 = load %MemoryAddress, ptr %new_data, align 8, !dbg !77
  store %MemoryAddress %47, ptr %data2, align 8, !dbg !77
  %48 = load ptr, ptr %array, align 8, !dbg !77
  %capacity3 = getelementptr inbounds %"Array<Integer>", ptr %48, i32 0, i32 1, !dbg !77
  call void @destroy_integer(ptr %capacity3), !dbg !77
  %49 = load ptr, ptr %array, align 8, !dbg !77
  %capacity4 = getelementptr inbounds %"Array<Integer>", ptr %49, i32 0, i32 1, !dbg !77
  %50 = call %Integer @clone_integer(ptr %new_capacity), !dbg !77
  store %Integer %50, ptr %capacity4, align 8, !dbg !77
  call void @destroy_integer(ptr %new_capacity), !dbg !77
  call void @destroy_integer(ptr %i), !dbg !77
  br label %18, !dbg !77
}

declare void @copy_bytes(ptr, ptr, ptr)

declare void @free_memory(ptr)

declare %MemoryAddress @address_of(ptr)

define private void @"println <:Integer>"(%Integer %0) !dbg !78 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !79
  %3 = call %String @integer_as_string(%Integer %2), !dbg !79
  %"$tmp@185" = alloca %String, align 8, !dbg !79
  store %String %3, ptr %"$tmp@185", align 8, !dbg !79
  call void @"println <:Reference<String>>"(ptr %"$tmp@185"), !dbg !80
  br label %return, !dbg !81

return:                                           ; preds = %1
  ret void
}

define private ptr @"<:ReferenceMut<Array<Integer>>> [ <:Integer> ]"(ptr %0, %Integer %1) !dbg !82 {
  %return_value = alloca ptr, align 8
  %array = alloca ptr, align 8
  store ptr %0, ptr %array, align 8
  %i = alloca %Integer, align 8
  store %Integer %1, ptr %i, align 8
  %3 = call %String @string_from_c_string_and_length(ptr @11, i64 19), !dbg !83
  %"$tmp@784" = alloca %String, align 8, !dbg !83
  store %String %3, ptr %"$tmp@784", align 8, !dbg !83
  %4 = call %Integer @integer_from_i64(i64 0), !dbg !83
  %5 = call %Integer @clone_integer(ptr %i), !dbg !83
  %6 = call i1 @"<:Integer> <= <:Integer>"(%Integer %4, %Integer %5), !dbg !83
  %7 = call %Integer @clone_integer(ptr %i), !dbg !83
  %8 = load ptr, ptr %array, align 8, !dbg !83
  %size = getelementptr inbounds %"Array<Integer>", ptr %8, i32 0, i32 0, !dbg !83
  %9 = call %Integer @clone_integer(ptr %size), !dbg !83
  %10 = call i1 @integer_less_integer(%Integer %7, %Integer %9), !dbg !83
  %11 = call i1 @"<:Bool> and <:Bool>"(i1 %6, i1 %10), !dbg !83
  call void @assert(i1 %11, ptr %"$tmp@784"), !dbg !83
  %12 = load ptr, ptr %array, align 8, !dbg !83
  %data = getelementptr inbounds %"Array<Integer>", ptr %12, i32 0, i32 2, !dbg !83
  %13 = load %MemoryAddress, ptr %data, align 8, !dbg !83
  %14 = call %Integer @clone_integer(ptr %i), !dbg !83
  %15 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !83
  %16 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %15), !dbg !83
  %17 = call %Integer @integer_star_integer(%Integer %14, %Integer %16), !dbg !83
  %18 = call %MemoryAddress @"<:MemoryAddress> + <:Integer>"(%MemoryAddress %13, %Integer %17), !dbg !83
  %address = alloca %MemoryAddress, align 8, !dbg !83
  store %MemoryAddress %18, ptr %address, align 8, !dbg !83
  %19 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !83
  %20 = call ptr @read_memory(%"Type<Integer>" %19, ptr %address), !dbg !83
  %"$tmp@858" = alloca ptr, align 8, !dbg !83
  store ptr %20, ptr %"$tmp@858", align 8, !dbg !83
  call void @destroy_integer(ptr %i), !dbg !83
  call void @destroy_string(ptr %"$tmp@784"), !dbg !83
  %21 = load ptr, ptr %"$tmp@858", align 8, !dbg !83
  store ptr %21, ptr %return_value, align 8, !dbg !83
  br label %return, !dbg !83

return:                                           ; preds = %2
  %22 = load ptr, ptr %return_value, align 8
  ret ptr %22
}

define private void @initialize.6() !dbg !84 {
  %1 = call %Integer @integer_from_i64(i64 2), !dbg !85
  store %Integer %1, ptr @i, align 8, !dbg !85
  br label %return, !dbg !85

return:                                           ; preds = %0
  ret void
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 7, column: 18, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 15, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !2, file: !2, line: 3, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 3, column: 10, scope: !12)
!14 = !DILocation(line: 0, scope: !12)
!15 = distinct !DISubprogram(name: "initialize.3", linkageName: "initialize.3", scope: !2, file: !2, line: 3, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!16 = !DILocation(line: 3, column: 5, scope: !15)
!17 = !DILocation(line: 0, scope: !15)
!18 = distinct !DISubprogram(name: "initialize.4", linkageName: "initialize.4", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!19 = !DILocation(line: 0, column: 14, scope: !18)
!20 = !DILocation(line: 0, scope: !18)
!21 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!22 = !DILocation(line: 7, column: 18, scope: !21)
!23 = !DILocation(line: 15, scope: !21)
!24 = !DILocation(line: 3, column: 10, scope: !21)
!25 = !DILocation(line: 3, column: 5, scope: !21)
!26 = !DILocation(line: 0, column: 14, scope: !21)
!27 = !DILocation(line: 1, column: 8, scope: !21)
!28 = !DILocation(line: 3, column: 9, scope: !21)
!29 = !DILocation(line: 2, column: 3, scope: !21)
!30 = !DILocation(line: 4, column: 5, scope: !21)
!31 = !DILocation(line: 4, column: 10, scope: !21)
!32 = !DILocation(line: 5, column: 8, scope: !21)
!33 = !DILocation(line: 7, column: 9, scope: !21)
!34 = !DILocation(line: 6, column: 3, scope: !21)
!35 = !DILocation(line: 8, column: 12, scope: !21)
!36 = !DILocation(line: 10, column: 12, scope: !21)
!37 = !DILocation(line: 11, column: 6, scope: !21)
!38 = !DILocation(line: 11, column: 11, scope: !21)
!39 = !DILocation(line: 12, column: 6, scope: !21)
!40 = !DILocation(line: 12, column: 11, scope: !21)
!41 = !DILocation(line: 13, column: 6, scope: !21)
!42 = !DILocation(line: 14, column: 9, scope: !21)
!43 = !DILocation(line: 10, scope: !21)
!44 = distinct !DISubprogram(name: "initialize.5", linkageName: "initialize.5", scope: !21, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!45 = !DILocation(line: 0, column: 14, scope: !44)
!46 = distinct !DISubprogram(name: "<:Type<Integer>> [ ]", linkageName: "<:Type<Integer>> [ ]", scope: !44, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!47 = !DILocation(line: 15, scope: !46)
!48 = distinct !DISubprogram(name: "allocate <:Integer> <:Type<Integer>>", linkageName: "allocate <:Integer> <:Type<Integer>>", scope: !46, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!49 = !DILocation(line: 15, scope: !48)
!50 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !48, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!51 = !DILocation(line: 15, scope: !50)
!52 = distinct !DISubprogram(name: "println <:Array<Integer>>", linkageName: "println <:Array<Integer>>", scope: !21, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!53 = !DILocation(line: 12, column: 14, scope: !52)
!54 = !DILocation(line: 12, column: 2, scope: !52)
!55 = !DILocation(line: 11, column: 8, scope: !52)
!56 = distinct !DISubprogram(name: "String from <:Array<Integer>>", linkageName: "String from <:Array<Integer>>", scope: !52, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!57 = !DILocation(line: 15, scope: !56)
!58 = distinct !DISubprogram(name: "<:ReferenceMut<String>> += <:String>", linkageName: "<:ReferenceMut<String>> += <:String>", scope: !56, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!59 = !DILocation(line: 7, column: 16, scope: !58)
!60 = !DILocation(line: 8, column: 2, scope: !58)
!61 = !DILocation(line: 8, column: 9, scope: !58)
!62 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> [ <:Integer> ]", linkageName: "<:Reference<Array<Integer>>> [ <:Integer> ]", scope: !56, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!63 = !DILocation(line: 15, scope: !62)
!64 = distinct !DISubprogram(name: "<:Integer> <= <:Integer>", linkageName: "<:Integer> <= <:Integer>", scope: !62, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!65 = !DILocation(line: 15, scope: !64)
!66 = distinct !DISubprogram(name: "<:Integer> > <:Integer>", linkageName: "<:Integer> > <:Integer>", scope: !64, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!67 = !DILocation(line: 15, scope: !66)
!68 = distinct !DISubprogram(name: "<:ReferenceMut<Integer>> += <:Integer>", linkageName: "<:ReferenceMut<Integer>> += <:Integer>", scope: !56, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!69 = !DILocation(line: 7, column: 16, scope: !68)
!70 = !DILocation(line: 8, column: 2, scope: !68)
!71 = !DILocation(line: 8, column: 9, scope: !68)
!72 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is not empty", linkageName: "<:Reference<Array<Integer>>> is not empty", scope: !56, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!73 = !DILocation(line: 15, scope: !72)
!74 = distinct !DISubprogram(name: "<:Reference<Array<Integer>>> is empty", linkageName: "<:Reference<Array<Integer>>> is empty", scope: !21, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!75 = !DILocation(line: 15, scope: !74)
!76 = distinct !DISubprogram(name: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", linkageName: "push <:Integer> to <:ReferenceMut<Array<Integer>>>", scope: !21, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!77 = !DILocation(line: 15, scope: !76)
!78 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !21, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!79 = !DILocation(line: 12, column: 14, scope: !78)
!80 = !DILocation(line: 12, column: 2, scope: !78)
!81 = !DILocation(line: 11, column: 8, scope: !78)
!82 = distinct !DISubprogram(name: "<:ReferenceMut<Array<Integer>>> [ <:Integer> ]", linkageName: "<:ReferenceMut<Array<Integer>>> [ <:Integer> ]", scope: !21, file: !2, line: 15, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!83 = !DILocation(line: 15, scope: !82)
!84 = distinct !DISubprogram(name: "initialize.6", linkageName: "initialize.6", scope: !21, file: !2, line: 10, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!85 = !DILocation(line: 10, column: 12, scope: !84)
