---
source: src/tests/mod.rs
expression: hir
---
type Point<T>:
	x: T
	y: T

let p: Point<Integer> = Point<Integer> { x: 1, y: 2 }
let x: Integer = `clone <:Reference<Integer>>`((p:Point<Integer>).x)
`println <:Bool>`(`<:Integer> == <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)), 1))
`destroy <:ReferenceMut<Integer>>`((x:Integer))

==MONOMORPHIZED==


fn String from <x: Bool> -> String:
	if (x:Bool):
		let $tmp@1314: String = "true"
		return ($tmp@1314:String)

	let $tmp@1329: String = "false"
	return ($tmp@1329:String)


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((x:Bool)))
	return ($tmp@176:None)
