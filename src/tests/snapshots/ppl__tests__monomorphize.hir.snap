---
source: src/tests/mod.rs
expression: hir
---
type Point<T>:
	x: T
	y: T

let p: Point<Integer> = Point<Integer> { x: 1, y: 2 }
let x: Integer = clone (p:Point<Integer>).x
println clone (x:Integer) == 1
destroy (x:Integer)

==MONOMORPHIZED==


fn String from <x: Bool> -> String:
	if (x:Bool):
		let $tmp@1245: String = "true"
		return ($tmp@1245:String)

	let $tmp@1260: String = "false"
	return ($tmp@1260:String)


fn<Bool> println <x: Bool> -> None:
	let $tmp@314: None = println String from (x:Bool)
	return ($tmp@314:None)
