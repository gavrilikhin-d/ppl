---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%String = type { ptr }
%Integer = type { ptr }
%Rational = type { ptr }
%"Type<Integer>" = type { ptr }
%"Type<Integer>Impl" = type { %String, %Integer }
%"Type<Array<Integer>>" = type { ptr }
%"Type<Array<Integer>>Impl" = type { %String, %Integer }

@0 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [7 x i8] c"World!\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@4 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@5 = private unnamed_addr constant [15 x i8] c"Array<Integer>\00", align 1

define void @main.execute() !dbg !3 {
  %1 = call %String @string_from_c_string_and_length(ptr @0, i64 5), !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 1), !dbg !8
  %3 = call %String @string_plus_string(%String %1, %String %2), !dbg !8
  %4 = call %String @string_from_c_string_and_length(ptr @2, i64 6), !dbg !9
  %5 = call %String @string_plus_string(%String %3, %String %4), !dbg !9
  call void @"println <:String>"(%String %5), !dbg !9
  %6 = call %String @"String from <:None>"(), !dbg !10
  call void @"println <:String>"(%String %6), !dbg !10
  %7 = call %String @"String from <:Bool>"(i1 false), !dbg !11
  call void @"println <:String>"(%String %7), !dbg !11
  %8 = call %String @"String from <:Bool>"(i1 true), !dbg !12
  call void @"println <:String>"(%String %8), !dbg !12
  %9 = call %Integer @integer_from_i64(i64 0), !dbg !13
  %10 = call %String @integer_as_string(%Integer %9), !dbg !13
  call void @"println <:String>"(%String %10), !dbg !13
  %11 = call %Rational @rational_from_c_string(ptr @3), !dbg !14
  %12 = call %String @rational_as_string(%Rational %11), !dbg !14
  call void @"println <:String>"(%String %12), !dbg !14
  %13 = alloca %"Type<Integer>", align 8, !dbg !15
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %13, i32 0, i32 0, !dbg !15
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !15
  %14 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !16
  store %String %14, ptr %"Type<Integer>.name", align 8, !dbg !16
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !16
  %15 = call %Integer @integer_from_i64(i64 8), !dbg !16
  store %Integer %15, ptr %"Type<Integer>.size", align 8, !dbg !16
  %16 = load %"Type<Integer>", ptr %13, align 8, !dbg !16
  %17 = call %String @"String from <:Type<Integer>>"(%"Type<Integer>" %16), !dbg !16
  call void @"println <:String>"(%String %17), !dbg !16
  %18 = alloca %"Type<Array<Integer>>", align 8, !dbg !17
  %"Type<Array<Integer>>.data" = getelementptr inbounds %"Type<Array<Integer>>", ptr %18, i32 0, i32 0, !dbg !17
  %"Type<Array<Integer>>.name" = getelementptr inbounds %"Type<Array<Integer>>Impl", ptr %"Type<Array<Integer>>.data", i32 0, i32 0, !dbg !17
  %19 = call %String @string_from_c_string_and_length(ptr @5, i64 14), !dbg !16
  store %String %19, ptr %"Type<Array<Integer>>.name", align 8, !dbg !16
  %"Type<Array<Integer>>.size" = getelementptr inbounds %"Type<Array<Integer>>Impl", ptr %"Type<Array<Integer>>.data", i32 0, i32 1, !dbg !16
  %20 = call %Integer @integer_from_i64(i64 8), !dbg !16
  store %Integer %20, ptr %"Type<Array<Integer>>.size", align 8, !dbg !16
  %21 = load %"Type<Array<Integer>>", ptr %18, align 8, !dbg !16
  %22 = call %String @"String from <:Type<Array<Integer>>>"(%"Type<Array<Integer>>" %21), !dbg !16
  call void @"println <:String>"(%String %22), !dbg !16
  br label %return, !dbg !16

return:                                           ; preds = %0
  ret void
}

declare void @"println <:String>"(%String)

declare %String @string_plus_string(%String, %String)

declare %String @string_from_c_string_and_length(ptr, i64)

declare %String @"String from <:None>"()

declare %String @"String from <:Bool>"(i1)

declare %String @integer_as_string(%Integer)

declare %Integer @integer_from_i64(i64)

declare %String @rational_as_string(%Rational)

declare %Rational @rational_from_c_string(ptr)

define private %String @"String from <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !18 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !19
  %name = getelementptr inbounds %"Type<Integer>Impl", ptr %2, i32 0, i32 0, !dbg !19
  %3 = call %String @clone_string(ptr %name), !dbg !19
  %"$tmp@4358" = alloca %String, align 8, !dbg !19
  store %String %3, ptr %"$tmp@4358", align 8, !dbg !19
  %4 = load %String, ptr %"$tmp@4358", align 8, !dbg !19
  store %String %4, ptr %return_value, align 8, !dbg !19
  br label %return, !dbg !19

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

declare %String @clone_string(ptr)

define private %String @"String from <:Type<Array<Integer>>>"(%"Type<Array<Integer>>" %0) !dbg !20 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Array<Integer>>", align 8
  store %"Type<Array<Integer>>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Array<Integer>>", ptr %ty, i32 0, i32 0, !dbg !21
  %name = getelementptr inbounds %"Type<Array<Integer>>Impl", ptr %2, i32 0, i32 0, !dbg !21
  %3 = call %String @clone_string(ptr %name), !dbg !21
  %"$tmp@4358" = alloca %String, align 8, !dbg !21
  store %String %3, ptr %"$tmp@4358", align 8, !dbg !21
  %4 = load %String, ptr %"$tmp@4358", align 8, !dbg !21
  store %String %4, ptr %return_value, align 8, !dbg !21
  br label %return, !dbg !21

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 8, scope: !3)
!8 = !DILocation(line: 0, column: 18, scope: !3)
!9 = !DILocation(line: 0, column: 24, scope: !3)
!10 = !DILocation(line: 1, column: 21, scope: !3)
!11 = !DILocation(line: 2, column: 21, scope: !3)
!12 = !DILocation(line: 3, column: 21, scope: !3)
!13 = !DILocation(line: 4, column: 21, scope: !3)
!14 = !DILocation(line: 5, column: 21, scope: !3)
!15 = !DILocation(line: 6, column: 21, scope: !3)
!16 = !DILocation(line: 0, scope: !3)
!17 = !DILocation(line: 7, column: 21, scope: !3)
!18 = distinct !DISubprogram(name: "String from <:Type<Integer>>", linkageName: "String from <:Type<Integer>>", scope: !3, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!19 = !DILocation(line: 7, column: 36, scope: !18)
!20 = distinct !DISubprogram(name: "String from <:Type<Array<Integer>>>", linkageName: "String from <:Type<Array<Integer>>>", scope: !3, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!21 = !DILocation(line: 7, column: 36, scope: !20)
