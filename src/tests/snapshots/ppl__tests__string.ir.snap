---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%"Type<MemoryAddress>" = type { %String, %Integer }
%"Type<I32>" = type { %String, %Integer }
%"Type<F64>" = type { %String, %Integer }
%"Type<Integer>" = type { %String, %Integer }
%"Type<Array<Integer>>" = type { %String, %Integer }
%Rational = type { ptr }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@"Type<MemoryAddress>" = private global %"Type<MemoryAddress>" zeroinitializer
@1 = private unnamed_addr constant [14 x i8] c"MemoryAddress\00", align 1
@"Type<I32>" = private global %"Type<I32>" zeroinitializer
@2 = private unnamed_addr constant [4 x i8] c"I32\00", align 1
@"Type<F64>" = private global %"Type<F64>" zeroinitializer
@3 = private unnamed_addr constant [4 x i8] c"F64\00", align 1
@"Type<Integer>" = private global %"Type<Integer>" zeroinitializer
@4 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@"Type<Array<Integer>>" = private global %"Type<Array<Integer>>" zeroinitializer
@5 = private unnamed_addr constant [15 x i8] c"Array<Integer>\00", align 1
@"$tmp@8" = global %String zeroinitializer
@6 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@8 = private unnamed_addr constant [7 x i8] c"World!\00", align 1
@"$tmp@42" = global %String zeroinitializer
@"$tmp@69" = global %String zeroinitializer
@"$tmp@97" = global %String zeroinitializer
@"$tmp@124" = global %String zeroinitializer
@"$tmp@148" = global %String zeroinitializer
@9 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@"$tmp@174" = global %String zeroinitializer
@"$tmp@204" = global %String zeroinitializer

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private void @initialize.1() !dbg !9 {
  %1 = alloca %"Type<MemoryAddress>", align 8, !dbg !10
  %"Type<MemoryAddress>.name" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 0, !dbg !10
  %2 = call %String @string_from_c_string_and_length(ptr @1, i64 13), !dbg !11
  store %String %2, ptr %"Type<MemoryAddress>.name", align 8, !dbg !11
  %"Type<MemoryAddress>.size" = getelementptr inbounds %"Type<MemoryAddress>", ptr %1, i32 0, i32 1, !dbg !11
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !11
  store %Integer %3, ptr %"Type<MemoryAddress>.size", align 8, !dbg !11
  %4 = load %"Type<MemoryAddress>", ptr %1, align 8, !dbg !11
  store %"Type<MemoryAddress>" %4, ptr @"Type<MemoryAddress>", align 8, !dbg !11
  br label %return, !dbg !11

return:                                           ; preds = %0
  ret void
}

define private void @initialize.2() !dbg !12 {
  %1 = alloca %"Type<I32>", align 8, !dbg !13
  %"Type<I32>.name" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 0, !dbg !13
  %2 = call %String @string_from_c_string_and_length(ptr @2, i64 3), !dbg !14
  store %String %2, ptr %"Type<I32>.name", align 8, !dbg !14
  %"Type<I32>.size" = getelementptr inbounds %"Type<I32>", ptr %1, i32 0, i32 1, !dbg !14
  %3 = call %Integer @integer_from_i64(i64 4), !dbg !14
  store %Integer %3, ptr %"Type<I32>.size", align 8, !dbg !14
  %4 = load %"Type<I32>", ptr %1, align 8, !dbg !14
  store %"Type<I32>" %4, ptr @"Type<I32>", align 8, !dbg !14
  br label %return, !dbg !14

return:                                           ; preds = %0
  ret void
}

define private void @initialize.3() !dbg !15 {
  %1 = alloca %"Type<F64>", align 8, !dbg !16
  %"Type<F64>.name" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 0, !dbg !16
  %2 = call %String @string_from_c_string_and_length(ptr @3, i64 3), !dbg !17
  store %String %2, ptr %"Type<F64>.name", align 8, !dbg !17
  %"Type<F64>.size" = getelementptr inbounds %"Type<F64>", ptr %1, i32 0, i32 1, !dbg !17
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !17
  store %Integer %3, ptr %"Type<F64>.size", align 8, !dbg !17
  %4 = load %"Type<F64>", ptr %1, align 8, !dbg !17
  store %"Type<F64>" %4, ptr @"Type<F64>", align 8, !dbg !17
  br label %return, !dbg !17

return:                                           ; preds = %0
  ret void
}

define private void @initialize.4() !dbg !18 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !19
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !19
  %2 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !20
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !20
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 1, !dbg !20
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !20
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !20
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !20
  store %"Type<Integer>" %4, ptr @"Type<Integer>", align 8, !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %0
  ret void
}

define private void @initialize.5() !dbg !21 {
  %1 = alloca %"Type<Array<Integer>>", align 8, !dbg !22
  %"Type<Array<Integer>>.name" = getelementptr inbounds %"Type<Array<Integer>>", ptr %1, i32 0, i32 0, !dbg !22
  %2 = call %String @string_from_c_string_and_length(ptr @5, i64 14), !dbg !23
  store %String %2, ptr %"Type<Array<Integer>>.name", align 8, !dbg !23
  %"Type<Array<Integer>>.size" = getelementptr inbounds %"Type<Array<Integer>>", ptr %1, i32 0, i32 1, !dbg !23
  %3 = call %Integer @integer_from_i64(i64 24), !dbg !23
  store %Integer %3, ptr %"Type<Array<Integer>>.size", align 8, !dbg !23
  %4 = load %"Type<Array<Integer>>", ptr %1, align 8, !dbg !23
  store %"Type<Array<Integer>>" %4, ptr @"Type<Array<Integer>>", align 8, !dbg !23
  br label %return, !dbg !23

return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !24 {
  call void @initialize(), !dbg !25
  call void @initialize.1(), !dbg !26
  call void @initialize.2(), !dbg !27
  call void @initialize.3(), !dbg !28
  call void @initialize.4(), !dbg !29
  call void @initialize.5(), !dbg !30
  call void @initialize.6(), !dbg !31
  call void @"println <:Reference<String>>"(ptr @"$tmp@8"), !dbg !31
  call void @initialize.7(), !dbg !32
  call void @"println <:Reference<String>>"(ptr @"$tmp@42"), !dbg !32
  call void @initialize.8(), !dbg !33
  call void @"println <:Reference<String>>"(ptr @"$tmp@69"), !dbg !33
  call void @initialize.9(), !dbg !34
  call void @"println <:Reference<String>>"(ptr @"$tmp@97"), !dbg !34
  call void @initialize.10(), !dbg !35
  call void @"println <:Reference<String>>"(ptr @"$tmp@124"), !dbg !35
  call void @initialize.11(), !dbg !36
  call void @"println <:Reference<String>>"(ptr @"$tmp@148"), !dbg !36
  call void @initialize.12(), !dbg !37
  call void @"println <:Reference<String>>"(ptr @"$tmp@174"), !dbg !37
  call void @initialize.13(), !dbg !38
  call void @"println <:Reference<String>>"(ptr @"$tmp@204"), !dbg !38
  call void @destroy_string(ptr @"$tmp@8"), !dbg !31
  call void @destroy_string(ptr @"$tmp@42"), !dbg !32
  call void @destroy_string(ptr @"$tmp@69"), !dbg !33
  call void @destroy_string(ptr @"$tmp@97"), !dbg !34
  call void @destroy_string(ptr @"$tmp@124"), !dbg !35
  call void @destroy_string(ptr @"$tmp@148"), !dbg !36
  call void @destroy_string(ptr @"$tmp@174"), !dbg !37
  call void @destroy_string(ptr @"$tmp@204"), !dbg !38
  br label %return, !dbg !38

return:                                           ; preds = %0
  ret void
}

define private void @initialize.6() !dbg !39 {
  %1 = call %String @string_from_c_string_and_length(ptr @6, i64 5), !dbg !40
  %2 = call %String @string_from_c_string_and_length(ptr @7, i64 1), !dbg !41
  %3 = call %String @string_plus_string(%String %1, %String %2), !dbg !41
  %4 = call %String @string_from_c_string_and_length(ptr @8, i64 6), !dbg !42
  %5 = call %String @string_plus_string(%String %3, %String %4), !dbg !42
  store %String %5, ptr @"$tmp@8", align 8, !dbg !42
  br label %return, !dbg !42

return:                                           ; preds = %0
  ret void
}

declare %String @string_plus_string(%String, %String)

declare void @"println <:Reference<String>>"(ptr)

define private void @initialize.7() !dbg !43 {
  %1 = call %String @"String from <:None>"(), !dbg !44
  store %String %1, ptr @"$tmp@42", align 8, !dbg !44
  br label %return, !dbg !44

return:                                           ; preds = %0
  ret void
}

declare %String @"String from <:None>"()

define private void @initialize.8() !dbg !45 {
  %1 = call %String @"String from <:Bool>"(i1 false), !dbg !46
  store %String %1, ptr @"$tmp@69", align 8, !dbg !46
  br label %return, !dbg !46

return:                                           ; preds = %0
  ret void
}

declare %String @"String from <:Bool>"(i1)

define private void @initialize.9() !dbg !47 {
  %1 = call %String @"String from <:Bool>"(i1 true), !dbg !48
  store %String %1, ptr @"$tmp@97", align 8, !dbg !48
  br label %return, !dbg !48

return:                                           ; preds = %0
  ret void
}

define private void @initialize.10() !dbg !49 {
  %1 = call %Integer @integer_from_i64(i64 0), !dbg !50
  %2 = call %String @integer_as_string(%Integer %1), !dbg !50
  store %String %2, ptr @"$tmp@124", align 8, !dbg !50
  br label %return, !dbg !50

return:                                           ; preds = %0
  ret void
}

declare %String @integer_as_string(%Integer)

define private void @initialize.11() !dbg !51 {
  %1 = call %Rational @rational_from_c_string(ptr @9), !dbg !52
  %2 = call %String @rational_as_string(%Rational %1), !dbg !52
  store %String %2, ptr @"$tmp@148", align 8, !dbg !52
  br label %return, !dbg !52

return:                                           ; preds = %0
  ret void
}

declare %String @rational_as_string(%Rational)

declare %Rational @rational_from_c_string(ptr)

define private void @initialize.12() !dbg !53 {
  %1 = load %"Type<Integer>", ptr @"Type<Integer>", align 8, !dbg !54
  %2 = call %String @"String from <:Type<Integer>>"(%"Type<Integer>" %1), !dbg !54
  store %String %2, ptr @"$tmp@174", align 8, !dbg !54
  br label %return, !dbg !54

return:                                           ; preds = %0
  ret void
}

define private %String @"String from <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !55 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %name = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !56
  %2 = call %String @clone_string(ptr %name), !dbg !56
  %"$tmp@4518" = alloca %String, align 8, !dbg !56
  store %String %2, ptr %"$tmp@4518", align 8, !dbg !56
  %3 = load %String, ptr %"$tmp@4518", align 8, !dbg !56
  store %String %3, ptr %return_value, align 8, !dbg !56
  br label %return, !dbg !56

return:                                           ; preds = %1
  %4 = load %String, ptr %return_value, align 8
  ret %String %4
}

declare %String @clone_string(ptr)

define private void @initialize.13() !dbg !57 {
  %1 = load %"Type<Array<Integer>>", ptr @"Type<Array<Integer>>", align 8, !dbg !58
  %2 = call %String @"String from <:Type<Array<Integer>>>"(%"Type<Array<Integer>>" %1), !dbg !58
  store %String %2, ptr @"$tmp@204", align 8, !dbg !58
  br label %return, !dbg !58

return:                                           ; preds = %0
  ret void
}

define private %String @"String from <:Type<Array<Integer>>>"(%"Type<Array<Integer>>" %0) !dbg !59 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Array<Integer>>", align 8
  store %"Type<Array<Integer>>" %0, ptr %ty, align 8
  %name = getelementptr inbounds %"Type<Array<Integer>>", ptr %ty, i32 0, i32 0, !dbg !60
  %2 = call %String @clone_string(ptr %name), !dbg !60
  %"$tmp@4518" = alloca %String, align 8, !dbg !60
  store %String %2, ptr %"$tmp@4518", align 8, !dbg !60
  %3 = load %String, ptr %"$tmp@4518", align 8, !dbg !60
  store %String %3, ptr %return_value, align 8, !dbg !60
  br label %return, !dbg !60

return:                                           ; preds = %1
  %4 = load %String, ptr %return_value, align 8
  ret %String %4
}

declare void @destroy_string(ptr)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 4, column: 20, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 7, column: 36, scope: !9)
!11 = !DILocation(line: 0, scope: !9)
!12 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !2, file: !2, line: 2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!13 = !DILocation(line: 2, column: 3, scope: !12)
!14 = !DILocation(line: 0, scope: !12)
!15 = distinct !DISubprogram(name: "initialize.3", linkageName: "initialize.3", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!16 = !DILocation(line: 1, column: 25, scope: !15)
!17 = !DILocation(line: 0, scope: !15)
!18 = distinct !DISubprogram(name: "initialize.4", linkageName: "initialize.4", scope: !2, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!19 = !DILocation(line: 6, column: 21, scope: !18)
!20 = !DILocation(line: 0, scope: !18)
!21 = distinct !DISubprogram(name: "initialize.5", linkageName: "initialize.5", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!22 = !DILocation(line: 7, column: 21, scope: !21)
!23 = !DILocation(line: 0, scope: !21)
!24 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 4, column: 20, scope: !24)
!26 = !DILocation(line: 7, column: 36, scope: !24)
!27 = !DILocation(line: 2, column: 3, scope: !24)
!28 = !DILocation(line: 1, column: 25, scope: !24)
!29 = !DILocation(line: 6, column: 21, scope: !24)
!30 = !DILocation(line: 7, column: 21, scope: !24)
!31 = !DILocation(line: 0, column: 8, scope: !24)
!32 = !DILocation(line: 1, column: 9, scope: !24)
!33 = !DILocation(line: 2, column: 9, scope: !24)
!34 = !DILocation(line: 3, column: 9, scope: !24)
!35 = !DILocation(line: 4, column: 9, scope: !24)
!36 = !DILocation(line: 5, column: 9, scope: !24)
!37 = !DILocation(line: 6, column: 9, scope: !24)
!38 = !DILocation(line: 7, column: 9, scope: !24)
!39 = distinct !DISubprogram(name: "initialize.6", linkageName: "initialize.6", scope: !24, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!40 = !DILocation(line: 0, column: 8, scope: !39)
!41 = !DILocation(line: 0, column: 18, scope: !39)
!42 = !DILocation(line: 0, column: 24, scope: !39)
!43 = distinct !DISubprogram(name: "initialize.7", linkageName: "initialize.7", scope: !24, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!44 = !DILocation(line: 1, column: 21, scope: !43)
!45 = distinct !DISubprogram(name: "initialize.8", linkageName: "initialize.8", scope: !24, file: !2, line: 2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!46 = !DILocation(line: 2, column: 21, scope: !45)
!47 = distinct !DISubprogram(name: "initialize.9", linkageName: "initialize.9", scope: !24, file: !2, line: 3, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!48 = !DILocation(line: 3, column: 21, scope: !47)
!49 = distinct !DISubprogram(name: "initialize.10", linkageName: "initialize.10", scope: !24, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!50 = !DILocation(line: 4, column: 21, scope: !49)
!51 = distinct !DISubprogram(name: "initialize.11", linkageName: "initialize.11", scope: !24, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!52 = !DILocation(line: 5, column: 21, scope: !51)
!53 = distinct !DISubprogram(name: "initialize.12", linkageName: "initialize.12", scope: !24, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!54 = !DILocation(line: 6, column: 21, scope: !53)
!55 = distinct !DISubprogram(name: "String from <:Type<Integer>>", linkageName: "String from <:Type<Integer>>", scope: !53, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!56 = !DILocation(line: 7, column: 36, scope: !55)
!57 = distinct !DISubprogram(name: "initialize.13", linkageName: "initialize.13", scope: !24, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!58 = !DILocation(line: 7, column: 21, scope: !57)
!59 = distinct !DISubprogram(name: "String from <:Type<Array<Integer>>>", linkageName: "String from <:Type<Array<Integer>>>", scope: !57, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!60 = !DILocation(line: 7, column: 36, scope: !59)
