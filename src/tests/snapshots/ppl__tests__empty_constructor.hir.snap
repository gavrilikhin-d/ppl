---
source: src/tests/mod.rs
expression: hir
---
type A
let a: A = A {  }
`println <:Type<A>>`(`type of <:A>`((copy a:A)))

==MONOMORPHIZED==


fn<A> type of <$arg0: A> -> Type<A>:
	let $tmp@4643: Type<A> = (copy Type<A>:Type<A>)
	return ($tmp@4643:Type<A>)


fn<A> String from <ty: Type<A>> -> String:
	let $tmp@4518: String = `clone <:Reference<String>>`((ty:Type<A>).name)
	return ($tmp@4518:String)


fn println <x: Type<A>> -> None:
	let $tmp@185: String = `String from <:Type<A>>`((copy x:Type<A>))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)
