---
source: src/tests/mod.rs
expression: hir
---
type A
let a: A = A {  }
`println <:Type<A>>`(`type of <:A>`((copy a:A)))

==MONOMORPHIZED==


fn<A> type of <$arg0: A> -> Type<A>:
	let $tmp@4640: Type<A> = (copy Type<A>:Type<A>)
	return ($tmp@4640:Type<A>)


fn<A> String from <ty: Type<A>> -> String:
	let $tmp@4515: String = `clone <:Reference<String>>`((ty:Type<A>).name)
	return ($tmp@4515:String)


fn println <x: Type<A>> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Type<A>>`((copy x:Type<A>)))
	return ($tmp@176:None)
