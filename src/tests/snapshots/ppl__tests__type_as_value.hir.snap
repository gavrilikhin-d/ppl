---
source: src/tests/mod.rs
expression: hir
---
`println <:Bool>`(`<:Integer> == <:Integer>`(`size of <:Type<None>>`((Type<None>:Type<None>)), 0))
`println <:Bool>`(`<:Integer> == <:Integer>`(`size of <:Type<Bool>>`((Type<Bool>:Type<Bool>)), 1))
`println <:String>`(`String from <:Type<None>>`((Type<None>:Type<None>)))
`println <:String>`(`String from <:Type<Type<Integer>>>`((Type<Type<Integer>>:Type<Type<Integer>>)))
let x: Type<Integer> = (Type<Integer>:Type<Integer>)
let y: Integer = `clone <:Reference<Integer>>`((Type<Integer>:Type<Integer>).size)
`println <:Bool>`(`<:Integer> == <:Integer>`(`clone <:Reference<Integer>>`((y:Integer)), `size of <:Type<Integer>>`((Type<Integer>:Type<Integer>))))
`println <:Type<Integer>>`((Type<Integer>:Type<Integer>))
`destroy <:ReferenceMut<Integer>>`((y:Integer))

==MONOMORPHIZED==


fn<None> size of <ty: Type<None>> -> Integer:
	let $tmp@4252: Integer = `clone <:Reference<Integer>>`((ty:Type<None>).size)
	return ($tmp@4252:Integer)


fn String from <x: Bool> -> String:
	if (x:Bool):
		let $tmp@1245: String = "true"
		return ($tmp@1245:String)

	let $tmp@1260: String = "false"
	return ($tmp@1260:String)


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((x:Bool)))
	return ($tmp@176:None)



fn<Bool> size of <ty: Type<Bool>> -> Integer:
	let $tmp@4252: Integer = `clone <:Reference<Integer>>`((ty:Type<Bool>).size)
	return ($tmp@4252:Integer)


fn String from <x: Bool> -> String:
	if (x:Bool):
		let $tmp@1245: String = "true"
		return ($tmp@1245:String)

	let $tmp@1260: String = "false"
	return ($tmp@1260:String)


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((x:Bool)))
	return ($tmp@176:None)



fn<None> String from <ty: Type<None>> -> String:
	let $tmp@4184: String = `clone <:Reference<String>>`((ty:Type<None>).name)
	return ($tmp@4184:String)


fn<Type<Integer>> String from <ty: Type<Type<Integer>>> -> String:
	let $tmp@4184: String = `clone <:Reference<String>>`((ty:Type<Type<Integer>>).name)
	return ($tmp@4184:String)


fn<Integer> size of <ty: Type<Integer>> -> Integer:
	let $tmp@4252: Integer = `clone <:Reference<Integer>>`((ty:Type<Integer>).size)
	return ($tmp@4252:Integer)


fn String from <x: Bool> -> String:
	if (x:Bool):
		let $tmp@1245: String = "true"
		return ($tmp@1245:String)

	let $tmp@1260: String = "false"
	return ($tmp@1260:String)


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((x:Bool)))
	return ($tmp@176:None)



fn<Integer> String from <ty: Type<Integer>> -> String:
	let $tmp@4184: String = `clone <:Reference<String>>`((ty:Type<Integer>).name)
	return ($tmp@4184:String)


fn println <x: Type<Integer>> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Type<Integer>>`((x:Type<Integer>)))
	return ($tmp@176:None)
