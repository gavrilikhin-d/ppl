---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define %Integer @"<:Integer> plus two"(%Integer %0) !dbg !9 {
  %return_value = alloca %Integer, align 8
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !10
  %3 = call %Integer @clone_integer(%Integer %2), !dbg !10
  %"$tmp0@32" = alloca %Integer, align 8, !dbg !10
  store %Integer %3, ptr %"$tmp0@32", align 8, !dbg !10
  %4 = call %Integer @integer_from_i64(i64 2), !dbg !11
  %"$tmp1@34" = alloca %Integer, align 8, !dbg !11
  store %Integer %4, ptr %"$tmp1@34", align 8, !dbg !11
  %5 = load %Integer, ptr %"$tmp0@32", align 8, !dbg !10
  %6 = load %Integer, ptr %"$tmp1@34", align 8, !dbg !11
  %7 = call %Integer @"sum <:Integer> <:Integer>"(%Integer %5, %Integer %6), !dbg !11
  %"$tmp2@28" = alloca %Integer, align 8, !dbg !11
  store %Integer %7, ptr %"$tmp2@28", align 8, !dbg !11
  %8 = load %Integer, ptr %"$tmp2@28", align 8, !dbg !12
  store %Integer %8, ptr %return_value, align 8, !dbg !12
  br label %return, !dbg !12

return:                                           ; preds = %1
  %9 = load %Integer, ptr %return_value, align 8
  ret %Integer %9
}

declare %Integer @clone_integer(%Integer)

define %Integer @"sum <:Integer> <:Integer>"(%Integer %0, %Integer %1) !dbg !13 {
  %return_value = alloca %Integer, align 8
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %y = alloca %Integer, align 8
  store %Integer %1, ptr %y, align 8
  %3 = load %Integer, ptr %x, align 8, !dbg !14
  %4 = call %Integer @clone_integer(%Integer %3), !dbg !14
  %"$tmp0@84" = alloca %Integer, align 8, !dbg !14
  store %Integer %4, ptr %"$tmp0@84", align 8, !dbg !14
  %5 = load %Integer, ptr %y, align 8, !dbg !15
  %6 = call %Integer @clone_integer(%Integer %5), !dbg !15
  %"$tmp1@88" = alloca %Integer, align 8, !dbg !15
  store %Integer %6, ptr %"$tmp1@88", align 8, !dbg !15
  %7 = load %Integer, ptr %"$tmp0@84", align 8, !dbg !14
  %8 = load %Integer, ptr %"$tmp1@88", align 8, !dbg !15
  %9 = call %Integer @integer_plus_integer(%Integer %7, %Integer %8), !dbg !15
  %"$tmp2@84" = alloca %Integer, align 8, !dbg !15
  store %Integer %9, ptr %"$tmp2@84", align 8, !dbg !15
  %10 = load %Integer, ptr %"$tmp2@84", align 8, !dbg !14
  store %Integer %10, ptr %return_value, align 8, !dbg !14
  br label %return, !dbg !14

return:                                           ; preds = %2
  %11 = load %Integer, ptr %return_value, align 8
  ret %Integer %11
}

declare %Integer @"sum <:Integer> <:Integer>.1"(%Integer, %Integer)

declare %Integer @integer_plus_integer(%Integer, %Integer)

define void @main.execute() !dbg !16 {
init_globals:
  call void @initialize(), !dbg !17
  br label %0, !dbg !17

0:                                                ; preds = %init_globals
  %1 = call %Integer @integer_from_i64(i64 2), !dbg !18
  %"$tmp0@100" = alloca %Integer, align 8, !dbg !18
  store %Integer %1, ptr %"$tmp0@100", align 8, !dbg !18
  %2 = load %Integer, ptr %"$tmp0@100", align 8, !dbg !18
  %3 = call %Integer @"<:Integer> plus two"(%Integer %2), !dbg !18
  %"$tmp1@100" = alloca %Integer, align 8, !dbg !18
  store %Integer %3, ptr %"$tmp1@100", align 8, !dbg !18
  %4 = load %Integer, ptr %"$tmp1@100", align 8, !dbg !18
  call void @"println <:Integer>"(%Integer %4), !dbg !18
  br label %return, !dbg !17

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Integer>"(%Integer %0) !dbg !19 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !20
  %3 = call %String @integer_as_string(%Integer %2), !dbg !20
  %"$tmp0@4557" = alloca %String, align 8, !dbg !20
  store %String %3, ptr %"$tmp0@4557", align 8, !dbg !20
  %4 = load %String, ptr %"$tmp0@4557", align 8, !dbg !20
  call void @"println <:String>"(%String %4), !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %1
  ret void
}

declare %String @integer_as_string(%Integer)

declare void @"println <:String>"(%String)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 4, column: 20, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "<:Integer> plus two", linkageName: "<:Integer> plus two", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 32, scope: !9)
!11 = !DILocation(line: 0, column: 34, scope: !9)
!12 = !DILocation(line: 0, column: 28, scope: !9)
!13 = distinct !DISubprogram(name: "sum <:Integer> <:Integer>", linkageName: "sum <:Integer> <:Integer>", scope: !2, file: !2, line: 2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!14 = !DILocation(line: 2, column: 47, scope: !13)
!15 = !DILocation(line: 2, column: 51, scope: !13)
!16 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!17 = !DILocation(line: 4, column: 20, scope: !16)
!18 = !DILocation(line: 4, column: 9, scope: !16)
!19 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !16, file: !2, line: 4, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!20 = !DILocation(line: 4, column: 20, scope: !19)
