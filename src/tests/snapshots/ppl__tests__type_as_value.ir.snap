---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<Integer>" = type { ptr }
%Integer = type { ptr }
%"Type<None>" = type { ptr }
%"Type<None>Impl" = type { %String, %Integer }
%String = type { ptr }
%"Type<Bool>" = type { ptr }
%"Type<Bool>Impl" = type { %String, %Integer }
%"Type<Type<Integer>>" = type { ptr }
%"Type<Type<Integer>>Impl" = type { %String, %Integer }
%"Type<Integer>Impl" = type { %String, %Integer }

@0 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"Bool\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"None\00", align 1
@3 = private unnamed_addr constant [14 x i8] c"Type<Integer>\00", align 1
@x = global %"Type<Integer>" zeroinitializer
@4 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@y = global %Integer zeroinitializer
@5 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@6 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@7 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1

define void @main.execute() !dbg !3 {
  %1 = alloca %"Type<None>", align 8, !dbg !7
  %"Type<None>.data" = getelementptr inbounds %"Type<None>", ptr %1, i32 0, i32 0, !dbg !7
  %"Type<None>.name" = getelementptr inbounds %"Type<None>Impl", ptr %"Type<None>.data", i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 4), !dbg !8
  store %String %2, ptr %"Type<None>.name", align 8, !dbg !8
  %"Type<None>.size" = getelementptr inbounds %"Type<None>Impl", ptr %"Type<None>.data", i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 0), !dbg !8
  store %Integer %3, ptr %"Type<None>.size", align 8, !dbg !8
  %4 = load %"Type<None>", ptr %1, align 8, !dbg !8
  %5 = call %Integer @"size of <:Type<None>>"(%"Type<None>" %4), !dbg !8
  %6 = call %Integer @integer_from_i64(i64 0), !dbg !9
  %7 = call i1 @integer_eq_integer(%Integer %5, %Integer %6), !dbg !9
  call void @"println <:Bool>"(i1 %7), !dbg !9
  %8 = alloca %"Type<Bool>", align 8, !dbg !10
  %"Type<Bool>.data" = getelementptr inbounds %"Type<Bool>", ptr %8, i32 0, i32 0, !dbg !10
  %"Type<Bool>.name" = getelementptr inbounds %"Type<Bool>Impl", ptr %"Type<Bool>.data", i32 0, i32 0, !dbg !10
  %9 = call %String @string_from_c_string_and_length(ptr @1, i64 4), !dbg !8
  store %String %9, ptr %"Type<Bool>.name", align 8, !dbg !8
  %"Type<Bool>.size" = getelementptr inbounds %"Type<Bool>Impl", ptr %"Type<Bool>.data", i32 0, i32 1, !dbg !8
  %10 = call %Integer @integer_from_i64(i64 1), !dbg !8
  store %Integer %10, ptr %"Type<Bool>.size", align 8, !dbg !8
  %11 = load %"Type<Bool>", ptr %8, align 8, !dbg !8
  %12 = call %Integer @"size of <:Type<Bool>>"(%"Type<Bool>" %11), !dbg !8
  %13 = call %Integer @integer_from_i64(i64 1), !dbg !11
  %14 = call i1 @integer_eq_integer(%Integer %12, %Integer %13), !dbg !11
  call void @"println <:Bool>"(i1 %14), !dbg !11
  %15 = alloca %"Type<None>", align 8, !dbg !12
  %"Type<None>.data1" = getelementptr inbounds %"Type<None>", ptr %15, i32 0, i32 0, !dbg !12
  %"Type<None>.name2" = getelementptr inbounds %"Type<None>Impl", ptr %"Type<None>.data1", i32 0, i32 0, !dbg !12
  %16 = call %String @string_from_c_string_and_length(ptr @2, i64 4), !dbg !8
  store %String %16, ptr %"Type<None>.name2", align 8, !dbg !8
  %"Type<None>.size3" = getelementptr inbounds %"Type<None>Impl", ptr %"Type<None>.data1", i32 0, i32 1, !dbg !8
  %17 = call %Integer @integer_from_i64(i64 0), !dbg !8
  store %Integer %17, ptr %"Type<None>.size3", align 8, !dbg !8
  %18 = load %"Type<None>", ptr %15, align 8, !dbg !8
  %19 = call %String @"String from <:Type<None>>"(%"Type<None>" %18), !dbg !8
  call void @"println <:String>"(%String %19), !dbg !8
  %20 = alloca %"Type<Type<Integer>>", align 8, !dbg !13
  %"Type<Type<Integer>>.data" = getelementptr inbounds %"Type<Type<Integer>>", ptr %20, i32 0, i32 0, !dbg !13
  %"Type<Type<Integer>>.name" = getelementptr inbounds %"Type<Type<Integer>>Impl", ptr %"Type<Type<Integer>>.data", i32 0, i32 0, !dbg !13
  %21 = call %String @string_from_c_string_and_length(ptr @3, i64 13), !dbg !8
  store %String %21, ptr %"Type<Type<Integer>>.name", align 8, !dbg !8
  %"Type<Type<Integer>>.size" = getelementptr inbounds %"Type<Type<Integer>>Impl", ptr %"Type<Type<Integer>>.data", i32 0, i32 1, !dbg !8
  %22 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %22, ptr %"Type<Type<Integer>>.size", align 8, !dbg !8
  %23 = load %"Type<Type<Integer>>", ptr %20, align 8, !dbg !8
  %24 = call %String @"String from <:Type<Type<Integer>>>"(%"Type<Type<Integer>>" %23), !dbg !8
  call void @"println <:String>"(%String %24), !dbg !8
  call void @initialize(), !dbg !14
  call void @initialize.1(), !dbg !15
  %25 = call %Integer @clone_integer(ptr @y), !dbg !16
  %26 = alloca %"Type<Integer>", align 8, !dbg !17
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %26, i32 0, i32 0, !dbg !17
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !17
  %27 = call %String @string_from_c_string_and_length(ptr @6, i64 7), !dbg !8
  store %String %27, ptr %"Type<Integer>.name", align 8, !dbg !8
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !8
  %28 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %28, ptr %"Type<Integer>.size", align 8, !dbg !8
  %29 = load %"Type<Integer>", ptr %26, align 8, !dbg !8
  %30 = call %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %29), !dbg !8
  %31 = call i1 @integer_eq_integer(%Integer %25, %Integer %30), !dbg !8
  call void @"println <:Bool>"(i1 %31), !dbg !8
  %32 = alloca %"Type<Integer>", align 8, !dbg !18
  %"Type<Integer>.data4" = getelementptr inbounds %"Type<Integer>", ptr %32, i32 0, i32 0, !dbg !18
  %"Type<Integer>.name5" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data4", i32 0, i32 0, !dbg !18
  %33 = call %String @string_from_c_string_and_length(ptr @7, i64 7), !dbg !8
  store %String %33, ptr %"Type<Integer>.name5", align 8, !dbg !8
  %"Type<Integer>.size6" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data4", i32 0, i32 1, !dbg !8
  %34 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %34, ptr %"Type<Integer>.size6", align 8, !dbg !8
  %35 = load %"Type<Integer>", ptr %32, align 8, !dbg !8
  call void @"println <:Type<Integer>>"(%"Type<Integer>" %35), !dbg !8
  call void @destroy_integer(ptr @y), !dbg !19
  br label %return, !dbg !19

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Bool>"(i1 %0) !dbg !20 {
  %x = alloca i1, align 1
  store i1 %0, ptr %x, align 1
  %2 = load i1, ptr %x, align 1, !dbg !21
  %3 = call %String @"String from <:Bool>"(i1 %2), !dbg !21
  call void @"println <:String>"(%String %3), !dbg !21
  br label %return, !dbg !22

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @"String from <:Bool>"(i1)

declare i1 @integer_eq_integer(%Integer, %Integer)

define private %Integer @"size of <:Type<None>>"(%"Type<None>" %0) !dbg !23 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<None>", align 8
  store %"Type<None>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<None>", ptr %ty, i32 0, i32 0, !dbg !24
  %size = getelementptr inbounds %"Type<None>Impl", ptr %2, i32 0, i32 1, !dbg !24
  %3 = call %Integer @clone_integer(ptr %size), !dbg !24
  %"$tmp@4252" = alloca %Integer, align 8, !dbg !24
  store %Integer %3, ptr %"$tmp@4252", align 8, !dbg !24
  %4 = load %Integer, ptr %"$tmp@4252", align 8, !dbg !24
  store %Integer %4, ptr %return_value, align 8, !dbg !24
  br label %return, !dbg !24

return:                                           ; preds = %1
  %5 = load %Integer, ptr %return_value, align 8
  ret %Integer %5
}

declare %Integer @clone_integer(ptr)

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define private %Integer @"size of <:Type<Bool>>"(%"Type<Bool>" %0) !dbg !25 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Bool>", align 8
  store %"Type<Bool>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Bool>", ptr %ty, i32 0, i32 0, !dbg !26
  %size = getelementptr inbounds %"Type<Bool>Impl", ptr %2, i32 0, i32 1, !dbg !26
  %3 = call %Integer @clone_integer(ptr %size), !dbg !26
  %"$tmp@4252" = alloca %Integer, align 8, !dbg !26
  store %Integer %3, ptr %"$tmp@4252", align 8, !dbg !26
  %4 = load %Integer, ptr %"$tmp@4252", align 8, !dbg !26
  store %Integer %4, ptr %return_value, align 8, !dbg !26
  br label %return, !dbg !26

return:                                           ; preds = %1
  %5 = load %Integer, ptr %return_value, align 8
  ret %Integer %5
}

define private %String @"String from <:Type<None>>"(%"Type<None>" %0) !dbg !27 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<None>", align 8
  store %"Type<None>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<None>", ptr %ty, i32 0, i32 0, !dbg !28
  %name = getelementptr inbounds %"Type<None>Impl", ptr %2, i32 0, i32 0, !dbg !28
  %3 = call %String @clone_string(ptr %name), !dbg !28
  %"$tmp@4184" = alloca %String, align 8, !dbg !28
  store %String %3, ptr %"$tmp@4184", align 8, !dbg !28
  %4 = load %String, ptr %"$tmp@4184", align 8, !dbg !28
  store %String %4, ptr %return_value, align 8, !dbg !28
  br label %return, !dbg !28

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

declare %String @clone_string(ptr)

define private %String @"String from <:Type<Type<Integer>>>"(%"Type<Type<Integer>>" %0) !dbg !29 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Type<Integer>>", align 8
  store %"Type<Type<Integer>>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Type<Integer>>", ptr %ty, i32 0, i32 0, !dbg !30
  %name = getelementptr inbounds %"Type<Type<Integer>>Impl", ptr %2, i32 0, i32 0, !dbg !30
  %3 = call %String @clone_string(ptr %name), !dbg !30
  %"$tmp@4184" = alloca %String, align 8, !dbg !30
  store %String %3, ptr %"$tmp@4184", align 8, !dbg !30
  %4 = load %String, ptr %"$tmp@4184", align 8, !dbg !30
  store %String %4, ptr %return_value, align 8, !dbg !30
  br label %return, !dbg !30

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

define private void @initialize() !dbg !31 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !32
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !32
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !32
  %2 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !33
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !33
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !33
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !33
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !33
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !33
  store %"Type<Integer>" %4, ptr @x, align 8, !dbg !33
  br label %return, !dbg !33

return:                                           ; preds = %0
  ret void
}

define private void @initialize.1() !dbg !34 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !35
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !35
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !35
  %2 = call %String @string_from_c_string_and_length(ptr @5, i64 7), !dbg !36
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !36
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !36
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !36
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !36
  %4 = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !36
  %size = getelementptr inbounds %"Type<Integer>Impl", ptr %4, i32 0, i32 1, !dbg !36
  %5 = call %Integer @clone_integer(ptr %size), !dbg !36
  store %Integer %5, ptr @y, align 8, !dbg !36
  br label %return, !dbg !36

return:                                           ; preds = %0
  ret void
}

define private %Integer @"size of <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !37 {
  %return_value = alloca %Integer, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !38
  %size = getelementptr inbounds %"Type<Integer>Impl", ptr %2, i32 0, i32 1, !dbg !38
  %3 = call %Integer @clone_integer(ptr %size), !dbg !38
  %"$tmp@4252" = alloca %Integer, align 8, !dbg !38
  store %Integer %3, ptr %"$tmp@4252", align 8, !dbg !38
  %4 = load %Integer, ptr %"$tmp@4252", align 8, !dbg !38
  store %Integer %4, ptr %return_value, align 8, !dbg !38
  br label %return, !dbg !38

return:                                           ; preds = %1
  %5 = load %Integer, ptr %return_value, align 8
  ret %Integer %5
}

define private void @"println <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !39 {
  %x = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %x, align 8
  %2 = load %"Type<Integer>", ptr %x, align 8, !dbg !40
  %3 = call %String @"String from <:Type<Integer>>"(%"Type<Integer>" %2), !dbg !40
  call void @"println <:String>"(%String %3), !dbg !40
  br label %return, !dbg !41

return:                                           ; preds = %1
  ret void
}

define private %String @"String from <:Type<Integer>>"(%"Type<Integer>" %0) !dbg !42 {
  %return_value = alloca %String, align 8
  %ty = alloca %"Type<Integer>", align 8
  store %"Type<Integer>" %0, ptr %ty, align 8
  %2 = getelementptr inbounds %"Type<Integer>", ptr %ty, i32 0, i32 0, !dbg !43
  %name = getelementptr inbounds %"Type<Integer>Impl", ptr %2, i32 0, i32 0, !dbg !43
  %3 = call %String @clone_string(ptr %name), !dbg !43
  %"$tmp@4184" = alloca %String, align 8, !dbg !43
  store %String %3, ptr %"$tmp@4184", align 8, !dbg !43
  %4 = load %String, ptr %"$tmp@4184", align 8, !dbg !43
  store %String %4, ptr %return_value, align 8, !dbg !43
  br label %return, !dbg !43

return:                                           ; preds = %1
  %5 = load %String, ptr %return_value, align 8
  ret %String %5
}

declare void @destroy_integer(ptr)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 17, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = !DILocation(line: 0, column: 26, scope: !3)
!10 = !DILocation(line: 1, column: 17, scope: !3)
!11 = !DILocation(line: 1, column: 26, scope: !3)
!12 = !DILocation(line: 2, column: 21, scope: !3)
!13 = !DILocation(line: 3, column: 21, scope: !3)
!14 = !DILocation(line: 5, column: 8, scope: !3)
!15 = !DILocation(line: 6, column: 8, scope: !3)
!16 = !DILocation(line: 7, column: 8, scope: !3)
!17 = !DILocation(line: 7, column: 22, scope: !3)
!18 = !DILocation(line: 8, column: 8, scope: !3)
!19 = !DILocation(line: 6, scope: !3)
!20 = distinct !DISubprogram(name: "println <:Bool>", linkageName: "println <:Bool>", scope: !3, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!21 = !DILocation(line: 8, column: 9, scope: !20)
!22 = !DILocation(line: 7, column: 19, scope: !20)
!23 = distinct !DISubprogram(name: "size of <:Type<None>>", linkageName: "size of <:Type<None>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!24 = !DILocation(line: 8, column: 15, scope: !23)
!25 = distinct !DISubprogram(name: "size of <:Type<Bool>>", linkageName: "size of <:Type<Bool>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!26 = !DILocation(line: 8, column: 15, scope: !25)
!27 = distinct !DISubprogram(name: "String from <:Type<None>>", linkageName: "String from <:Type<None>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!28 = !DILocation(line: 8, column: 15, scope: !27)
!29 = distinct !DISubprogram(name: "String from <:Type<Type<Integer>>>", linkageName: "String from <:Type<Type<Integer>>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!30 = !DILocation(line: 8, column: 15, scope: !29)
!31 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !3, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!32 = !DILocation(line: 5, column: 8, scope: !31)
!33 = !DILocation(line: 0, scope: !31)
!34 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !3, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!35 = !DILocation(line: 6, column: 8, scope: !34)
!36 = !DILocation(line: 0, scope: !34)
!37 = distinct !DISubprogram(name: "size of <:Type<Integer>>", linkageName: "size of <:Type<Integer>>", scope: !3, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!38 = !DILocation(line: 8, column: 15, scope: !37)
!39 = distinct !DISubprogram(name: "println <:Type<Integer>>", linkageName: "println <:Type<Integer>>", scope: !3, file: !2, line: 6, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!40 = !DILocation(line: 8, column: 9, scope: !39)
!41 = !DILocation(line: 7, column: 19, scope: !39)
!42 = distinct !DISubprogram(name: "String from <:Type<Integer>>", linkageName: "String from <:Type<Integer>>", scope: !39, file: !2, line: 8, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!43 = !DILocation(line: 8, column: 15, scope: !42)
