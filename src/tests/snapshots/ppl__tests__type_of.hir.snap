---
source: src/tests/mod.rs
expression: hir
---
let ty: Type<Integer> = `type of <:Integer>`(1)
`println <:Type<Integer>>`((copy ty:Type<Integer>))

==MONOMORPHIZED==


fn<Integer> type of <$arg0: Integer> -> Type<Integer>:
	let $tmp@4643: Type<Integer> = (copy Type<Integer>:Type<Integer>)
	return ($tmp@4643:Type<Integer>)


fn<Integer> String from <ty: Type<Integer>> -> String:
	let $tmp@4518: String = `clone <:Reference<String>>`((ty:Type<Integer>).name)
	return ($tmp@4518:String)


fn println <x: Type<Integer>> -> None:
	let $tmp@185: String = `String from <:Type<Integer>>`((copy x:Type<Integer>))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)
