---
source: src/tests/mod.rs
expression: hir
---
trait Foo:
	fn foo <$arg0: Self> -> None

trait Bar:
	fn bar <$arg0: Self> -> None

trait FooBar:


fn foo <$arg0: None> -> None:
	let $tmp@105: String = "foo"
	let $tmp@99: None = `print <:Reference<String>>`((&$tmp@105:Reference<String>))
	`destroy <:ReferenceMut<String>>`(($tmp@105:String))
	return ($tmp@99:None)


fn bar <$arg0: None> -> None:
	let $tmp@137: String = "bar"
	let $tmp@129: None = `println <:Reference<String>>`((&$tmp@137:Reference<String>))
	`destroy <:ReferenceMut<String>>`(($tmp@137:String))
	return ($tmp@129:None)


fn<T: FooBar> foobar <x: T> -> None:
	`foo <:T>`((copy x:T))
	`bar <:T>`((copy x:T))

`foobar <:None>`(none)

==MONOMORPHIZED==


fn foo <$arg0: None> -> None:
	let $tmp@105: String = "foo"
	let $tmp@99: None = `print <:Reference<String>>`((&$tmp@105:Reference<String>))
	return ($tmp@99:None)



fn bar <$arg0: None> -> None:
	let $tmp@137: String = "bar"
	let $tmp@129: None = `println <:Reference<String>>`((&$tmp@137:Reference<String>))
	return ($tmp@129:None)



fn<None> foobar <x: None> -> None:
	`foo <:None>`((copy x:None))
	`bar <:None>`((copy x:None))
