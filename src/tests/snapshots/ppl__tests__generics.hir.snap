---
source: src/tests/mod.rs
expression: hir
---
type Point<T>:
	x: T
	y: T


fn<T> x of <p: Point<T>> -> T:
	let $tmp@53: T = (copy (p:Point<T>).x:T)
	return ($tmp@53:T)

let x: Integer = `x of <:Point<Integer>>`(Point<Integer> { x: 0, y: 0 })
`println <:Bool>`(`<:Integer> == <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)), 0))

fn<T> id <x: T> -> T:
	let $tmp@127: T = (copy x:T)
	return ($tmp@127:T)

`println <:Bool>`(`<:Integer> == <:Integer>`(`id <:Integer>`(1), 1))
`println <:String>`(`id <:String>`("hello"))
`id <:Point<Integer>>`(Point<Integer> { x: 0, y: 0 })
`destroy <:ReferenceMut<Integer>>`((x:Integer))

==MONOMORPHIZED==


fn<Integer> x of <p: Point<Integer>> -> Integer:
	let $tmp@53: Integer = (copy (p:Point<Integer>).x:Integer)
	return ($tmp@53:Integer)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((copy x:Bool)))
	return ($tmp@176:None)



fn<Integer> id <x: Integer> -> Integer:
	let $tmp@127: Integer = (copy x:Integer)
	return ($tmp@127:Integer)



fn String from <x: Bool> -> String:
	if (x:Bool):
		return "true"

	return "false"


fn println <x: Bool> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Bool>`((copy x:Bool)))
	return ($tmp@176:None)



fn<String> id <x: String> -> String:
	let $tmp@127: String = (copy x:String)
	return ($tmp@127:String)



fn<Point<Integer>> id <x: Point<Integer>> -> Point<Integer>:
	let $tmp@127: Point<Integer> = (copy x:Point<Integer>)
	return ($tmp@127:Point<Integer>)
