---
source: src/tests/mod.rs
expression: hir
---
`println <:String>`(`<:String> + <:String>`(`<:String> + <:String>`("Hello", " "), "World!"))
`println <:String>`(`String from <:None>`(none))
`println <:String>`(`String from <:Bool>`(false))
`println <:String>`(`String from <:Bool>`(true))
`println <:String>`(`String from <:Integer>`(0))
`println <:String>`(`String from <:Rational>`(0.0))
`println <:String>`(`String from <:Type<Integer>>`((copy Type<Integer>:Type<Integer>)))
`println <:String>`(`String from <:Type<Array<Integer>>>`((copy Type<Array<Integer>>:Type<Array<Integer>>)))

==MONOMORPHIZED==


fn<Integer> String from <ty: Type<Integer>> -> String:
	let $tmp@4515: String = `clone <:Reference<String>>`((ty:Type<Integer>).name)
	return ($tmp@4515:String)


fn<Array<Integer>> String from <ty: Type<Array<Integer>>> -> String:
	let $tmp@4515: String = `clone <:Reference<String>>`((ty:Type<Array<Integer>>).name)
	return ($tmp@4515:String)
