---
source: src/tests/mod.rs
expression: hir
---
`println <:String>`(`<:String> + <:String>`(`<:String> + <:String>`("Hello", " "), "World!"))
`println <:String>`(`String from <:None>`(none))
`println <:String>`(`String from <:Bool>`(false))
`println <:String>`(`String from <:Bool>`(true))
`println <:String>`(`String from <:Integer>`(0))
`println <:String>`(`String from <:Rational>`(0.0))
`println <:String>`(`String from <:Type<Integer>>`(Type<Integer> { name: "Integer", size: 8 }))
`println <:String>`(`String from <:Type<Array<Integer>>>`(Type<Array<Integer>> { name: "Array<Integer>", size: 8 }))

==MONOMORPHIZED==


fn<Integer> String from <ty: Type<Integer>> -> String:
	let $tmp@4184: String = `clone <:Reference<String>>`((ty:Type<Integer>).name)
	return ($tmp@4184:String)


fn<Array<Integer>> String from <ty: Type<Array<Integer>>> -> String:
	let $tmp@4184: String = `clone <:Reference<String>>`((ty:Type<Array<Integer>>).name)
	return ($tmp@4184:String)
