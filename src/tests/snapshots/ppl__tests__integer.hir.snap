---
source: src/tests/mod.rs
expression: hir
---
`println <:Integer>`(`default <:Type<Integer>>`(Type<Integer> { name: "Integer", size: 8 }))
`println <:Integer>`(`+ <:Integer>`(1))
`println <:Integer>`(`- <:Integer>`(2))
`println <:Integer>`(`<:Integer> + <:Integer>`(2, 1))
`println <:Integer>`(`<:Integer> ^ <:Integer>`(2, 2))
`println <:Integer>`(`<:Integer> - <:Integer>`(5, 0))
`println <:Integer>`(`<:Integer> * <:Integer>`(2, 3))
`println <:Rational>`(`<:Integer> / <:Integer>`(14, 2))

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((x:Integer)))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Rational>`((x:Rational)))
	return ($tmp@176:None)
