---
source: src/tests/mod.rs
expression: hir
---
`println <:Integer>`(`default <:Type<Integer>>`((copy Type<Integer>:Type<Integer>)))
let $tmp@35: Integer = 1
`println <:Integer>`(`clone <:Reference<Integer>>`((*`+ <:Reference<Integer>>`((&$tmp@35:Reference<Integer>)):Integer)))
`println <:Integer>`(`- <:Integer>`(2))
`println <:Integer>`(`<:Integer> + <:Integer>`(2, 1))
`println <:Integer>`(`<:Integer> ^ <:Integer>`(2, 2))
`println <:Integer>`(`<:Integer> - <:Integer>`(5, 0))
`println <:Integer>`(`<:Integer> * <:Integer>`(2, 3))
`println <:Rational>`(`<:Integer> / <:Integer>`(14, 2))
`destroy <:ReferenceMut<Integer>>`(($tmp@35:Integer))

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@185: String = `String from <:Integer>`((copy x:Integer))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)



@mangle_as("rational_as_string")
fn String from <$arg0: Rational> -> String

fn println <x: Rational> -> None:
	let $tmp@185: String = `String from <:Rational>`((copy x:Rational))
	let $tmp@176: None = `println <:Reference<String>>`((&$tmp@185:Reference<String>))
	return ($tmp@176:None)
