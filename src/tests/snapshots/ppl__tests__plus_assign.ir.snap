---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%Rational = type { ptr }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@4 = private unnamed_addr constant [8 x i8] c" World!\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define void @main.execute() !dbg !9 {
init_globals:
  call void @initialize(), !dbg !10
  br label %0, !dbg !10

0:                                                ; preds = %init_globals
  %1 = call %Rational @rational_from_c_string(ptr @1), !dbg !11
  %"$tmp0@16" = alloca %Rational, align 8, !dbg !11
  store %Rational %1, ptr %"$tmp0@16", align 8, !dbg !11
  %2 = load %Rational, ptr %"$tmp0@16", align 8, !dbg !11
  %value = alloca %Rational, align 8, !dbg !11
  store %Rational %2, ptr %value, align 8, !dbg !11
  %3 = call %String @string_from_c_string_and_length(ptr @2, i64 5), !dbg !12
  %"$tmp0@76" = alloca %String, align 8, !dbg !12
  store %String %3, ptr %"$tmp0@76", align 8, !dbg !12
  %4 = load %String, ptr %"$tmp0@76", align 8, !dbg !12
  %str = alloca %String, align 8, !dbg !12
  store %String %4, ptr %str, align 8, !dbg !12
  %5 = load %Rational, ptr %value, align 8, !dbg !13
  %6 = call %Rational @clone_rational(%Rational %5), !dbg !13
  %"$tmp0@28" = alloca %Rational, align 8, !dbg !13
  store %Rational %6, ptr %"$tmp0@28", align 8, !dbg !13
  %7 = load %Rational, ptr %"$tmp0@28", align 8, !dbg !13
  call void @"println <:Rational>"(%Rational %7), !dbg !13
  %"$tmp0@34" = alloca ptr, align 8, !dbg !14
  store ptr %value, ptr %"$tmp0@34", align 8, !dbg !14
  %8 = call %Rational @rational_from_c_string(ptr @3), !dbg !15
  %"$tmp1@43" = alloca %Rational, align 8, !dbg !15
  store %Rational %8, ptr %"$tmp1@43", align 8, !dbg !15
  %9 = load %Rational, ptr %"$tmp1@43", align 8, !dbg !15
  call void @"<:ReferenceMut<Rational>> += <:Rational>"(ptr %"$tmp0@34", %Rational %9), !dbg !15
  %10 = load %Rational, ptr %value, align 8, !dbg !16
  %11 = call %Rational @clone_rational(%Rational %10), !dbg !16
  %"$tmp0@55" = alloca %Rational, align 8, !dbg !16
  store %Rational %11, ptr %"$tmp0@55", align 8, !dbg !16
  %12 = load %Rational, ptr %"$tmp0@55", align 8, !dbg !16
  call void @"println <:Rational>"(%Rational %12), !dbg !16
  %"$tmp0@84" = alloca ptr, align 8, !dbg !17
  store ptr %str, ptr %"$tmp0@84", align 8, !dbg !17
  %13 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !18
  %"$tmp1@91" = alloca %String, align 8, !dbg !18
  store %String %13, ptr %"$tmp1@91", align 8, !dbg !18
  %14 = load %String, ptr %"$tmp1@91", align 8, !dbg !18
  call void @"<:ReferenceMut<String>> += <:String>"(ptr %"$tmp0@84", %String %14), !dbg !18
  %15 = load %String, ptr %str, align 8, !dbg !19
  %16 = call %String @clone_string(%String %15), !dbg !19
  %"$tmp0@109" = alloca %String, align 8, !dbg !19
  store %String %16, ptr %"$tmp0@109", align 8, !dbg !19
  %17 = load %String, ptr %"$tmp0@109", align 8, !dbg !19
  call void @"println <:String>"(%String %17), !dbg !19
  br label %return, !dbg !10

return:                                           ; preds = %0
  ret void
}

declare %Rational @rational_from_c_string(ptr)

declare %Rational @clone_rational(%Rational)

<<<<<<< HEAD
return:                                           ; preds = %0
  ret void
}

define void @main.execute() !dbg !13 {
init_globals:
  call void @initialize(), !dbg !14
  call void @initialize.1(), !dbg !15
  call void @initialize.2(), !dbg !16
  br label %0, !dbg !16

0:                                                ; preds = %init_globals
  %1 = load %Rational, ptr @value, align 8, !dbg !17
  %2 = call %Rational @clone_rational(%Rational %1), !dbg !17
  call void @"println <:Rational>"(%Rational %2), !dbg !17
  %3 = call %Rational @rational_from_c_string(ptr @3), !dbg !18
  call void @"<:ReferenceMut<Rational>> += <:Rational>"(ptr @value, %Rational %3), !dbg !18
  %4 = load %Rational, ptr @value, align 8, !dbg !19
  %5 = call %Rational @clone_rational(%Rational %4), !dbg !19
  call void @"println <:Rational>"(%Rational %5), !dbg !19
  %6 = call %String @string_from_c_string_and_length(ptr @4, i64 7), !dbg !20
  call void @"<:ReferenceMut<String>> += <:String>"(ptr @str, %String %6), !dbg !20
  %7 = load %String, ptr @str, align 8, !dbg !21
  %8 = call %String @clone_string(%String %7), !dbg !21
  call void @"println <:String>"(%String %8), !dbg !21
  %9 = load %Rational, ptr @value, align 8, !dbg !22
  call void @destroy_rational(%Rational %9), !dbg !22
  %10 = load %String, ptr @str, align 8, !dbg !23
  call void @destroy_string(%String %10), !dbg !23
  br label %return, !dbg !16

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Rational>"(%Rational %0) !dbg !24 {
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %2 = load %Rational, ptr %x, align 8, !dbg !25
  %3 = call %String @rational_as_string(%Rational %2), !dbg !25
  call void @"println <:String>"(%String %3), !dbg !25
  br label %return, !dbg !25
=======
define private void @"println <:Rational>"(%Rational %0) !dbg !20 {
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %2 = load %Rational, ptr %x, align 8, !dbg !21
  %3 = call %String @rational_as_string(%Rational %2), !dbg !21
  %"$tmp0@4557" = alloca %String, align 8, !dbg !21
  store %String %3, ptr %"$tmp0@4557", align 8, !dbg !21
  %4 = load %String, ptr %"$tmp0@4557", align 8, !dbg !21
  call void @"println <:String>"(%String %4), !dbg !21
  br label %return, !dbg !21
>>>>>>> tmp

return:                                           ; preds = %1
  ret void
}

declare %String @rational_as_string(%Rational)

declare void @"println <:String>"(%String)

<<<<<<< HEAD
define void @"<:ReferenceMut<Rational>> += <:Rational>"(ptr %0, %Rational %1) !dbg !26 {
=======
define void @"<:ReferenceMut<Rational>> += <:Rational>"(ptr %0, %Rational %1) !dbg !22 {
>>>>>>> tmp
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %Rational, align 8
  store %Rational %1, ptr %other, align 8
<<<<<<< HEAD
  %3 = load ptr, ptr %self, align 8, !dbg !27
  %4 = load ptr, ptr %self, align 8, !dbg !27
  %5 = load %Rational, ptr %4, align 8, !dbg !27
  %6 = load %Rational, ptr %other, align 8, !dbg !27
  %7 = call %Rational @rational_plus_rational(%Rational %5, %Rational %6), !dbg !27
  store %Rational %7, ptr %3, align 8, !dbg !27
  br label %return, !dbg !27
=======
  %3 = load ptr, ptr %self, align 8, !dbg !23
  %4 = load %Rational, ptr %3, align 8, !dbg !23
  %"$tmp0@6530" = alloca %Rational, align 8, !dbg !23
  store %Rational %4, ptr %"$tmp0@6530", align 8, !dbg !23
  %5 = load %Rational, ptr %"$tmp0@6530", align 8, !dbg !23
  %6 = load %Rational, ptr %other, align 8, !dbg !23
  %7 = call %Rational @rational_plus_rational(%Rational %5, %Rational %6), !dbg !23
  %"$tmp1@6530" = alloca %Rational, align 8, !dbg !23
  store %Rational %7, ptr %"$tmp1@6530", align 8, !dbg !23
  %8 = load ptr, ptr %self, align 8, !dbg !23
  %9 = load %Rational, ptr %"$tmp1@6530", align 8, !dbg !23
  store %Rational %9, ptr %8, align 8, !dbg !23
  br label %return, !dbg !23
>>>>>>> tmp

return:                                           ; preds = %2
  ret void
}

declare %Rational @rational_plus_rational(%Rational, %Rational)

<<<<<<< HEAD
define void @"<:ReferenceMut<String>> += <:String>"(ptr %0, %String %1) !dbg !28 {
=======
define void @"<:ReferenceMut<String>> += <:String>"(ptr %0, %String %1) !dbg !24 {
>>>>>>> tmp
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %other = alloca %String, align 8
  store %String %1, ptr %other, align 8
<<<<<<< HEAD
  %3 = load ptr, ptr %self, align 8, !dbg !29
  %4 = load ptr, ptr %self, align 8, !dbg !29
  %5 = load %String, ptr %4, align 8, !dbg !29
  %6 = load %String, ptr %other, align 8, !dbg !29
  %7 = call %String @string_plus_string(%String %5, %String %6), !dbg !29
  store %String %7, ptr %3, align 8, !dbg !29
  br label %return, !dbg !29
=======
  %3 = load ptr, ptr %self, align 8, !dbg !25
  %4 = load %Rational, ptr %3, align 8, !dbg !25
  %"$tmp0@6530" = alloca %Rational, align 8, !dbg !25
  store %Rational %4, ptr %"$tmp0@6530", align 8, !dbg !25
  %5 = load %Rational, ptr %"$tmp0@6530", align 8, !dbg !25
  %6 = load %Rational, ptr %other, align 8, !dbg !25
  %7 = call %Rational @rational_plus_rational(%Rational %5, %Rational %6), !dbg !25
  %"$tmp1@6530" = alloca %Rational, align 8, !dbg !25
  store %Rational %7, ptr %"$tmp1@6530", align 8, !dbg !25
  %8 = load ptr, ptr %self, align 8, !dbg !25
  %9 = load %Rational, ptr %"$tmp1@6530", align 8, !dbg !25
  store %Rational %9, ptr %8, align 8, !dbg !25
  br label %return, !dbg !25
>>>>>>> tmp

return:                                           ; preds = %2
  ret void
}

declare %String @clone_string(%String)

declare void @destroy_rational(%Rational)

declare void @destroy_string(%String)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 7, column: 11, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
<<<<<<< HEAD
!9 = distinct !DISubprogram(name: "initialize.1", linkageName: "initialize.1", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 0, column: 16, scope: !9)
!11 = distinct !DISubprogram(name: "initialize.2", linkageName: "initialize.2", scope: !2, file: !2, line: 5, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!12 = !DILocation(line: 5, column: 14, scope: !11)
!13 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, line: 1, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!14 = !DILocation(line: 7, column: 11, scope: !13)
!15 = !DILocation(line: 0, column: 16, scope: !13)
!16 = !DILocation(line: 5, column: 14, scope: !13)
!17 = !DILocation(line: 1, column: 8, scope: !13)
!18 = !DILocation(line: 2, column: 9, scope: !13)
!19 = !DILocation(line: 3, column: 8, scope: !13)
!20 = !DILocation(line: 6, column: 7, scope: !13)
!21 = !DILocation(line: 7, column: 8, scope: !13)
!22 = !DILocation(line: 0, scope: !13)
!23 = !DILocation(line: 5, scope: !13)
!24 = distinct !DISubprogram(name: "println <:Rational>", linkageName: "println <:Rational>", scope: !13, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 7, column: 11, scope: !24)
!26 = distinct !DISubprogram(name: "<:ReferenceMut<Rational>> += <:Rational>", linkageName: "<:ReferenceMut<Rational>> += <:Rational>", scope: !13, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 7, column: 11, scope: !26)
!28 = distinct !DISubprogram(name: "<:ReferenceMut<String>> += <:String>", linkageName: "<:ReferenceMut<String>> += <:String>", scope: !13, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!29 = !DILocation(line: 7, column: 11, scope: !28)
=======
!9 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 7, column: 11, scope: !9)
!11 = !DILocation(line: 0, column: 16, scope: !9)
!12 = !DILocation(line: 5, column: 14, scope: !9)
!13 = !DILocation(line: 1, column: 8, scope: !9)
!14 = !DILocation(line: 2, scope: !9)
!15 = !DILocation(line: 2, column: 9, scope: !9)
!16 = !DILocation(line: 3, column: 8, scope: !9)
!17 = !DILocation(line: 6, scope: !9)
!18 = !DILocation(line: 6, column: 7, scope: !9)
!19 = !DILocation(line: 7, column: 8, scope: !9)
!20 = distinct !DISubprogram(name: "println <:Rational>", linkageName: "println <:Rational>", scope: !9, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!21 = !DILocation(line: 7, column: 11, scope: !20)
!22 = distinct !DISubprogram(name: "<:ReferenceMut<Rational>> += <:Rational>", linkageName: "<:ReferenceMut<Rational>> += <:Rational>", scope: !9, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!23 = !DILocation(line: 7, column: 11, scope: !22)
!24 = distinct !DISubprogram(name: "<:ReferenceMut<String>> += <:String>", linkageName: "<:ReferenceMut<String>> += <:String>", scope: !9, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 7, column: 11, scope: !24)
>>>>>>> tmp
