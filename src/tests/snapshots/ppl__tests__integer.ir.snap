---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "/Users/gavrilikhin_d/Code/ppl/src/tests/integer/src/main.ppl"

%"Type<String>" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%Rational = type { ptr }

@"Type<String>" = private global %"Type<String>" zeroinitializer
@0 = private unnamed_addr constant [7 x i8] c"String\00", align 1

define private void @initialize() !dbg !3 {
  %1 = alloca %"Type<String>", align 8, !dbg !7
  %"Type<String>.name" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 6), !dbg !8
  store %String %2, ptr %"Type<String>.name", align 8, !dbg !8
  %"Type<String>.size" = getelementptr inbounds %"Type<String>", ptr %1, i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<String>.size", align 8, !dbg !8
  %4 = load %"Type<String>", ptr %1, align 8, !dbg !8
  store %"Type<String>" %4, ptr @"Type<String>", align 8, !dbg !8
  br label %return, !dbg !8

return:                                           ; preds = %0
  ret void
}

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

define void @main.execute() !dbg !9 {
init_globals:
  call void @initialize(), !dbg !10
  br label %0, !dbg !10

0:                                                ; preds = %init_globals
  %1 = call %Integer @integer_from_i64(i64 0), !dbg !11
  call void @"println <:Integer>"(%Integer %1), !dbg !11
  %2 = call %Integer @integer_from_i64(i64 1), !dbg !12
  %3 = call %Integer @"+ <:Integer>"(%Integer %2), !dbg !12
  call void @"println <:Integer>"(%Integer %3), !dbg !12
  %4 = call %Integer @integer_from_i64(i64 2), !dbg !13
  %5 = call %Integer @minus_integer(%Integer %4), !dbg !13
  call void @"println <:Integer>"(%Integer %5), !dbg !13
  %6 = call %Integer @integer_from_i64(i64 2), !dbg !14
  %7 = call %Integer @integer_from_i64(i64 1), !dbg !15
  %8 = call %Integer @integer_plus_integer(%Integer %6, %Integer %7), !dbg !15
  call void @"println <:Integer>"(%Integer %8), !dbg !15
  %9 = call %Integer @integer_from_i64(i64 2), !dbg !16
  %10 = call %Integer @integer_from_i64(i64 2), !dbg !17
  %11 = call %Integer @integer_power_integer(%Integer %9, %Integer %10), !dbg !17
  call void @"println <:Integer>"(%Integer %11), !dbg !17
  %12 = call %Integer @integer_from_i64(i64 5), !dbg !18
  %13 = call %Integer @integer_from_i64(i64 0), !dbg !19
  %14 = call %Integer @"<:Integer> - <:Integer>"(%Integer %12, %Integer %13), !dbg !19
  call void @"println <:Integer>"(%Integer %14), !dbg !19
  %15 = call %Integer @integer_from_i64(i64 2), !dbg !20
  %16 = call %Integer @integer_from_i64(i64 3), !dbg !21
  %17 = call %Integer @integer_star_integer(%Integer %15, %Integer %16), !dbg !21
  call void @"println <:Integer>"(%Integer %17), !dbg !21
  %18 = call %Integer @integer_from_i64(i64 14), !dbg !22
  %19 = call %Integer @integer_from_i64(i64 2), !dbg !23
  %20 = call %Rational @integer_slash_integer(%Integer %18, %Integer %19), !dbg !23
  call void @"println <:Rational>"(%Rational %20), !dbg !23
  br label %return, !dbg !10

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Integer>"(%Integer %0) !dbg !24 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !25
  %3 = call %String @integer_as_string(%Integer %2), !dbg !25
  call void @"println <:String>"(%String %3), !dbg !25
  br label %return, !dbg !25

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @integer_as_string(%Integer)

declare %Integer @"+ <:Integer>"(%Integer)

declare %Integer @minus_integer(%Integer)

declare %Integer @integer_plus_integer(%Integer, %Integer)

declare %Integer @integer_power_integer(%Integer, %Integer)

declare %Integer @"<:Integer> - <:Integer>"(%Integer, %Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

define private void @"println <:Rational>"(%Rational %0) !dbg !26 {
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %2 = load %Rational, ptr %x, align 8, !dbg !27
  %3 = call %String @rational_as_string(%Rational %2), !dbg !27
  call void @"println <:String>"(%String %3), !dbg !27
  br label %return, !dbg !27

return:                                           ; preds = %1
  ret void
}

declare %String @rational_as_string(%Rational)

declare %Rational @integer_slash_integer(%Integer, %Integer)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "/Users/gavrilikhin_d/Code/ppl/src/tests/integer/src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "initialize", linkageName: "initialize", scope: !2, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 7, column: 14, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!10 = !DILocation(line: 7, column: 14, scope: !9)
!11 = !DILocation(line: 0, column: 8, scope: !9)
!12 = !DILocation(line: 1, column: 9, scope: !9)
!13 = !DILocation(line: 2, column: 9, scope: !9)
!14 = !DILocation(line: 3, column: 8, scope: !9)
!15 = !DILocation(line: 3, column: 12, scope: !9)
!16 = !DILocation(line: 4, column: 8, scope: !9)
!17 = !DILocation(line: 4, column: 12, scope: !9)
!18 = !DILocation(line: 5, column: 8, scope: !9)
!19 = !DILocation(line: 5, column: 12, scope: !9)
!20 = !DILocation(line: 6, column: 8, scope: !9)
!21 = !DILocation(line: 6, column: 12, scope: !9)
!22 = !DILocation(line: 7, column: 8, scope: !9)
!23 = !DILocation(line: 7, column: 13, scope: !9)
!24 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !9, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!25 = !DILocation(line: 7, column: 14, scope: !24)
!26 = distinct !DISubprogram(name: "println <:Rational>", linkageName: "println <:Rational>", scope: !9, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!27 = !DILocation(line: 7, column: 14, scope: !26)
