---
source: src/tests/mod.rs
expression: ir
---
; ModuleID = 'main'
source_filename = "src/main.ppl"

%"Type<Integer>" = type { ptr }
%"Type<Integer>Impl" = type { %String, %Integer }
%String = type { ptr }
%Integer = type { ptr }
%Rational = type { ptr }

@0 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1

define void @main.execute() !dbg !3 {
  %1 = alloca %"Type<Integer>", align 8, !dbg !7
  %"Type<Integer>.data" = getelementptr inbounds %"Type<Integer>", ptr %1, i32 0, i32 0, !dbg !7
  %"Type<Integer>.name" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 0, !dbg !7
  %2 = call %String @string_from_c_string_and_length(ptr @0, i64 7), !dbg !8
  store %String %2, ptr %"Type<Integer>.name", align 8, !dbg !8
  %"Type<Integer>.size" = getelementptr inbounds %"Type<Integer>Impl", ptr %"Type<Integer>.data", i32 0, i32 1, !dbg !8
  %3 = call %Integer @integer_from_i64(i64 8), !dbg !8
  store %Integer %3, ptr %"Type<Integer>.size", align 8, !dbg !8
  %4 = load %"Type<Integer>", ptr %1, align 8, !dbg !8
  %5 = call %Integer @"default <:Type<Integer>>"(%"Type<Integer>" %4), !dbg !8
  call void @"println <:Integer>"(%Integer %5), !dbg !8
  %6 = call %Integer @integer_from_i64(i64 1), !dbg !9
  %7 = call %Integer @"+ <:Integer>"(%Integer %6), !dbg !9
  call void @"println <:Integer>"(%Integer %7), !dbg !9
  %8 = call %Integer @integer_from_i64(i64 2), !dbg !10
  %9 = call %Integer @minus_integer(%Integer %8), !dbg !10
  call void @"println <:Integer>"(%Integer %9), !dbg !10
  %10 = call %Integer @integer_from_i64(i64 2), !dbg !11
  %11 = call %Integer @integer_from_i64(i64 1), !dbg !12
  %12 = call %Integer @integer_plus_integer(%Integer %10, %Integer %11), !dbg !12
  call void @"println <:Integer>"(%Integer %12), !dbg !12
  %13 = call %Integer @integer_from_i64(i64 2), !dbg !13
  %14 = call %Integer @integer_from_i64(i64 2), !dbg !14
  %15 = call %Integer @integer_power_integer(%Integer %13, %Integer %14), !dbg !14
  call void @"println <:Integer>"(%Integer %15), !dbg !14
  %16 = call %Integer @integer_from_i64(i64 5), !dbg !15
  %17 = call %Integer @integer_from_i64(i64 0), !dbg !16
  %18 = call %Integer @"<:Integer> - <:Integer>"(%Integer %16, %Integer %17), !dbg !16
  call void @"println <:Integer>"(%Integer %18), !dbg !16
  %19 = call %Integer @integer_from_i64(i64 2), !dbg !17
  %20 = call %Integer @integer_from_i64(i64 3), !dbg !18
  %21 = call %Integer @integer_star_integer(%Integer %19, %Integer %20), !dbg !18
  call void @"println <:Integer>"(%Integer %21), !dbg !18
  %22 = call %Integer @integer_from_i64(i64 14), !dbg !19
  %23 = call %Integer @integer_from_i64(i64 2), !dbg !20
  %24 = call %Rational @integer_slash_integer(%Integer %22, %Integer %23), !dbg !20
  call void @"println <:Rational>"(%Rational %24), !dbg !20
  br label %return, !dbg !20

return:                                           ; preds = %0
  ret void
}

define private void @"println <:Integer>"(%Integer %0) !dbg !21 {
  %x = alloca %Integer, align 8
  store %Integer %0, ptr %x, align 8
  %2 = load %Integer, ptr %x, align 8, !dbg !22
  %3 = call %String @integer_as_string(%Integer %2), !dbg !22
  call void @"println <:String>"(%String %3), !dbg !22
  br label %return, !dbg !22

return:                                           ; preds = %1
  ret void
}

declare void @"println <:String>"(%String)

declare %String @integer_as_string(%Integer)

declare %Integer @"default <:Type<Integer>>"(%"Type<Integer>")

declare %String @string_from_c_string_and_length(ptr, i64)

declare %Integer @integer_from_i64(i64)

declare %Integer @"+ <:Integer>"(%Integer)

declare %Integer @minus_integer(%Integer)

declare %Integer @integer_plus_integer(%Integer, %Integer)

declare %Integer @integer_power_integer(%Integer, %Integer)

declare %Integer @"<:Integer> - <:Integer>"(%Integer, %Integer)

declare %Integer @integer_star_integer(%Integer, %Integer)

define private void @"println <:Rational>"(%Rational %0) !dbg !23 {
  %x = alloca %Rational, align 8
  store %Rational %0, ptr %x, align 8
  %2 = load %Rational, ptr %x, align 8, !dbg !24
  %3 = call %String @rational_as_string(%Rational %2), !dbg !24
  call void @"println <:String>"(%String %3), !dbg !24
  br label %return, !dbg !24

return:                                           ; preds = %1
  ret void
}

declare %String @rational_as_string(%Rational)

declare %Rational @integer_slash_integer(%Integer, %Integer)

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "ppl", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, sysroot: "/")
!2 = !DIFile(filename: "src/main.ppl", directory: ".")
!3 = distinct !DISubprogram(name: "main.execute", linkageName: "main.execute", scope: !2, file: !2, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
!7 = !DILocation(line: 0, column: 17, scope: !3)
!8 = !DILocation(line: 0, scope: !3)
!9 = !DILocation(line: 1, column: 9, scope: !3)
!10 = !DILocation(line: 2, column: 9, scope: !3)
!11 = !DILocation(line: 3, column: 8, scope: !3)
!12 = !DILocation(line: 3, column: 12, scope: !3)
!13 = !DILocation(line: 4, column: 8, scope: !3)
!14 = !DILocation(line: 4, column: 12, scope: !3)
!15 = !DILocation(line: 5, column: 8, scope: !3)
!16 = !DILocation(line: 5, column: 12, scope: !3)
!17 = !DILocation(line: 6, column: 8, scope: !3)
!18 = !DILocation(line: 6, column: 12, scope: !3)
!19 = !DILocation(line: 7, column: 8, scope: !3)
!20 = !DILocation(line: 7, column: 13, scope: !3)
!21 = distinct !DISubprogram(name: "println <:Integer>", linkageName: "println <:Integer>", scope: !3, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!22 = !DILocation(line: 7, column: 14, scope: !21)
!23 = distinct !DISubprogram(name: "println <:Rational>", linkageName: "println <:Rational>", scope: !3, file: !2, line: 7, type: !4, spFlags: DISPFlagDefinition, unit: !1)
!24 = !DILocation(line: 7, column: 14, scope: !23)
