---
source: src/tests/mod.rs
expression: hir
---
fn <x: Integer> plus two -> Integer:
	let $tmp@28: Integer = `sum <:Integer> <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)), 2)
	`destroy <:ReferenceMut<Integer>>`((x:Integer))
	return ($tmp@28:Integer)


fn sum <x: Integer> <y: Integer> -> Integer:
	let $tmp@84: Integer = `<:Integer> + <:Integer>`(`clone <:Reference<Integer>>`((x:Integer)), `clone <:Reference<Integer>>`((y:Integer)))
	`destroy <:ReferenceMut<Integer>>`((x:Integer))
	`destroy <:ReferenceMut<Integer>>`((y:Integer))
	return ($tmp@84:Integer)

`println <:Integer>`(`<:Integer> plus two`(2))

==MONOMORPHIZED==


@mangle_as("integer_as_string")
fn String from <$arg0: Integer> -> String

fn println <x: Integer> -> None:
	let $tmp@176: None = `println <:String>`(`String from <:Integer>`((copy x:Integer)))
	return ($tmp@176:None)
